import { Log, CoreConfig } from '@shared/common';
import { Translate } from '@shared/translate';
import { User, Authentication, Session, Push } from '@shared/data-core';
import { ChatMessage as Message } from '../../interfaces/message/message.interface';
import { Channels } from '../../interfaces/channels/channels.interface';
import { ChannelState } from '../../interfaces/pubnub/pubnub.interface';
import { Subscription, Observable, Subject } from 'rxjs';
export declare class PubnubSender {
    id: string;
    username: string;
    image: string;
    appTitle: string;
    constructor(id: any, username: any, image: any, appTitle?: string);
}
export declare class Pubnub {
    private authentication;
    private session;
    private translate;
    private log;
    protected push: Push;
    private coreConfig;
    protected sender: PubnubSender;
    protected onlineUsers: Map<string, any>;
    private _supportId;
    private _mainChannel;
    private _supportPrefix;
    private _groupPrefix;
    private _channels;
    private _presenceSubject;
    private _messageSubject;
    private _statusSubject;
    private _parentSubscription;
    private pubnub;
    constructor(authentication: Authentication, session: Session, translate: Translate, log: Log, push: Push, coreConfig: CoreConfig);
    readonly supportId: string;
    changeState(channels: string[], state: ChannelState): Promise<ChannelState>;
    setIsTyping(channel: string, isTyping: boolean): Promise<ChannelState>;
    isOnline(userId: string): boolean;
    isPresent(userId: string, channel?: string): Promise<boolean>;
    getChannelId(user1Id: string, user2Id: string): string;
    getSupportChannelId(userId: string): string;
    isSupportChannel(channel: any): boolean;
    parseSupportChannel(channel: any): any;
    getGroupChannelId(channelId: any): string;
    isGroupChannel(channel: any): boolean;
    parseGroupChannel(channel: any): any;
    getHistory(channel: string, count?: number, start?: number): Observable<[Array<Message>, number, number]>;
    deleteMessages(channel: string, timetokens: Array<number>): Promise<any>;
    getChannelTyping(channel: string): Subject<[string, boolean]>;
    initChannelTyping(channel: string, parent: Subscription): Subject<[string, boolean]>;
    join(channel: string, withPresence?: boolean, withTyping?: boolean): Observable<Message>;
    leave(channel: string): void;
    publish(channel: string, message: Message): void;
    sendChatMessage(channel: string, text: string, receiverId: string, receiverUsername: string, channels?: Channels, photo?: any, type?: string, options?: {}): void;
    safeMultiplexMessageObservable(channels: string[]): Observable<Message>;
    isAvailable(): boolean;
    init(user: User): Observable<Message>;
    updateOnlineUsers(): void;
    disconnect(): void;
    registerDevice(token: any, channel: any, type: any): void;
    unregisterDevice(token: any, channel: any, type: any): void;
}
