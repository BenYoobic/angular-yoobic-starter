import { Translate } from '@shared/translate';
import { IFormField, IColumnDefinition } from '@shared/stencil';
export declare class CellRenderer {
    static colors: {
        name: string;
        value: any;
        class: string;
        index: number;
        textValue: any;
    }[];
    static getColor(key: any): {
        name: string;
        value: any;
        class: string;
        index: number;
        textValue: any;
    };
    static getColumnDefinition(field: IFormField, translate: any, visibleFields?: Array<string>, sortModel?: Array<any>, component?: {
        photos?: Array<any>;
        onPhotoSelect?: Function;
        onVideoSelect?: Function;
    }): any;
    static getColumnTypes(): {
        address: {};
        audio: {};
        autocomplete: {};
        barcode: {};
        'between-date': {};
        'between-number': {};
        button: {};
        catalog: {};
        checkbox: {};
        color: {};
        date: {};
        daterange: {};
        'datetime-local': {};
        document: {};
        documentuploader: {};
        email: {};
        emailreport: {};
        filter: {};
        grid: {};
        image: {};
        information: {};
        inttel: {};
        invite: {};
        json: {};
        location: {};
        missionfield: {};
        missionscore: {};
        number: {};
        password: {};
        multiphotos: {};
        photo: {};
        productcheck: {};
        range: {};
        ranking: {};
        select: {};
        selectbuttons: {};
        selectbuttonsmulti: {};
        selectimage: {};
        selectmulti: {};
        signature: {};
        starrating: {};
        string: {};
        stripecard: {};
        tel: {};
        text: {};
        textarea: {};
        time: {};
        timer: {};
        todo: {};
        toggle: {};
        video: {};
        knob: {};
        selectchat: {};
        missingword: {};
        swipeselect: {};
        checklist: {};
        formula: {};
        videoplayer: {};
    };
    static getConfig(multiple: boolean, rowModelType: string, infiniteScrolling: boolean, pageSize: number, translate: Translate): any;
    static getPivotConfig(translate: Translate): any;
    static getTranslation(translate: Translate): {
        next: string;
        previous: string;
        page: string;
        of: string;
        more: string;
        to: string;
        loadingOoo: string;
        selectAll: string;
        searchOoo: string;
        blanks: string;
        filterOoo: string;
        applyFilter: string;
        equals: string;
        lessThan: string;
        greaterThan: string;
        contains: string;
        startsWith: string;
        endsWith: string;
        group: string;
        columns: string;
        rowGroupColumns: string;
        rowGroupColumnsEmptyMessage: string;
        valueColumns: string;
        pivotMode: string;
        groups: string;
        values: string;
        pivots: string;
        valueColumnsEmptyMessage: string;
        pivotColumnsEmptyMessage: string;
        noRowsToShow: string;
        pinColumn: string;
        valueAggregation: string;
        autosizeThiscolumn: string;
        autosizeAllColumns: string;
        groupBy: string;
        ungroupBy: string;
        resetColumns: string;
        expandAll: string;
        collapseAll: string;
        toolPanel: string;
        pinLeft: string;
        pinRight: string;
        noPin: string;
        sum: string;
        min: string;
        max: string;
        none: string;
        count: string;
        average: string;
        avg: string;
        copy: string;
        ctrlC: string;
        paste: string;
        ctrlV: string;
    };
    static createColumnDefs(collectionName?: string, translate?: Translate, campaignFields?: Array<any>, customColumnDefs?: Array<any>, includeDistance?: boolean, infiniteScrolling?: boolean, itemButtons?: Array<any>, colMinWidth?: number, visibleFields?: any, sortModel?: any, grid?: any, hiddenColumns?: any): IColumnDefinition[];
}
