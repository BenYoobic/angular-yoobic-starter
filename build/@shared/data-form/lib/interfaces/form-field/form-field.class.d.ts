import { Condition, Entity } from '@shared/data-core';
import { IFormField, IColumnDefinition } from '@shared/stencil';
export declare class FormField extends Entity implements IFormField {
    name: string;
    title: string;
    icon: string;
    description: string;
    value: any;
    url: any;
    sentence: any;
    formula: any;
    header: string;
    filterName: string;
    type: string;
    game: string;
    catalog: string;
    inventory: boolean;
    presence: boolean;
    placeholder: string;
    visible: boolean;
    tag: boolean;
    collectionName: string;
    filterByLocation: boolean;
    values: Array<any>;
    connectMode: string;
    leftValues: Array<any>;
    rightValues: Array<any>;
    correctValues: Array<any>;
    wrongValues: Array<any>;
    userTags: Array<string>;
    image: any;
    images: any;
    document: any;
    multiple: boolean;
    useButtons: boolean;
    mode: string;
    answer: Array<any>;
    explanation: string;
    explanationDocument: any;
    sessionValues: string;
    filterable: boolean;
    columnDefinition: IColumnDefinition;
    operators: Array<any>;
    hint: string;
    onChange: (value: any, data: any) => any;
    subQuery: {
        field: string;
        values: string;
    };
    isSubQuery: boolean;
    displayType: string;
    mapTransform: Function;
    queryFields: Array<string>;
    defaultFields: Array<string>;
    hideLabel: boolean;
    fixedPosition: boolean;
    imageLayout?: string;
    minPhotos: number;
    maxPhotos: number;
    required: boolean;
    allowComments: boolean;
    autoreload: boolean;
    allowTask: boolean;
    shareToFeed: boolean;
    allPhotosRequired: boolean;
    clearable: boolean;
    allowTime: boolean;
    allowLibrary: boolean;
    saveGeoloc: boolean;
    allowHistory: boolean;
    allowOpenDetails: boolean;
    showOnLocation: boolean;
    linked: boolean;
    allowAnnotate: boolean;
    showUsers: boolean;
    hideMobile: boolean;
    allowOther: boolean;
    readonly: boolean;
    radius: number;
    min: number;
    max: number;
    step: number;
    minDate: Date;
    maxDate: Date;
    showService: boolean;
    maxWidth: number;
    maxHeight: number;
    isImageRecognition: boolean;
    isBackgroundProcess: boolean;
    dontSaveIfHidden: boolean;
    imageRecognitionAlgorithm: any;
    imageRecognitionDisplay: any;
    duration: number;
    condition: Array<Condition>;
    flex: number;
    caption: string;
    reportOrder: number;
}
