{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://data-core/lib/services/config/config.service.ts","ng://data-core/lib/services/session/session.service.ts","ng://data-core/lib/services/loading-bar/loading-bar.service.ts","ng://data-core/lib/services/requestor/requestor.service.ts","ng://data-core/lib/services/algorithms/algorithms.service.ts","ng://data-core/lib/interfaces/cache/cache.interface.ts","ng://data-core/lib/services/cache/cache.service.ts","ng://data-core/lib/interfaces/model/model.interface.ts","ng://data-core/lib/interfaces/condition/icondition.interface.ts","ng://data-core/lib/services/models/models.service.ts","ng://data-core/lib/services/smartloc/smartloc.service.ts","ng://data-core/lib/services/googlemaps/googlemaps.service.ts","ng://data-core/lib/services/workplace/workplace.service.ts","ng://data-core/lib/services/files/files.service.ts","ng://data-core/lib/services/box/box.service.ts","ng://data-core/lib/services/unsplash/unsplash.service.ts","ng://data-core/lib/interfaces/response-object/response-object.interface.ts","ng://data-core/lib/services/broker/broker.service.ts","ng://data-core/lib/decorators/editable/editable.decorator.ts","ng://data-core/lib/decorators/searchable/searchable.decorator.ts","ng://data-core/lib/decorators/model/model.decorator.ts","ng://data-core/lib/interfaces/condition/condition.interface.ts","ng://data-core/lib/interfaces/constants/constants.interface.ts","ng://data-core/lib/interfaces/tenant/tenant.interface.ts","ng://data-core/lib/interfaces/location-type/location-type.interface.ts","ng://data-core/lib/decorators/mapping/mapping.decorator.ts","ng://data-core/lib/interfaces/location/location.interface.ts","ng://data-core/lib/interfaces/user/user.interface.ts","ng://data-core/lib/interfaces/notification/notification.interface.ts","ng://data-core/lib/services/push/push.service.ts","ng://data-core/lib/services/authentication/authentication.service.ts","ng://data-core/lib/services/authentication/authentication.guard.ts","ng://data-core/lib/services/backup/backup.service.ts","ng://data-core/lib/services/blog/blog.service.ts","ng://data-core/lib/services/authentication/current-session.resolver.ts","ng://data-core/lib/services/dashboard/dashboard.service.ts","ng://data-core/lib/services/files/files-broker.service.ts","ng://data-core/lib/services/googletranslate/googletranslate.service.ts","ng://data-core/lib/services/http-interceptor/http-interceptor.service.ts","ng://data-core/lib/services/platform/platform.service.ts","ng://data-core/lib/services/locations/locations.service.ts","ng://data-core/lib/services/loopback/loopback.service.ts","ng://data-core/lib/interfaces/mission-description/mission-description.interface.ts","ng://data-core/lib/services/missiondescriptions/missiondescriptions.service.ts","ng://data-core/lib/services/print/print.service.ts","ng://data-core/lib/interfaces/group/group.interface.ts","ng://data-core/lib/services/security/security.service.ts","ng://data-core/lib/services/tenants/tenants.service.ts","ng://data-core/lib/services/users/users.service.ts","ng://data-core/lib/services/version/version.service.ts","ng://data-core/lib/services/xlsx/xlsx.service.ts","ng://data-core/lib/pipes/filter/filter.pipe.ts","ng://data-core/lib/data-core.module.ts","ng://data-core/lib/interfaces/aggregate-log/aggregate-log.interface.ts","ng://data-core/lib/interfaces/algorithm/algorithm.interface.ts","ng://data-core/lib/interfaces/autorenew-config/autorenew-config.interface.ts","ng://data-core/lib/interfaces/backup/backup.interface.ts","ng://data-core/lib/interfaces/catalog/catalog.interface.ts","ng://data-core/lib/interfaces/chart-definition/chart-definition.interface.ts","ng://data-core/lib/interfaces/currency/currency.interface.ts","ng://data-core/lib/interfaces/dashboard/dashboard.interface.ts","ng://data-core/lib/interfaces/entity/entity.interface.ts","ng://data-core/lib/interfaces/file/file.interface.ts","ng://data-core/lib/interfaces/folder/folder.interface.ts","ng://data-core/lib/interfaces/dates/dates.interface.ts","ng://data-core/lib/interfaces/kpi/kpi.interface.ts","ng://data-core/lib/interfaces/mapping/mapping.interface.ts","ng://data-core/lib/interfaces/operation/operation.interface.ts","ng://data-core/lib/interfaces/product/product.interface.ts","ng://data-core/lib/interfaces/public-api-token/public-api-token.interface.ts","ng://data-core/lib/interfaces/slide/slide.interface.ts","ng://data-core/lib/interfaces/tableau/tableau.interface.ts","ng://data-core/lib/interfaces/tag-group/tag-group.interface.ts","ng://data-core/lib/interfaces/tag/tag.interface.ts","ng://data-core/lib/interfaces/todo/todo.interface.ts","ng://data-core/lib/interfaces/translation/translation.interface.ts","ng://data-core/lib/interfaces/workplace/workplace.interface.ts","ng://data-core/lib/services/activity/activity.service.ts","ng://data-core/lib/services/data-loader/data-loader.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","Config","localStorage","coreConfig","translate","servers","_id","name","url","PROD_URL","SANDBOX_URL","DEMO_URL","DEMO_FRESH_URL","STAGING_URL","DEV_URL","DEV1_URL","TRIAL_URL","E2E_URL","isUniversal","location","hostname","LOCALHOST_URL","TESTPEN_URL","isTestpen","isSandbox","defaultServer","server","get","set","_this","filter","serverUrl","IMAGE_URL","ZAPIER_INSTAGRAM_PROD_URL","getCurrentConfig","initialSelection","items","map","title","icon","custom","selections","unshift","Injectable","LocalStorage","CoreConfig","Translate","Session","localForage","config","openedChannels","selectedMissionDescription","selectedLocation","apiUrl","clear","clearUser","token","user","userId","tenant","currencies","groups","roles","hideWalkthrough","localPendingBadges","debugEvent","Promise","resolve","LocalForageService","tslib_1.__decorate","Persistent","PROGRESS","VISIBLE","LoadingBarEvent","type","LoadingBar","interval","_progress","_visible","_intervalCounterId","observable","Observable","subscriber","isPresent","visible","emitEvent","LoadingBarEventType","start","onCompleted","isStarting","complete","setInterval","progress","clearInterval","setTimeout","event","Requestor","http","session","loadingBar","fetch","options","body","JSON","stringify","noHeader","headers","buildFetchHeaders","slimbarStart","then","res","slimbarComplete","catch","errorHandler","post","withCount","isTempToken","looseCount","partialUrl","buildHeaders","observe","pipe","updateToken","formatResponse","catchError","patch","postRaw","blob","includeToken","responseType","postMultiPart","data","formData","FormData","keys","forEach","append","HttpHeaders","ret","postFile","file","observer","xhr","XMLHttpRequest","onreadystatechange","readyState","status","response","parse","open","setRequestHeader","getAppId","getAppVersion","send","params","suppressToken","httpParams","HttpParams","getBinaryContent","retVal","put","delete","request","downloadFile","filename","mediaType","saveBlob","saveArrayBuffer","array","Blob","Uint8Array","getFilenameSuffix","Date","toISOString","replace","isInvalidCredentials","indexOf","message","toUpperCase","unauthorizedEmitter","emit","payloadTooBigEmitter","of","HttpResponse","count","contentType","isIE11","Headers","err","buildFetchHeadersFallback","EventEmitter","HttpClient","Algorithms","rq","process","imageUrl","algorithmId","image_url","algorithm_id","throwError","results","processMultiple","imageUrls","CACHE_KEYS","chart","missiondescriptions","missiondatas","missionhistory","missionprogress","missions","missionservices","addresses","healthscore","database","Cache","promise","log","add","cacheKey","entryKey","item","from","getAll","remove","getDatabaseCacheKey","collectionName","getDatabaseCollection","setDatabaseCollection","updateDatabaseCollection","idField","deletedKeys","findIndex","clearDatabaseCollection","upsertInDatabaseCollection","entity","OFFLINE_PREFIX","getUUID","getByIdFromDatabaseCollection","removeFromDatabaseCollection","id","replaceFromDatabaseCollection","newEntity","find","PromiseService","Log","IModel","className","searchableFields","mappingFields","Map","_formFields","appearance","cloneDeep","f","CONDITION_TYPES","ROLES","ROLES_ASK","ROLES_CONDITIONS","isAdmin","operator","group","isClientAdmin","isAdminOrClientAdmin","isNotAdmin","isNeitherAdminNorClientAdmin","isManager","isNotManager","isTeam","isWorkplace","hasTodoOrScore","hasTodo","hasScore","hasService","hasProductBatch","hasMemoAssign","Models","addSearchableField","fieldName","model","createOrGetModel","updateModel","addMappingField","order","addAppearance","entityListItemProperty","addFormField","field","formFields","addBaseModel","baseClassName","base","baseFields","compact","union","uniq","setCollectionName","fields","include","searchSubquery","feathersService","isCustom","detailComponent","clearCollectionName","_models","getModel","isString","getModelByCollectionName","endsWith","name_1","getFilterableFields","advancedFiltersFields","campaignFields","filterable","searchable","sortable","FormFieldType","date","datetime","number","filterName","af","index","tenantIndex","finalFields","showSubQueryFilters","subfield","advanced","subQuery","sessionValues","subQueryOverride","isSubQuery","getFieldName","columnDefinition","forceName","getFieldTitle","fieldTitle","polyglot","isBooleanField","isNumberField","isPhotoField","isMultiPhotosField","isPhotoOrMultiPhotosField","isVideoField","isDateTimeField","isIntervalField","isChartableAutoFieldNoPhoto","isChartableAutoField","includePhoto","checkbox","toggle","select","selectmulti","selectbuttons","selectbuttonsmulti","starrating","range","ranking","formula","photo","multiphotos","autocomplete","isMultipleField","isColoredField","getFieldOperator","getMobileFieldIcon","MOBILE_FORM_FIELDS_ALL","exportWhere","filters","excludedFields","fs","simplifiedFilters","exportFilterField","isEmpty","and","pull","or","exportSubQuery","isAggregationQuery","isArray","fixCollectionName","where","values","leftJoin","exportSearch","search","match","like","getPublicCollectionName","getPhotoFromParams","node","row","toJS","colDef","extractPhoto","getPhotosFromParams","row_1","f_1","photos_1","v","multiIndex","getEmptyUrl","missiondata","hideUser","image","_downloadURL","isImageFile","fieldType","fieldData","extraData","tags","flagged","edit","stitch","editBy","editWidth","editHeight","texts","svgData","isMulti","isImage","comments","missiondescriptionRef","missiondescription","missiondataRef","mission","missionRef","userRef","userDisplayname","address","validated","_acl","isImageRecognition","getFieldTransform","types","getFieldTransformInternal","fields_1","missionFields","getFields","operators","slideTitle","excludedTypes","getFieldsFromSlides","slides","slide","slideIndex","handleUndefined","undefined","def","_geoloc","nearSphere","$geometry","coordinates","$maxDistance","radius","max","dateFormat","dateAdd","isObject","override","has","required","condition","multiple","suppressExport","Smartloc","geoLoc","defaultPosition","getLocation","forceRefresh","hasRole","locationRef","getLocationEntity","loc","Position","latitude","longitude","getDistance","lat1","lon1","lat2","lon2","unit","toPromise","role","GeoLocation","normalizeBounds","southwest","lat","lng","northeast","normalizeLocation","toStringLoc","pipeJoin","join","normalizeObservable","Googlemaps","geo","injector","network","cache","autocompleteFromSync","input","offset","language","components","query","getCurrentLanguage","_autocomplete","autocompleteLocationObserver","pos","concatMap","autocompleteMultiObserver","inputO","offsetO","locationO","combineLatest","nearbySearchFromSync","keyword","minprice","maxprice","opennow","rankby","_nearbySearch","nearbySearchNextResults","next_page_token","_nextSearchResults","nearbySearchLocationObserver","nearbySearchMultiObserver","keywordO","nameO","geocodeFromSync","bounds","region","_geocode","geocodeAddressObserver","addr","reverseGeocodeFromSyncLocation","latlng","result_type","location_type","_reverseGeocode","reverseGeocodeLatLngObserver","reverseGeocodeFromSyncPlaceID","place_id","reverseGeocodePlaceIDObserver","place_idO","placePredictionsLocationObserver","limit","nearbyRadius","skipName","debug","_placePredictions","placePredictionsFromSync","nearbyPlaceCodesFromSync","_nearbyPlaceCodes","resolveAddressLocation","_resolveAddressLocation","getCurrentAddresses","isOffline","position","geometry","formatted_address","toGeoLoc","coords","toJson","predictions","uniqBy","Injector","Network","Workplace","getAllGroups","g","postOnGroup","groupIds","Files","isFile","_isFile","isBase64","_isBase64","isFileUri","_isFileUri","_isImageFile","read","nativeFile","encoding","_read","getExtension","_getExtension","changeExtension","extension","_changeExtension","getMaxSize","_getMaxSize","toPng","_toPng","isValid","_isValid","_isImage","isVideo","_isVideo","isAudio","_isAudio","isDocument","_isDocument","getType","_getType","getMimeType","_getMimeType","getIcon","_getIcon","getVideoPoster","_getVideoPoster","b64toBlob","b64Data","sliceSize","_b64toBlob","blobToFile","_blobToFile","b64ToFile","_b64ToFile","saveBase64AsImageFile","_saveBase64AsImageFile","resizeBase64Image","base64","maxWidth","maxHeight","_resizeBase64Image","getBase64MimeType","_getBase64MimeType","getBase64Extension","_getBase64Extension","resizeImage","_resizeImage","getNativeDirectory","subfolder","_getNativeDirectory","resolveFilePath","filePath","_resolveFilePath","fixImageOrientation","path","fileName","_fixImageOrientation","moveToImageDirectory","originalFilePath","disableOrientationFix","_moveToImageDirectory","moveToImageDirectoryBase","fileDirPath","fileEntry","newName","_moveToImageDirectoryBase","fileNativeWriteFile","text","_fileNativeWriteFile","fileNativeCheckFile","_fileNativeCheckFile","fixAbsolutePath","_fixAbsolutePath","getCloudinaryUrl","_getCloudinaryUrl","getLocalFilePath","_getLocalFilePath","getLocalFileName","_getLocalFileName","saveToLocalFile","_saveToLocalFile","getUrlWithAnnotations","src","_getUrlWithAnnotations","cleanFileName","_cleanFileName","downloadFileToDevice","source","_downloadFileToDevice","showPdfOnDevice","_showPdfOnDevice","uploadProxy","photoUrl","uploadProxyUrl","cloudinary","exportToFile","content","openBlob","mimeType","_openBlob","afterOpenBlob","_afterOpenBlob","_requestExternalStoragePermission","reject","isAndroid","isCordova","permissions_1","window","cordova","permissions","hasPermission","READ_EXTERNAL_STORAGE","initialStatus","errorCallback_1","requestPermission","Box","upload","documentUrl","createViewingSession","boxId","getViewingContent","contentUrl","headIndex","overwriteStyle","protocol","getProtocol","slice","RegExp","Unsplash","skip","getKey","description","urls","raw","thumb","ResponseObject","Broker","box","googlemaps","workplace","files","transfer","geoloc","unsplash","init","getApiUrl","getServerUrl","getCollectionName","getById","idAttributeName","getQuery","encodeURIComponent","updateCustomModel","update","isOfflineEntity","save","upsert","mergeMap","Error","previousEntity","skipAcl","setAcl","incrementTags","subscribe","suffixs","hasFiles","_hasFiles","uploadEntityFiles","retval","upsertAll","entities","obs","forkJoin","progressEmitter","promisesOnly","totalOffset","properties","_getFileProperties","promises","prop","offsetIndex","total","prepareUpload","sequential","uploadEntitiesFiles","updateAll","rawQuery","__options","addWrite","users","w","creator","getCurrentGroups","_modelName","nativeURL","fileTransfer","onProgress","ev","lengthComputable","percentage","loaded","uploadUrl","fileKey","chunkedMode","result","fileError","fileUploader_1","getFileUploader","onBuildItemForm","fileItem","form","onCompleteItem","clearQueue","onProgressItem","addToQueue","queue","alias","uploadAll","uploadData","updateTags","collection","createAllTags","isOfflineId","deleteAll","exists","sorts","customFilter","colId","sort","searchWhere","filterWhere","filterSubquery","getCount","noOffline","getAllOffline","finalRes_1","finalQuery","offlineRes","tag","cacheId","noCount","getAllGoogleMaps","getAllWorkplace","getAllUnsplash","getAllTags","getAllOperation","finalRes_2","getAllQuery","useTagsCollection","ff","getAllTagsOffline","aggregateOptions","$match","$group","$max","$sort","$project","$sum","$push","$slice","aggregateQuery","$unwind","$regex","$options","$skip","$limit","orderBy","getMultipleAllTags","aggregateOptions_1","queries","conf","getAggregateQuery","aggregateQueries","rets","details","flatten","syncDatabase","lastSync","progressEvent","collections","getSyncedCollections","entry","Math","min","deletedKeys_1","filePromises_1","getDeletedEntities","deletedkeys","addToCache","cacheFile","all","clearDatabase","modelName","ids","getOfflineEntitiesCount","uploadDatabaseOrGetCount","uploadDatabase","returnCount","offlineData","isUploadingDatabase","collections_1","custommodels","promisesCount","promises_1","offlineId","startsWith","offlineOnly","newData_1","subData","removeFromOffline","lodashMap","isEqual","intersection","distance","isNullOrUndefined","some","toString","includeCount","aggregateOptionsOffline","aggregateLogs","finalArray","doc","project","defaultFields","stages","userIds","textSearch","createFile","hideMobile","tenantRef","_filename","size","_tenantRef","fileTypes","maxFileSize","FileUploader","execute","undoOperation","operationId","getMarkers","locations","l","color","getUserOrLocationStat","mode","ref","booked","$cond","if","$eq","else","finished","archived","rejected","finishedDate","latest","stats","available","tobevalidated","setTimescale","timescale","dateField","endDate","previous","getStartAndEndDates","this_1","suffix","object","extraData_1","this_2","objectPath_1","extraDataSuffix","FileTransfer","amount","notsliding","lastDate","period","startof","dateFrom","startOf","utc","toDate","dateTo","Editable","decoratedPropertyName","Searchable","Model","conditions","getGroupsTransform","isRole","isNotInformationField","information","getFormFieldValues","tslib_1.__extends","conditionalValues","defaultValues","hiddenFields","idOnly","mapTransform","clearable","dynamicValues","dynamicType","defaultType","Condition","ICondition","readonly","textarea","ConditionalField","IConditionalField","FORM_FILES_IMAGE_MIME","FORM_FILES_IMAGE_FILTER","FORM_FILES_GROUP_FILTER","forceModal","pageSize","fixedPosition","crop","json","Tenant","ITenant","forceExport","exportOrder","allowCustomTag","LocationType","ILocationType","Mapping","LOCATION_GEOCODESTATUS","onAddressChange","onTypeChange","typeRef","width","showMap","onChange","allowLibrary","filterableAdvanced","emailreport","showUsers","stateful","tab","email","invertedSort","Location","onUserLocationChange","User","getDisplayName","displayName","username","firstName","lastName","startCase","toLowerCase","first_name","last_name","_socialIdentity","facebook","getSimpleFields","flex","disableAutocomplete","password","secondary","IRoles","tel","deleteOnHidden","IUser","header","UserSettings","IUserSettings","SimpleUser","ISimpleUser","minDate","Notification","INotification","Push","oneSignal","pushNative","_notificationReceived","Subject","registered","_oneSignalPlayerIdChange","asObservable","registerOneSignal","onesignalAppId","_parentSubscription","Subscription","startInit","inFocusDisplaying","OSInFocusDisplayOption","None","handleNotificationReceived","notif","onNotificationReceived","handleNotificationOpened","onNotificationOpened","endInit","getIds","setSubscription","sendTags","pick","currentOneSignalId","updateUserOneSignalIds","syncHashedEmail","pushToken","addToken","forceLog","isWeb","OneSignal","isPushNotificationsSupported","appId","autoRegister","notifyButton","enable","safari_web_id","on","getUserId","oneSignalId","oneSignalAppIds","bundleId","notification","action","unregisterOneSignal","unsubscribe","without","platform","isIOS","_messaging","pushTokens","messaging","removeToken","getUserTokens","tokens","notifyGroups","notify","notifyUsers","u","notifyUserById","notifyUsersById","notifyUsersByQuery","userQuery","noQuery","scheduledDate","notificationOptions","merge","ios_badgeType","ios_badgeCount","_registerNative","promiseFulfilled","android","senderID","iconColor","Colors","success","ios","alert","badge","sound","registrationId","PushNative","Authentication","broker","login$","logout$","profileUpdated$","login","afterLogin","loginSocial","accessToken","provider","getLoginAdvancedUrl","method","host","getTenantAdvancedLoginMethods","getTenantFromToken","JwtHelperService","decodeToken","$mcfly$token","cleanUpLocalStorage","getCurrentSession","hasScandit","hasRoles","doLogout","logout","updateProfile","afterLogout","forceOffline","signup","imageData","inviteUsers","sendPassword","appName","appleStoreUrl","playStoreUrl","finalPlayStoreUrl","isLoggedIn","isTokenExpired","_map","hasAllRoles","every","hasGroup","hasGroups","hasAllGroups","checkSmartin","roleAdmin","isTrial","roleTrial","isDashboard","roleDashboard","roleMissionViewer","roleManager","roleTeam","isCrowd","isStore","isStoreManager","isRoleAdmin","getCurrentUser","isRoleEditor","isRoleViewer","isRoleManager","isRoleField","isRoleStoreManager","isRoleStore","hasAccessToOperations","hasAccessToBoost","passwordChange","oldPassword","newPassword","passwordReset","isMagicLink","urlPrefix","passwordResetConfirm","passwordResetAdmin","dontSendMail","userPasswordList","impersonate","forceLogout","generatePassword","charset","charAt","floor","random","userToUpdate","flatMap","updatedUser","jwtHelper","setToken","createPublicApiToken","tenantId","invalidatePublicApiToken","AuthenticationGuard","authentication","canActivate","state","CanDeactivateGuard","canDeactivate","component","route","BackupService","clusterName","backup","lastIndex","lastIndexOf","dateStr","substr","fromNow","dateParse","reverse","restore","backupName","s3Key","Blog","getUrl","getAppName","isIonic","blogUrl","rss","channel","enclosure","$","background","exec","pubDate","getLatestArticleDate","CurrentSessionResolver","Dashboard","publish","dashboard","dashboards","dashboardCopy","originalRef","creatorRef","inq","deletePublished","updatePublished","tabs","copy","newDashboard","definition","getChartDefinition","dateGrouping","groupByDate","timeScale","palette","showAs","datetimeFormat","getPhotos","missionDescription","locationTags","getFolderFolderStat","folderIds","folders","getFolderFileStat","keepHideMobile","FilesBroker","getFilesTransform","updateFileIcon","getFilesFoldersTransformAsync","fftype","ids_1","folder","stat","hasChildren","fileStats","cleanupFolder","folderId","imgSrc","Googletranslate","sourceLang","fixLanguage","targetLang","observables","availablesLanguage","HttpCustomInterceptor","intercept","req","handle","PlatformService","data$","ReplaySubject","handler","onReadyOrResume","Branch","setDebug","initSession","Locations","googleMaps","loadMarkers","maxPoints","getMarkersData","markers","legendColors","getLegendColors","getLastVisitDate","locationIds","getStatsAndDistanceTransformAsync","calculateDistanceAndKpiData","dates","lastVisit","countVisits","getDistanceTransform","getDistanceAndLastVisitTransform","isNumber","oldKpiData","kpiData","locationKpis","kpi","category","extraSymbol","variation","getAroundMeFilter","aroundMe","sortModel","getLocationTypesTransform","getLocationTypesStat","locationType","locationTypeIds","getHealthscore","locationId","nbDays","getUserLocations","Loopback","_client","loopbackClient","setAccessToken","MISSION_TYPES","MISSION_STATUS","onMissionDescriptionTypeChange","MissionDescription","IMissionDescription","availablesLanguageAll","MissionDescriptionCreate","externalValidators","externalFieldName","rule","MissionDescriptionSchedule","selectcard","MissionDescriptionNotifications","MissionDescriptionSettings","scoringConditions","displayType","Scoring","IScoring","Missiondescriptions","getFormFields","includeComments","mobileFields","reduce","current","allowComments","allowTime","cellRenderer","scoring","isActive","encodeScoringValue","Print","excludedDashboardColumns","printToMapping","columns","publicCollectionName","publicApiUrl","exportColumns","sortBy","catalog","timer","take","fileUrl","printToSpreadsheet","fixedCollectionName","mime","cacheQuery","catalogs","products","catalogRef","collectionNames","Content-Type","Group","IGroup","Security","getUserSession","addGroupUsers","initGroup","$addToSet","users.list","$each","list","removeGroupUsers","$pullAll","difference","addGroupGroups","removeGroupGroups","updateGroup","addedUsers","removedUsers","addedGroups","removedGroups","getGroupUserSubQuery","getGroupGroupSubQuery","getAncestry","map$","descendants","ROLES_LIST","Tenants","clone","to","copyFromId","copyToId","errors","Users","getSimplifiedProfile","simplifiedFields","getFreshdeskUrl","host_url","getCustomFilterNoAdmin","showMe","adminIds","nin","isUsernameTaken","getUsersByLocation","getGeofilterUsers","userTags","geofilterQuery","geofilters","geofilter","userFilter","Version","includeServerName","serverName","isCurrentVersionHigherThan","version","currentVersion","split","len","parseInt","Xlsx","readFile","fileReader","FileReader","onload","onerror","readAsDataURL","readAsBinaryString","readAsText","csv","workbook","XLSX.read","worksheet","Sheets","SheetNames","XLSX.utils","FS","skipEmptyLines","byteCharacters","atob","byteArrays","byteNumbers","charCodeAt","byteArray","readSheets","workbook_1","sheet","write","sheets","tables","hasHeader","table","value_1","valid","retVal_1","pid","product","reference","getUTCOffset","dt","isDate","wb","Props","wsName","ws","sheetFromArrayOfArrays","wbout","XLSX.write","bookType","bookSST","s2ab","datenum","date1904","UTC","opts","R","C","cell","cellRef","encode_cell","z","XLSX.SSF","_table","encode_range","buf","ArrayBuffer","view","FilterPipe","transform","args","_i","translate_1","getStringToTest","_keys","String","bool","isBlank","Pipe","SERVICES","PIPES","DataCoreModule","forRoot","configuredProviders","ngModule","providers","DocumentViewer","Device","FileOpener","FileNative","provide","HTTP_INTERCEPTORS","useClass","deps","multi","NgModule","declarations","imports","CommonModule","TranslateModule","HttpClientModule","exports","AggregateLog","IAggregateLog","Algorithm","IAlgorithm","AutorenewConfig","IAutorenewConfig","Backup","IBackup","Catalog","ICatalog","CHART_TYPES","CHART_DATEGROUPINGBY","CHART_SHOW_AS","CHART_DATETIMEFORMAT","CHART_TIMESCALE","onChartMissionFieldsChange","missionfields","selectedDescription","autoselect","missionfield","ChartDefinition","IChartDefinition","Currency","IDashboard","Entity","onUrlChange","documentuploader","File","IFile","Folder","IFolder","FileOrFolder","IFileOrFolder","BaseKpi","cd","showValues","showLegend","legendValue","accumulator","groupBySlider","getDateFormat","groupBy","format","getDates","showPreviousYear","startDate","getStartAndEndDatesCore","fixDates","getTime","kpiFormValues","y","simple","dow","getDay","isoWeekStart","setDate","getDate","getColor","black","isNaN","danger","warning","setDateFilters","allowNotExits","setLocationTagsFilters","setUserTagsFilters","setCampaignFilters","campaigns","campaignTags","missionType","getDateFormatMoment","tabIndex","IKpi","extensions","IMapping","IIMapping","Operation","IOperation","Product","IProduct","PublicApiToken","IPublicApiToken","Slide","ISlide","Tableau","ITableau","TagGroup","ITagGroup","Tag","ITag","onUserMeActionHandler","selectMatch","queryFields","extraButton","buttons","Todo","ITodo","TodoTask","ITodoTask","TodoTaskSimple","ITodoTaskSimple","translateButtonHandler","isCapitalized","capitalize","resetButtonHandler","button","Translation","ITranslation","WorkplaceGroups","IWorkplaceGroups","WorkplacePost","IWorkplacePost","Activity","_viewOrLike","entityName","entityRef","getActionFilter","entityId","getUserTransform","getActionAggregateOptions","$lookup","localField","foreignField","as","DataLoader","translateService","translate$$1","_currentPage","_total","_collectionName","_loading","_items","_translate","_looseCount","_pageSize","filterPipe","val","ceil","_loadingPageCount","loadWithSearch","currentPage","mapTransformAsync","load","loadWithSearchDebounce","debounceTime","distinctUntilChanged","switchMap","term","trim","convertItem","isFunction","x","ModelExtended","extendedClass","baseClass"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { LocalStorage, CoreConfig } from '@shared/common';\nimport { Translate } from '@shared/translate';\nimport { IConfigService } from '@shared/stencil';\n\n@Injectable()\nexport class Config implements IConfigService {\n  private static PROD_URL = 'https://api.yoobic.com/'; //https://yoobic-loopback-prod-v3.herokuapp.com/'; // 'https://api.yoobic.com/'\n  //private static CHINA_PROD_URL = 'https://china.yoobic.com/'; //https://yoobic-loopback-prod-v3.herokuapp.com/'; // 'https://api.yoobic.com/'\n  private static SANDBOX_URL = 'https://api-sandbox.yoobic.com/'; //https://yoobic-loopback-prod-v3.herokuapp.com/'; // 'https://api.yoobic.com/'\n  private static STAGING_URL = 'https://yoobic-loopback-staging-v3.herokuapp.com/';\n  private static DEMO_URL = 'https://api-demo.yoobic.com/';\n  private static DEMO_FRESH_URL = 'https://yoobic-loopback-demo-fresh.herokuapp.com/';\n  private static DEV_URL = 'https://yoobic-loopback-dev-v3.herokuapp.com/';\n  private static DEV1_URL = 'https://yoobic-loopback-dev1-v3.herokuapp.com/';\n  private static LOCALHOST_URL = 'https://localhost:3000/';\n  private static TESTPEN_URL = 'https://testpen.yoobic.com/';\n  private static TRIAL_URL = 'https://yoobic-loopback-trial.herokuapp.com/';\n  private static E2E_URL = 'https://yoobic-loopback-e2e.herokuapp.com/';\n\n  private static IMAGE_URL = 'https://upload.yoobic.com/api/'; // 'https://images.yoobic.com/api/ImageContainers/cloudinary/upload'; //'https://192.168.1.88:3000/api/ImageContainers/cloudinary/upload'//'http://localhost:3000/api/ImageContainers/cloudinary/upload'; //\n\n  private static ZAPIER_INSTAGRAM_PROD_URL = 'https://etl.yoobic.com/flows/zapier_instagram_start';\n  private server: string;\n\n  constructor(protected localStorage: LocalStorage, protected coreConfig: CoreConfig, protected translate: Translate) {}\n\n  public get servers() {\n    let servers = [\n      { _id: 'prod', name: 'Production', url: Config.PROD_URL },\n      { _id: 'sandbox', name: 'Sandbox', url: Config.SANDBOX_URL },\n      { _id: 'demo', name: 'Demo', url: Config.DEMO_URL },\n      { _id: 'demofresh', name: 'Demo Fresh', url: Config.DEMO_FRESH_URL },\n      { _id: 'staging', name: 'Staging', url: Config.STAGING_URL },\n      { _id: 'dev', name: 'Development', url: Config.DEV_URL },\n      { _id: 'dev1', name: 'Development 1', url: Config.DEV1_URL },\n      { _id: 'trial', name: 'Trial', url: Config.TRIAL_URL },\n      { _id: 'e2e', name: 'E2E', url: Config.E2E_URL }\n    ];\n\n    if (!this.coreConfig.isUniversal() || location.hostname === 'localhost') {\n      servers.push({ _id: 'localhost', name: 'Localhost', url: Config.LOCALHOST_URL });\n      servers.push({ _id: 'testpen', name: 'Testpen', url: Config.TESTPEN_URL });\n    }\n    if (this.isTestpen) {\n      servers = [{ _id: 'testpen', name: 'Testpen', url: Config.TESTPEN_URL }];\n    }\n    if (this.isSandbox) {\n      servers = [{ _id: 'sandbox', name: 'Sandbox', url: Config.SANDBOX_URL }];\n    }\n    return servers;\n  }\n\n  public get serverUrl() {\n    if (this.isTestpen) {\n      return Config.TESTPEN_URL;\n    }\n    if (this.isSandbox) {\n      return Config.SANDBOX_URL;\n    }\n    let defaultServer;\n    if (this.server && this.server !== '') {\n      defaultServer = this.server;\n    } else {\n      defaultServer = Config.PROD_URL; //Config.DEV_URL;\n    }\n    this.server = this.localStorage.get('SERVER') || defaultServer;\n    return this.server;\n  }\n\n  public get serverName() {\n    let server = this.servers.filter(s => s.url === this.serverUrl);\n    if (server && server.length === 1) {\n      return server[0].name;\n    }\n    return this.translate.get('CUSTOM');\n  }\n\n  public set serverUrl(url) {\n    this.localStorage.set('SERVER', url);\n  }\n\n  public get apiUrl() {\n    return this.serverUrl + 'api/';\n  }\n\n  public get publicApiUrl() {\n    return this.serverUrl + 'public/api/';\n  }\n\n  public get uploadUrl() {\n    return (this.localStorage.get('SERVER_IMAGE') || Config.IMAGE_URL) + 'ImageContainers/cloudinary/upload';\n  }\n\n  public get uploadProxyUrl() {\n    return (this.localStorage.get('SERVER_IMAGE') || Config.IMAGE_URL) + 'cloudinary/uploadProxyImage';\n  }\n\n  public get zapierInstagramUrl() {\n    let url = this.serverUrl;\n    switch (url) {\n      case Config.PROD_URL:\n        return Config.ZAPIER_INSTAGRAM_PROD_URL;\n      default:\n        return '';\n    }\n  }\n\n  public get isTestpen() {\n    return !this.coreConfig.isUniversal() && (location.hostname === 'testpen-dashboard.yoobic.com' || location.hostname === 'testpen-mobile.yoobic.com' || this.server === Config.TESTPEN_URL);\n  }\n\n  public get isSandbox() {\n    return !this.coreConfig.isUniversal() && (location.hostname === 'dashboard-sandbox.yoobic.com' || location.hostname === 'operations-sandbox.yoobic.com' || location.hostname === 'operations-mobile-sandbox.yoobic.com');\n  }\n\n  public get isE2E() {\n    return this.serverUrl === Config.E2E_URL;\n  }\n\n  public get isProduction() {\n    return this.serverUrl === Config.PROD_URL;\n  }\n\n  public get isDemo() {\n    return this.serverUrl === Config.DEMO_URL || this.serverUrl === Config.DEMO_FRESH_URL;\n  }\n\n  public getCurrentConfig() {\n    let items = this.servers.map(server => ({\n      title: server.name,\n      url: server.url,\n      _id: server._id,\n      icon: 'yo-servers'\n    }));\n    let custom: { title: string; url: string; _id: string; icon: string } = {\n      title: this.translate.get('CUSTOM'),\n      url: null,\n      _id: 'custom',\n      icon: 'yo-edit'\n    };\n    let selections = items.filter(s => s.url === this.serverUrl);\n    let initialSelection: { title: string; url: string; _id: string; icon: string };\n    if (selections.length <= 0) {\n      custom.url = this.serverUrl;\n      initialSelection = custom;\n    } else {\n      initialSelection = selections[0];\n    }\n    items.unshift(custom);\n\n    return { items, initialSelection, custom };\n  }\n}\n","import { Injectable } from '@angular/core';\n//import { User } from '../../interfaces/user/user.interface';\nimport { Currency } from '../../interfaces/currency/currency.interface';\nimport { Location } from '../../interfaces/location/location.interface';\nimport { Tenant } from '../../interfaces/tenant/tenant.interface';\nimport { Config } from '../config/config.service';\n\nimport { MissionDescription } from '../../interfaces/mission-description/mission-description.interface';\nimport { Persistent, LocalForageService } from '@shared/common';\nimport { IUser, ISessionService, ITranslation } from '@shared/stencil';\n\n@Injectable()\nexport class Session implements ISessionService {\n  public token: string;\n  public user: IUser;\n  public userId: string;\n  public currencies: Array<Currency>;\n  public groups: Array<string>;\n  public roles: Array<string>;\n  public tenant: Tenant;\n  public photoAnnotationTranslations: Array<ITranslation>;\n  public cameraStarted: boolean;\n  public hasScandit: boolean;\n\n  @Persistent('login.hideWalkthrough') public hideWalkthrough: boolean;\n  @Persistent('badges') localPendingBadges;\n  @Persistent('debugEvent') debugEvent: boolean;\n\n  public openedChannels: Array<string> = [];\n\n  public selectedMissionDescription: MissionDescription = null;\n  public selectedLocation: Location = null;\n\n  constructor(protected localForage: LocalForageService, protected config: Config) {}\n\n  get apiUrl() {\n    return this.config.apiUrl;\n  }\n\n  clear(clearUser = true) {\n    if (clearUser) {\n      this.token = '';\n      this.user = null;\n      this.userId = null;\n      this.tenant = null;\n      this.currencies = [];\n      this.groups = [];\n      this.roles = [];\n      this.hideWalkthrough = false;\n      this.localPendingBadges = {};\n      this.debugEvent = false;\n    }\n    return Promise.resolve();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { isPresent } from '@shared/stencil';\n\nimport { Observable, Subscriber } from 'rxjs';\n\nexport enum LoadingBarEventType {\n  PROGRESS,\n  VISIBLE\n}\n\nexport class LoadingBarEvent {\n  constructor(public type: LoadingBarEventType, public value: any) {}\n}\n\n@Injectable()\nexport class LoadingBar {\n  public interval: number = 500; // in milliseconds\n  public observable: Observable<LoadingBarEvent>;\n\n  private _progress: number = 0;\n  private _visible: boolean = true;\n  private _intervalCounterId: any = 0;\n  private subscriber: Subscriber<LoadingBarEvent>;\n  private isStarting: boolean;\n\n  constructor() {\n    this.observable = new Observable<LoadingBarEvent>((subscriber: Subscriber<LoadingBarEvent>) => {\n      this.subscriber = subscriber;\n    });\n  }\n\n  set progress(value: number) {\n    if (isPresent(value)) {\n      if (value > 0) {\n        this.visible = true;\n      }\n      this._progress = value;\n      this.emitEvent(new LoadingBarEvent(LoadingBarEventType.PROGRESS, this._progress));\n    }\n  }\n\n  get progress(): number {\n    return this._progress;\n  }\n\n  set visible(value: boolean) {\n    if (isPresent(value)) {\n      this._visible = value;\n      this.emitEvent(new LoadingBarEvent(LoadingBarEventType.VISIBLE, this._visible));\n    }\n  }\n\n  get visible(): boolean {\n    return this._visible;\n  }\n\n  start(onCompleted: Function = null) {\n    if (!this.isStarting) {\n      this.isStarting = true;\n      this.complete();\n      this.visible = true;\n      this._intervalCounterId = setInterval(() => {\n        this.progress++;\n        if (this.progress === 100) {\n          this.complete();\n        }\n      }, this.interval);\n      this.isStarting = false;\n    }\n  }\n\n  complete() {\n    if (this._intervalCounterId) {\n      clearInterval(this._intervalCounterId);\n      this._intervalCounterId = null;\n    }\n    this.progress = 100;\n    setTimeout(() => {\n      this.visible = false;\n      this.progress = 0;\n    }, 250);\n  }\n\n  private emitEvent(event: LoadingBarEvent) {\n    if (this.subscriber) {\n      this.subscriber.next(event);\n    }\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\n\nimport { Session } from '../session/session.service';\nimport { Config } from '../config/config.service';\nimport { LoadingBar } from '../loading-bar/loading-bar.service';\n\nimport { CoreConfig } from '@shared/common';\n\n//import * as FileSaver from 'file-saver';\nimport saveAs from 'file-saver';\nimport { keys } from 'lodash-es';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n/* beautify ignore:start */\ndeclare var fetch;\n/* beautify ignore:end */\n\n@Injectable()\nexport class Requestor {\n  static unauthorizedEmitter = new EventEmitter<any>();\n  static payloadTooBigEmitter = new EventEmitter<any>();\n\n  constructor(protected http: HttpClient, public session: Session, protected config: Config, protected loadingBar: LoadingBar, protected coreConfig: CoreConfig) {}\n\n  fetch(url: string, options: any) {\n    if (options.body && typeof options.body === 'object') {\n      options.body = JSON.stringify(options.body);\n    }\n    if (options.noHeader !== true) {\n      options.headers = this.buildFetchHeaders();\n    }\n    delete options.noHeader;\n    this.slimbarStart();\n    return fetch(url, options)\n      .then(res => {\n        this.slimbarComplete();\n        return res;\n      })\n      .catch(e => {\n        this.slimbarComplete();\n        return this.errorHandler(e, url);\n      });\n  }\n\n  post(url: string, body: any, token?: string, withCount: boolean = false, isTempToken: boolean = false, looseCount: boolean = false, partialUrl: boolean = false): Observable<any> {\n    this.slimbarStart();\n    if (partialUrl) {\n      url = this.config.apiUrl + url;\n    }\n    return this.http\n      .post(url, body ? JSON.stringify(body) : '', {\n        headers: this.buildHeaders(withCount, token, null, isTempToken, false, looseCount),\n        observe: 'response'\n      })\n      .pipe(\n        map(\n          (res: HttpResponse<any>): any => {\n            this.slimbarComplete();\n            this.updateToken(res);\n            if (res['_body'] === '') {\n              return {};\n            }\n            return this.formatResponse(res, withCount);\n          }\n        ),\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  patch(url: string, body: any, token?: string, withCount: boolean = false, isTempToken: boolean = false, looseCount: boolean = false, partialUrl: boolean = false): Observable<any> {\n    this.slimbarStart();\n    if (partialUrl) {\n      url = this.config.apiUrl + url;\n    }\n    return this.http\n      .patch(url, body ? JSON.stringify(body) : '', {\n        headers: this.buildHeaders(withCount, token, null, isTempToken, false, looseCount),\n        observe: 'response'\n      })\n      .pipe(\n        map(\n          (res: HttpResponse<any>): any => {\n            this.slimbarComplete();\n            this.updateToken(res);\n            if (res['_body'] === '') {\n              return {};\n            }\n            return this.formatResponse(res, withCount);\n          }\n        ),\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  postRaw(url: string, body: any, blob?: boolean, includeToken?: boolean) {\n    this.slimbarStart();\n    return this.http\n      .post(url, body ? JSON.stringify(body) : '', {\n        headers: this.buildHeaders(false, null, null, null, !includeToken),\n        responseType: <any>(blob ? 'arraybuffer' : 'json'),\n        observe: 'response'\n      })\n      .pipe(\n        map(\n          (res: HttpResponse<any>): any => {\n            this.slimbarComplete();\n            return res;\n          }\n        ),\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  postMultiPart(url: string, data: Object) {\n    this.slimbarStart();\n    const formData = new FormData();\n    keys(data).forEach(key => {\n      formData.append(key, data[key]);\n    });\n    const headers = new HttpHeaders();\n    return this.http\n      .post(url, formData, { headers, observe: 'response', responseType: 'text' })\n      .pipe(\n        map((ret: HttpResponse<any>) => {\n          this.slimbarComplete();\n          return ret.body;\n        })\n      )\n      .pipe(\n        catchError(e => {\n          this.slimbarComplete();\n          throw e;\n        })\n      );\n  }\n\n  postFile(url: string, file: File): Observable<any> {\n    this.slimbarStart();\n    return new Observable(observer => {\n      let formData: FormData = new FormData();\n      formData.append('file', file, file.name);\n      let xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            observer.next(xhr.response ? JSON.parse(xhr.response) : '');\n            observer.complete();\n          } else {\n            observer.error(xhr.response);\n          }\n          this.slimbarComplete();\n        }\n      };\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('Authorization', 'Bearer ' + this.session.token);\n      xhr.setRequestHeader('X-Application-Id', this.coreConfig.getAppId());\n      xhr.setRequestHeader('Yoobic-Client-Version', this.coreConfig.getAppVersion());\n      xhr.send(formData);\n    });\n  }\n\n  get(url: string, withCount: boolean = false, token?: string, params?: Array<{ name: string; value: any }>, suppressToken?: boolean): Observable<any> {\n    this.slimbarStart();\n    let httpParams = new HttpParams();\n    if (params && params.length > 0) {\n      params.forEach(p => {\n        httpParams = httpParams.set(p.name, p.value);\n      });\n    }\n\n    return this.http\n      .get(url, {\n        headers: this.buildHeaders(withCount, token, null, null, suppressToken),\n        params: httpParams,\n        observe: 'response'\n      })\n      .pipe(\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        }),\n        map((res: HttpResponse<any>) => {\n          this.slimbarComplete();\n          this.updateToken(res);\n          return this.formatResponse(res, withCount);\n        })\n      );\n  }\n\n  getBinaryContent(url: string): Observable<any> {\n    this.slimbarStart();\n    return this.http\n      .get(url, { responseType: 'arraybuffer' })\n      .pipe(\n        map(retVal => {\n          this.slimbarComplete();\n          return retVal;\n        })\n      )\n      .pipe(\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  put(url: string, body: any): Observable<any> {\n    this.slimbarStart();\n    return this.http\n      .put(url, body ? JSON.stringify(body) : null, {\n        headers: this.buildHeaders(),\n        observe: 'response'\n      })\n      .pipe(\n        map((res: HttpResponse<any>) => {\n          this.updateToken(res);\n          this.slimbarComplete();\n          return res.body;\n        }),\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  delete(url: string, body?: any): Observable<any> {\n    this.slimbarStart();\n    return this.http\n      .request('delete', url, {\n        headers: this.buildHeaders(),\n        observe: 'response',\n        body: body\n      })\n      .pipe(\n        map((res: HttpResponse<any>) => {\n          this.updateToken(res);\n          this.slimbarComplete();\n          return res.body;\n        }),\n        catchError(e => {\n          this.slimbarComplete();\n          return this.errorHandler(e, url);\n        })\n      );\n  }\n\n  downloadFile(filename: string, mediaType: string, url: string, options: any): Promise<any> {\n    this.slimbarStart();\n    return this.fetch(url, options)\n      .then(res => {\n        return res && res.blob ? res.blob() : null;\n      })\n      .then(blob => {\n        if (blob) {\n          (<any>saveAs)(blob, filename);\n        }\n        this.slimbarComplete();\n      })\n      .catch(e => {\n        this.slimbarComplete();\n        return this.errorHandler(e, url);\n      });\n  }\n\n  saveBlob(blob: Blob, filename: string) {\n    (<any>saveAs)(blob, filename);\n  }\n\n  saveArrayBuffer(array: ArrayBuffer, filename: string) {\n    let blob = new Blob([new Uint8Array(array)]);\n    (<any>saveAs)(blob, filename);\n  }\n\n  getFilenameSuffix(): string {\n    return '_' + new Date().toISOString().replace('.', '_');\n  }\n\n  private errorHandler(e: any, url) {\n    let isInvalidCredentials: boolean = false;\n    if (e && e.status === 401 && url && url.indexOf(this.config.serverUrl) >= 0 && e.error && e.error.error && (e.error.error.name === 'InvalidCredentials' || e.error.error.name === 'OnlySsoLoginAllowed' || e.error.error.message === 'Only SSO login allowed')) {\n      isInvalidCredentials = true;\n    }\n    if (e.status === 401 && url && url.indexOf(this.config.serverUrl) >= 0 && !isInvalidCredentials && url.indexOf('getCampaignScore') < 0 && e.error && e.error.error && e.error.error.name && e.error.error.name.toUpperCase() === 'LOGOUT') {\n      Requestor.unauthorizedEmitter.emit(e);\n    } else if (e.status === 413) {\n      Requestor.payloadTooBigEmitter.emit(e);\n    } else if (e.status === 404) {\n      return of(new HttpResponse<any>(<any>{ body: {}, status: 404 }));\n    } //else {\n    throw e;\n    //}\n    //return Observable.of(e);\n  }\n\n  private formatResponse(res: HttpResponse<any>, withCount: boolean = false) {\n    return withCount\n      ? {\n          data: res.body,\n          count: +(res.headers.get('x-total-count') || res.headers.get('X-Total-Count') || res.headers.get('x-loose-count') || res.headers.get('X-Loose-Count')) || 0\n        }\n      : res.body;\n  }\n\n  private buildHeaders(withCount: boolean = false, token?: string, contentType?: string, isTempToken?: boolean, suppressToken?: boolean, looseCount?: boolean) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', contentType || 'application/json');\n    headers = headers.set('Accept', 'application/json');\n    headers = headers.set('X-Application-Id', this.coreConfig.getAppId());\n    headers = headers.set('Yoobic-Client-Version', this.coreConfig.getAppVersion());\n\n    if (withCount) {\n      if (looseCount) {\n        headers = headers.set('x-loose-count', 'true');\n      }\n      headers = headers.set('x-total-count', 'true');\n    } else {\n      headers = headers.set('x-loose-count', 'true');\n    }\n    if (suppressToken !== true) {\n      if (token) {\n        if (isTempToken) {\n          headers = headers.set('token', token);\n        } else {\n          headers = headers.set('Authorization', 'Bearer ' + token);\n        }\n      } else if (this.session.token) {\n        headers = headers.set('Authorization', 'Bearer ' + this.session.token);\n      }\n    }\n    return headers;\n  }\n\n  private buildFetchHeaders(withCount: boolean = false, token?: string, contentType?: string, isTempToken?: boolean, suppressToken?: boolean, looseCount?: boolean) {\n    try {\n      if (!this.coreConfig.isIE11() && Headers) {\n        let headers = new Headers();\n        headers.append('Content-Type', contentType || 'application/json');\n        headers.append('Accept', 'application/json');\n        headers.append('X-Application-Id', this.coreConfig.getAppId());\n        headers.append('Yoobic-Client-Version', this.coreConfig.getAppVersion());\n\n        if (withCount) {\n          if (looseCount) {\n            headers.append('x-loose-count', 'true');\n          }\n          headers.append('x-total-count', 'true');\n        }\n        if (suppressToken !== true) {\n          if (token) {\n            if (isTempToken) {\n              headers.append('token', token);\n            } else {\n              headers.append('Authorization', 'Bearer ' + token);\n            }\n          } else if (this.session.token) {\n            headers.append('Authorization', 'Bearer ' + this.session.token);\n          }\n        }\n        return headers;\n      }\n    } catch (err) {}\n    return this.buildFetchHeadersFallback(withCount, token, contentType, isTempToken, suppressToken, looseCount);\n  }\n\n  private buildFetchHeadersFallback(withCount: boolean = false, token?: string, contentType?: string, isTempToken?: boolean, suppressToken?: boolean, looseCount?: boolean) {\n    let headers = {};\n    headers['Content-Type'] = [contentType || 'application/json'];\n    headers['Accept'] = ['application/json'];\n    headers['X-Application-Id'] = [this.coreConfig.getAppId()];\n    headers['Yoobic-Client-Version'] = [this.coreConfig.getAppVersion()];\n\n    if (withCount) {\n      if (looseCount) {\n        headers['x-loose-count'] = ['true'];\n      }\n      headers['x-total-count'] = ['true'];\n    }\n    if (suppressToken !== true) {\n      if (token) {\n        if (isTempToken) {\n          headers['token'] = [token];\n        } else {\n          headers['Authorization'] = ['Bearer ' + token];\n        }\n      } else if (this.session.token) {\n        headers['Authorization'] = ['Bearer ' + this.session.token];\n      }\n    }\n    return headers;\n  }\n\n  private updateToken(res: HttpResponse<any>) {\n    if (res && res.url && res.url.indexOf(this.config.serverUrl) >= 0 && res.headers && res.headers.get('authorization')) {\n      this.session.token = res.headers.get('authorization');\n    }\n  }\n\n  private slimbarStart() {\n    this.loadingBar.start();\n  }\n\n  private slimbarComplete() {\n    this.loadingBar.complete();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n@Injectable()\nexport class Algorithms {\n  constructor(private config: Config, private rq: Requestor) {}\n\n  process(imageUrl: string, algorithmId: string): Observable<any> {\n    let url = this.config.apiUrl + 'algorithm/process';\n    return this.rq.post(url, { image_url: imageUrl, algorithm_id: algorithmId }).pipe(\n      catchError(err => {\n        return throwError(err);\n      }),\n      map(retVal => {\n        return retVal && retVal.results ? retVal.results || {} : {};\n      })\n    );\n  }\n\n  processMultiple(imageUrls: Array<string>, algorithmId: string): Observable<any> {\n    let url = this.config.apiUrl + 'algorithm/process';\n    return this.rq.post(url, { image_url: imageUrls, algorithm_id: algorithmId }).pipe(\n      catchError(err => {\n        return throwError(err);\n      }),\n      map(retVal => {\n        return retVal && retVal.results ? retVal.results || {} : {};\n      })\n    );\n  }\n}\n","export const CACHE_KEYS = {\n  chart: 'chart',\n  missiondescriptions: 'missiondescriptions',\n  missiondatas: 'missiondatas',\n  missionhistory: 'missionhistory',\n  missionprogress: 'missionprogress',\n  missions: 'missions',\n  missionservices: 'missionservices',\n\n  addresses: 'addresses',\n  healthscore: 'healthscore',\n  database: 'database'\n};\n","import { Injectable } from '@angular/core';\n\nimport { IEntity, getUUID } from '@shared/stencil';\nimport { LocalForageService, PromiseService, Log } from '@shared/common';\n\nimport { CACHE_KEYS } from '../../interfaces/cache/cache.interface';\n\nimport { from } from 'rxjs';\nimport { keys } from 'lodash-es';\n\n@Injectable()\nexport class Cache {\n  public static OFFLINE_PREFIX = 'offline_';\n\n  constructor(protected localForage: LocalForageService, protected promise: PromiseService, protected log: Log) {}\n\n  add(cacheKey: string, entryKey: string, item: any) {\n    return this.localForage\n      .get(cacheKey)\n      .then((data: any) => {\n        data = data || {};\n        if (entryKey) {\n          data[entryKey] = item;\n        }\n        return this.localForage.set(cacheKey, data);\n      })\n      .then(() => item);\n  }\n\n  get(cacheKey: string, entryKey: string) {\n    return from(\n      this.localForage.get(cacheKey).then(data => {\n        data = data || {};\n        return data[entryKey] || {};\n      })\n    );\n  }\n\n  getAll(cacheKey: string) {\n    return this.localForage.get(cacheKey).then((data: any) => {\n      data = data || {};\n      let retVal = [];\n      keys(data).forEach(key => {\n        if (data[key]) {\n          retVal.push(data[key]);\n        }\n      });\n      return retVal;\n    });\n  }\n\n  remove(cacheKey: string, entryKey: string) {\n    return from(\n      this.localForage.get(cacheKey).then(data => {\n        data = data || {};\n        delete data[entryKey];\n        return this.localForage.set(cacheKey, data);\n      })\n    );\n  }\n\n  getDatabaseCacheKey(collectionName: string) {\n    return CACHE_KEYS.database + '.' + collectionName;\n  }\n\n  getDatabaseCollection<T = IEntity>(collectionName: string): Promise<Array<T>> {\n    let cacheKey = this.getDatabaseCacheKey(collectionName);\n    return this.localForage.get(cacheKey).then((data: Array<T>) => {\n      return data || [];\n    });\n  }\n\n  setDatabaseCollection<T = IEntity>(collectionName: string, items: Array<T>): Promise<Array<T>> {\n    let cacheKey = this.getDatabaseCacheKey(collectionName);\n    return this.localForage.set(cacheKey, items);\n  }\n\n  updateDatabaseCollection<T = IEntity>(collectionName: string, items: Array<T>, idField: string = '_id', deletedKeys?: Array<string>) {\n    let cacheKey = this.getDatabaseCacheKey(collectionName);\n    return this.localForage.get(cacheKey).then((data: Array<T>) => {\n      data = data || [];\n      if (items && items.length > 0) {\n        data = data.filter(d => items.findIndex(r => r[idField] === d[idField]) < 0);\n      }\n      data = [...data, ...items];\n      if (deletedKeys && deletedKeys.length > 0) {\n        data = data.filter(d => deletedKeys.findIndex(r => r[idField] === d[idField]) < 0);\n      }\n      this.log.log('Syncing Database - Syncing ' + collectionName + ' done : ' + data.length + ' entities locally');\n      return this.localForage.set(cacheKey, data);\n    });\n  }\n\n  clearDatabaseCollection(collectionName: string) {\n    let cacheKey = this.getDatabaseCacheKey(collectionName);\n    this.log.log('Syncing Database - Clearing ' + collectionName);\n    return this.localForage.remove(cacheKey);\n  }\n\n  upsertInDatabaseCollection<T = IEntity>(collectionName: string, entity: T, patch: boolean = false, idField: string = '_id') {\n    entity[idField] = entity[idField] || Cache.OFFLINE_PREFIX + getUUID();\n    return this.getByIdFromDatabaseCollection(collectionName, entity[idField]).then(retVal => {\n      if (retVal && patch) {\n        entity = { ...retVal, ...(entity as any) };\n      }\n      return this.updateDatabaseCollection(collectionName, [entity], idField).then(() => {\n        return entity;\n      });\n    });\n  }\n\n  removeFromDatabaseCollection<T = IEntity>(collectionName: string, id: string, idField: string = '_id') {\n    return this.getDatabaseCollection<T>(collectionName).then(data => {\n      data = data.filter(d => d[idField] !== id);\n      return this.setDatabaseCollection<T>(collectionName, data);\n    });\n  }\n\n  replaceFromDatabaseCollection<T = IEntity>(collectionName: string, id: string, newEntity: T, idField: string = '_id') {\n    return this.getDatabaseCollection<T>(collectionName).then(data => {\n      data = data.filter(d => d[idField] !== id);\n      data = [...data, newEntity];\n      return this.setDatabaseCollection<T>(collectionName, data);\n    });\n  }\n\n  getByIdFromDatabaseCollection<T = IEntity>(collectionName: string, id: string, idField: string = '_id') {\n    return this.getDatabaseCollection<T>(collectionName).then(data => {\n      let retVal = data.find(d => d[idField] === id);\n      return retVal;\n    });\n  }\n}\n","import { IFormField } from '@shared/stencil';\nimport { cloneDeep } from 'lodash-es';\n\nexport class IModel {\n  className: string;\n  collectionName: string;\n  searchableFields: Array<string>;\n  fields: Array<string>;\n  mappingFields: Map<number, string>;\n  appearance: Map<string, any>;\n  include: Array<string>;\n  searchSubquery: { collectionName: string; field: string; values: string };\n  feathersService?: string;\n  type: any;\n  isCustom?: boolean;\n  detailComponent?: string;\n  icon?: string;\n\n  private _formFields: Array<IFormField>;\n  public get formFields(): Array<IFormField> {\n    return cloneDeep(this._formFields);\n  }\n  public set formFields(f: Array<IFormField>) {\n    this._formFields = f;\n  }\n\n  constructor(className) {\n    this.className = className;\n    this.searchableFields = new Array<string>();\n    this.mappingFields = new Map<number, string>();\n    this._formFields = new Array<IFormField>();\n    this.appearance = new Map<string, any>();\n  }\n}\n","export const CONDITION_TYPES = ['field', 'tags', 'groups'];\nexport const CONDITION_ALL_OPERATORS = ['equals', 'notequals', 'in', 'notin', 'greaterthan', 'lessthan'];\nexport const SIMPLE_FIELD_TYPES = ['text', 'email', 'number', 'date', 'tel', 'time', 'range', 'starrating'];\nexport const WITH_VALUES_FIELD_TYPES = ['checkbox', 'toggle', 'select', 'selectmulti', 'selectbuttons', 'selectbuttonsmulti', 'autocomplete'];\n\nexport interface ICondition {\n  _id?: string;\n  type?: string;\n  operator?: string;\n  title?: string;\n  field?: any;\n  tags?: Array<string>;\n  group?: Array<string>;\n  values?: Array<any>;\n  value?: any;\n  key?: string;\n}\n\nexport const ROLES = [\n  'dashboard',\n  'admin',\n  'manager',\n  'team',\n  'teamplus',\n  'creator',\n  'service',\n  'supervisor',\n  'quora',\n  'kiosk',\n  'score',\n  'nochat',\n  'anonymous',\n  'stat',\n  'todo',\n  'serviceuser',\n  'polluser',\n  'newsuser',\n  'newscreator',\n  'documentsuser',\n  'calendaruser',\n  'store',\n  'clientadmin',\n  'missionanalysis',\n  'missionviewer',\n  'followup',\n  'followupnouser',\n  'profilenoedit',\n  'workplace',\n  'trial',\n  'videocall',\n  'academy',\n  'pharmaone',\n  'instagram',\n  'taskuser',\n  'taskcreator',\n  'bi',\n  'storeinsights',\n  'healthscore',\n  'visit',\n  'imagereco',\n  'productbatch',\n  'taskassign',\n  'scandit'\n];\n\nexport const ROLES_ASK = ['manager', 'creator', 'quora', 'academy', 'academyplus'];\n\nexport const ROLES_CONDITIONS = {\n  isAdmin: { type: 'roles', operator: 'in', group: ['admin'] },\n  isClientAdmin: { type: 'roles', operator: 'in', group: ['clientadmin'] },\n  isAdminOrClientAdmin: { type: 'roles', operator: 'in', group: ['admin', 'clientadmin'] },\n  isNotAdmin: { type: 'roles', operator: 'nin', group: ['admin'] },\n  isNeitherAdminNorClientAdmin: { type: 'roles', operator: 'nin', group: ['admin', 'clientadmin'] },\n  isManager: { type: 'roles', operator: 'in', group: ['manager'] },\n  isNotManager: { type: 'roles', operator: 'nin', group: ['manager', 'admin'] },\n  isTeam: { type: 'roles', operator: 'in', group: ['team'] },\n  isWorkplace: { type: 'roles', operator: 'in', group: ['admin', 'workplace'] },\n  hasTodoOrScore: { type: 'roles', operator: 'in', group: ['todo', 'score'] },\n  hasTodo: { type: 'roles', operator: 'in', group: ['todo'] },\n  hasScore: { type: 'roles', operator: 'in', group: ['score'] },\n  hasService: { type: 'roles', operator: 'in', group: ['admin', 'service'] },\n  hasProductBatch: { type: 'roles', operator: 'in', group: ['admin', 'productbatch'] },\n  hasMemoAssign: { type: 'roles', operator: 'in', group: ['admin', 'taskassign'] }\n};\n","import { Injectable, Type } from '@angular/core';\nimport { isPresent, dateFormat, dateAdd, Filters, FilterField, FilterOperator, SubQuery, IFormField, MOBILE_FORM_FIELDS_ALL, FormFieldType, isImageFile, isNumberField, isBooleanField, isPhotoField, isMultiPhotosField, isPhotoOrMultiPhotosField, isVideoField, isDateTimeField, isIntervalField, isMultipleField, isColoredField } from '@shared/stencil';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { IModel } from '../../interfaces/model/model.interface';\nimport { ROLES_CONDITIONS } from '../../interfaces/condition/icondition.interface';\n\nimport { cloneDeep, compact, uniq, union, isArray, isObject, isString, map, pull, assign, isEmpty, get, findIndex } from 'lodash-es';\n\n/** @name Models\n * @angularType service\n * @description A powerful service which gets the model for a collection or class. The model could include form fields, searchable fields and mapping fields which are useful for generating forms or filters related to the collection or class.\n */\n@Injectable()\nexport class Models {\n  private static _models = new Map<string, IModel>();\n\n  public static addSearchableField(className: string, fieldName: string) {\n    let model = this.createOrGetModel(className);\n    model.searchableFields.push(fieldName);\n    this.updateModel(className, model);\n  }\n\n  public static addMappingField(className: string, fieldName: string, order: number) {\n    let model = this.createOrGetModel(className);\n    model.mappingFields.set(order, fieldName);\n    this.updateModel(className, model);\n  }\n\n  public static addAppearance(className: string, entityListItemProperty: string, appearance: any) {\n    let model = this.createOrGetModel(className);\n    model.appearance.set(entityListItemProperty, appearance);\n    this.updateModel(className, model);\n  }\n\n  public static addFormField(className: string, field: IFormField) {\n    let model = this.createOrGetModel(className);\n    let formFields = model.formFields;\n    formFields = formFields.filter(f => f.name !== field.name);\n    formFields.push(field);\n    model.formFields = formFields;\n    this.updateModel(className, model);\n  }\n\n  public static addBaseModel(className: string, baseClassName: string, target) {\n    let model = this.createOrGetModel(className);\n    let base = this.createOrGetModel(baseClassName);\n    let formFields = model.formFields || [];\n\n    let baseFields = [];\n    if (base.formFields) {\n      base.formFields.map(field => {\n        if (formFields.findIndex(f => f.name === field.name) < 0) {\n          baseFields.push(cloneDeep(field));\n        }\n      });\n    }\n\n    model.formFields = compact(union(baseFields, formFields));\n    model.searchableFields = uniq(union(cloneDeep(base.searchableFields), model.searchableFields));\n    model.type = target;\n    this.updateModel(className, model);\n  }\n\n  public static setCollectionName(className: string, collectionName: string, fields: any, include: any, searchSubquery: any, feathersService: string, target: any, isCustom?: boolean, detailComponent?: string, icon?: string) {\n    let model = this.createOrGetModel(className);\n    model.collectionName = collectionName;\n    model.fields = fields;\n    model.include = include;\n    model.searchSubquery = searchSubquery;\n    model.type = target;\n    model.feathersService = feathersService;\n    model.isCustom = isCustom;\n    model.detailComponent = detailComponent;\n    model.icon = icon;\n    if (model.collectionName && model.collectionName !== 'tenants') {\n      model.include = model.include || [];\n      if (model.include.indexOf('_tenant') < 0) {\n        model.include.push('_tenant');\n      }\n      if (model.fields && model.fields.length > 1) {\n        model.fields.push('_tenant.name');\n        model.fields.push('_tenant.title');\n        model.fields.push('_tenant.icon');\n      }\n    }\n    this.updateModel(className, model);\n  }\n\n  public static clearCollectionName(className: string) {\n    Models._models.delete(className);\n  }\n\n  public static getModel(className: string | Type<any>): IModel {\n    let retVal;\n    if (isString(className) === true) {\n      retVal = this.createOrGetModel(<string>className);\n    } else {\n      Models._models.forEach(m => {\n        if (m.type && m.type === className) {\n          retVal = m;\n        }\n      });\n    }\n    return retVal;\n  }\n\n  public static getModelByCollectionName(collectionName: string): IModel {\n    let model;\n    Models._models.forEach(m => {\n      if (m.collectionName === collectionName) {\n        model = m;\n      }\n    });\n    if (!model && collectionName && collectionName.endsWith('_store')) {\n      let name = collectionName.replace('_store', '');\n      if (name === 'missiondescription') {\n        name += 's';\n      }\n      return Models.getModelByCollectionName(name);\n    }\n    return model;\n  }\n\n  public static getFilterableFields(collectionName: string, advancedFiltersFields?: Array<IFormField>, campaignFields?: Array<IFormField>, isAdmin: boolean = false) {\n    let fields: Array<IFormField> = [];\n    let model = Models.getModelByCollectionName(collectionName);\n    if (model && model.formFields) {\n      fields = cloneDeep(model.formFields);\n    }\n\n    if (model && model.isCustom && fields) {\n      fields.forEach(f => {\n        f.filterable = f.searchable;\n        f.sortable = f.type === FormFieldType.date || f.type === FormFieldType.datetime || f.type === FormFieldType.number;\n        if (f.type === FormFieldType.location) {\n          f.filterName = f.name + 'Ref';\n        }\n      });\n    }\n\n    if (advancedFiltersFields && advancedFiltersFields.length > 0) {\n      advancedFiltersFields.forEach(af => {\n        let index = findIndex(fields, f => f.name === af.name);\n        if (index < 0) {\n          fields.push(af);\n        } else {\n          fields[index] = { ...fields[index], ...af };\n        }\n      });\n    }\n\n    if (campaignFields) {\n      campaignFields = cloneDeep(campaignFields);\n      campaignFields.forEach(c => {\n        c.name += '.value';\n        c.filterable = true;\n        //c.sortable = true;\n      });\n      fields = fields.concat(campaignFields);\n    }\n\n    let tenantIndex = findIndex(fields, f => f.name === '_tenant');\n    if (tenantIndex >= 0 && !isAdmin) {\n      fields[tenantIndex].filterable = false;\n    }\n    let finalFields: Array<IFormField> = [];\n    fields.forEach(f => {\n      finalFields.push(f);\n      if (f.collectionName && f.collectionName !== collectionName && f.filterable === true && f.showSubQueryFilters === true) {\n        Models.getModelByCollectionName(f.collectionName).formFields.forEach(subfield => {\n          subfield = cloneDeep(subfield);\n          delete subfield.advanced;\n          subfield.filterable = true;\n          subfield.icon = 'yo-tag';\n          //this is used in the chanel collection where we want to override the subQuery defined in the user interface\n          //this even allow us to filter on any subfield of a user to look for channel\n          if (f.subQuery) {\n            subfield.subQuery = subfield.subQuery || f.subQuery;\n            if (!subfield.sessionValues) {\n              subfield.collectionName = subfield.collectionName || f.collectionName;\n            }\n          }\n          if (subfield.subQuery) {\n            if (f.subQueryOverride) {\n              subfield.subQuery = f.subQueryOverride;\n            }\n            subfield.isSubQuery = true;\n            subfield.name = subfield.collectionName + '_' + subfield.name;\n            finalFields.push(subfield);\n          }\n        });\n      }\n    });\n    return finalFields;\n  }\n\n  public static getFieldName(field: IFormField) {\n    let fieldName = field.name + (field.columnDefinition && field.columnDefinition.name ? '.' + field.columnDefinition.name : '');\n    if (field.columnDefinition && field.columnDefinition.forceName) {\n      fieldName = field.columnDefinition.name;\n    }\n    return fieldName;\n  }\n\n  public static getFieldTitle(field: IFormField, translate: any) {\n    let fieldTitle = field.title || field.name;\n    fieldTitle = translate.polyglot(fieldTitle);\n    return fieldTitle;\n  }\n\n  public static isBooleanField(field: IFormField) {\n    return isBooleanField(field);\n  }\n\n  public static isNumberField(field: IFormField) {\n    return isNumberField(field);\n  }\n\n  public static isPhotoField(field: IFormField) {\n    return isPhotoField(field);\n  }\n\n  public static isMultiPhotosField(field: IFormField) {\n    return isMultiPhotosField(field);\n  }\n\n  public static isPhotoOrMultiPhotosField(field: IFormField) {\n    return isPhotoOrMultiPhotosField(field);\n  }\n\n  public static isVideoField(field: IFormField) {\n    return isVideoField(field);\n  }\n\n  public static isDateTimeField(field: IFormField) {\n    return isDateTimeField(field);\n  }\n\n  public static isIntervalField(field: IFormField) {\n    return isIntervalField(field);\n  }\n\n  public static isChartableAutoFieldNoPhoto(field: IFormField) {\n    return Models.isChartableAutoField(field, false);\n  }\n\n  public static isChartableAutoField(field: IFormField, includePhoto = true) {\n    switch (field.type) {\n      case FormFieldType.checkbox:\n      case FormFieldType.toggle:\n\n      case FormFieldType.select:\n      case FormFieldType.selectmulti:\n      case FormFieldType.selectbuttons:\n      case FormFieldType.selectbuttonsmulti:\n      case FormFieldType.starrating:\n      case FormFieldType.number:\n      case FormFieldType.range:\n      case FormFieldType.ranking:\n      case FormFieldType.formula:\n        return true;\n      case FormFieldType.photo:\n      case FormFieldType.multiphotos:\n        return includePhoto;\n\n      case FormFieldType.autocomplete:\n        return !field.collectionName || Models.getModel(field.collectionName).isCustom !== true;\n    }\n    return false;\n  }\n\n  public static isMultipleField(field: IFormField) {\n    return isMultipleField(field);\n  }\n\n  public static isColoredField(field: IFormField) {\n    return isColoredField(field);\n  }\n\n  public static getFieldOperator(field: IFormField): Array<FilterOperator> {\n    if (field.type === 'fieldselector') {\n      return [{ title: 'in', _id: 'inq' }];\n    } else if (Models.isBooleanField(field)) {\n      return [{ title: 'equals', _id: 'eq' }, { title: 'notequals', _id: 'neq' }];\n    } else if (Models.isPhotoField(field)) {\n      return [{ title: 'exists', _id: 'exists' }];\n    } else if (Models.isIntervalField(field) || Models.isDateTimeField(field)) {\n      return [{ title: 'greaterthan', _id: 'gte', interval: true }, { title: 'between', _id: 'between', interval: true }, { title: 'lessthan', _id: 'lte', interval: true }, { title: 'equals', _id: 'eq', interval: true }];\n    } else if (field.type === FormFieldType.autocomplete || field.type === FormFieldType.location) {\n      return [{ title: 'in', _id: 'inq' }, { title: 'notin', _id: 'nin' }, { title: 'all', _id: 'all' }];\n    } else {\n      return [{ title: 'like', _id: 'like' }, { title: 'notlike', _id: 'nlike' }, { title: 'equals', _id: 'eq' }, { title: 'notequals', _id: 'neq' }];\n    }\n  }\n\n  // public static getFormFieldFromMobileField(type) {\n  //     switch (type) {\n  //         case FormFieldType.photo:\n  //         case FormFieldType.signature:\n  //         case FormFieldType.image:\n  //         case FormFieldType.barcode:\n  //         case FormFieldType.video:\n  //         case FormFieldType.audio:\n  //         case FormFieldType.document:\n  //             return FormFieldType.photo;\n  //         case FormFieldType.date:\n  //             return FormFieldType.date;\n  //         default:\n  //             return FormFieldType[type] || FormFieldType.text;\n  //     }\n  // }\n\n  public static getMobileFieldIcon(type: string) {\n    let fields = [].concat(MOBILE_FORM_FIELDS_ALL).filter(field => field.type === type);\n    if (fields && fields.length > 0) {\n      return fields[0].icon;\n    }\n    return '';\n  }\n\n  public static exportWhere(collectionName: string, filters?: Filters, excludedFields = []) {\n    let retVal = filters.map(fs => {\n      let simplifiedFilters = [];\n      fs.forEach(f => {\n        if ((!f.subQuery || f.collectionName === collectionName) && (!excludedFields || excludedFields.indexOf(f.field) < 0)) {\n          //&& !f.isFieldSelector\n          let filter = Models.exportFilterField(f);\n          if (filter && !isEmpty(filter)) {\n            simplifiedFilters.push(filter);\n          }\n        }\n      });\n      if (simplifiedFilters.length === 0) {\n        return null;\n      } else if (simplifiedFilters.length === 1) {\n        return simplifiedFilters[0];\n      } else {\n        return { and: simplifiedFilters };\n      }\n    });\n\n    if (retVal) {\n      pull(retVal, null);\n    }\n\n    if (retVal && retVal.length === 1) {\n      return retVal[0];\n    } else if (retVal && retVal.length > 0) {\n      return { or: retVal };\n    }\n    return null;\n  }\n\n  public static exportSubQuery(collectionName: string, filters?: Filters | Object, isAggregationQuery?: boolean): SubQuery | Array<SubQuery> {\n    let retVal: Array<SubQuery> = [];\n    if (filters && isArray(filters) && (<Filters>filters).length > 0) {\n      (<Filters>filters).forEach(fs => {\n        fs.forEach(f => {\n          if (f.subQuery && f.collectionName !== collectionName) {\n            retVal.push({\n              collectionName: this.fixCollectionName(f.collectionName, isAggregationQuery),\n              where: Models.exportFilterField(f),\n              field: f.subQuery.field,\n              values: f.subQuery.values,\n              leftJoin: f.subQuery.leftJoin\n            });\n          }\n        });\n      });\n    }\n    return retVal.length === 1 ? retVal[0] : retVal.length > 1 ? retVal : null;\n  }\n\n  public static exportSearch(collectionName: string, search: string): any {\n    if (search && search.match && search.match(/^[0-9a-fA-F]{24}$/)) {\n      return { _id: search };\n    } else {\n      let retVal = Models.getModelByCollectionName(collectionName).searchableFields.map(field => {\n        let filter = {};\n        if (field === '_id' && collectionName !== 'groups') {\n          filter[field] = search;\n        } else {\n          filter[field] = { like: search, options: 'i' };\n        }\n        return filter;\n      });\n      if (retVal.length === 1) {\n        return retVal[0];\n      } else if (retVal.length > 0) {\n        return { or: retVal };\n      }\n      return null;\n    }\n  }\n\n  public static fixCollectionName(collectionName: string, isAggregationQuery?: boolean) {\n    switch (collectionName) {\n      case 'missiondescriptions':\n        return isAggregationQuery ? 'missiondescription' : collectionName;\n      case 'groups':\n        return isAggregationQuery ? 'group' : collectionName;\n      case 'feedsComments':\n        return isAggregationQuery ? 'feedsComment' : collectionName;\n      case 'users':\n        return 'user';\n      default:\n        return collectionName;\n    }\n  }\n\n  public static getPublicCollectionName(collectionName: string) {\n    switch (collectionName) {\n      case 'locations':\n        return 'stores';\n      case 'user':\n      case 'users':\n        return 'users';\n      case 'locationtypes':\n        return 'store-types';\n      case 'missiondescriptions':\n        return 'campaigns';\n      case 'feeds':\n        return 'news';\n      default:\n        return collectionName;\n    }\n  }\n\n  public static getPhotoFromParams(params) {\n    if (params && params.node && params.node.data) {\n      let row = params.node.data.toJS ? params.node.data.toJS() : params.node.data;\n      let f = params.colDef.field.replace('.value', '');\n      let photo = Models.extractPhoto(row[f], row, {}, f);\n      return photo;\n    }\n    return null;\n  }\n\n  // get photos for multiphoto component\n  public static getPhotosFromParams(params) {\n    if (params && params.node && params.node.data) {\n      let row = params.node.data.toJS ? params.node.data.toJS() : params.node.data;\n      let f = params.colDef.field.replace('.value', ''); // field name\n      let photos = [];\n      if (row && f && row[f] && row[f].value && isArray(row[f].value)) {\n        row[f].value.forEach((v, multiIndex) => {\n          photos.push(Models.extractPhoto(v, row, {}, f, FormFieldType.multiphotos, null, multiIndex));\n        });\n      }\n      return photos;\n    }\n    return null;\n  }\n\n  public static getEmptyUrl(collectionName: string) {\n    switch (collectionName) {\n      case 'dashboards':\n      case 'dashboard':\n        return 'dashboard.svg';\n\n      case 'missions':\n      case 'mission':\n        return 'mission.svg';\n\n      case 'missiondescriptions':\n      case 'missiondescription':\n      case 'campaign':\n        return 'campaign.svg';\n\n      case 'photos':\n      case 'photo':\n        return 'photo.svg';\n\n      case 'feeds':\n      case 'feed':\n        return 'feed.svg';\n\n      case 'files':\n      case 'file':\n        return 'file.svg';\n\n      case 'locations':\n      case 'location':\n        return 'location.svg';\n\n      case 'notes':\n      case 'note':\n        return 'note.svg';\n\n      case 'users':\n      case 'user':\n        return 'user.svg';\n    }\n    return 'empty.svg';\n  }\n\n  public static extractPhoto(data, missiondata, field, name, type?: string, hideUser: boolean = false, multiIndex?: number) {\n    let photo: any = {};\n    if (data || (field && field.type === 'image' && field.image && field.image._downloadURL)) {\n      if (data && data.value && ((data.value.indexOf && data.value.indexOf('http') === 0) || isImageFile(data.value)) && (!type || !data.fieldType || data.fieldType === type)) {\n        photo = {\n          value: data.value,\n          comments: data.comments,\n          tags: data.tags,\n          flagged: data.flagged,\n          edit: data.edit,\n          stitch: data.stitch,\n          editBy: data.editBy,\n          editWidth: data.editWidth,\n          editHeight: data.editHeight,\n          texts: data.texts,\n          svgData: data.svgData\n        };\n      } else if (data && ((data.indexOf && data.indexOf('http') === 0) || isImageFile(data))) {\n        if (type && type === FormFieldType.multiphotos) {\n          let fieldData = get(missiondata, field.name || name);\n          let extraData = fieldData && (<any>fieldData).extraData ? (<any>fieldData).extraData : {};\n          photo = {\n            value: data,\n            tags: extraData[multiIndex] ? extraData[multiIndex].tags : null,\n            flagged: extraData[multiIndex] ? extraData[multiIndex].flagged : null,\n            edit: extraData[multiIndex] ? extraData[multiIndex].edit : null,\n            stitch: extraData[multiIndex] ? extraData[multiIndex].stitch : null,\n            editBy: extraData[multiIndex] ? extraData[multiIndex].editBy : null,\n            editWidth: extraData[multiIndex] ? extraData[multiIndex].editWidth : null,\n            editHeight: extraData[multiIndex] ? extraData[multiIndex].editHeight : null,\n            texts: extraData[multiIndex] ? extraData[multiIndex].texts : [],\n            svgData: extraData[multiIndex] ? extraData[multiIndex].svgData : null,\n            isMulti: true\n          };\n        } else {\n          photo = { value: data };\n        }\n      } else if (field && field.type === 'image' && field.image && field.image._downloadURL) {\n        photo = {\n          name: field.name || name,\n          title: field.title,\n          value: field.image._downloadURL,\n          isImage: true\n        };\n      }\n      if (!isEmpty(photo)) {\n        if (!field || field.type !== 'image') {\n          assign(photo, {\n            title: field.title,\n            name: field.name || name,\n            multiIndex: multiIndex,\n            _id: missiondata._id + ' _' + (field.name || name),\n            missiondescriptionRef: missiondata.missiondescriptionRef,\n            missiondescription: missiondata.missiondescription,\n            missiondata: missiondata,\n            missiondataRef: missiondata._id,\n            mission: missiondata.mission,\n            missionRef: missiondata.missionRef,\n            userRef: missiondata.userRef,\n            userDisplayname: hideUser ? '' : missiondata.userDisplayname,\n            address: missiondata.address,\n            location: missiondata.location,\n            validated: missiondata.validated,\n            _acl: missiondata._acl\n          });\n        }\n\n        if (field.isImageRecognition && photo.stitch) {\n          photo.value = photo.stitch;\n        }\n        return photo;\n      }\n    }\n    return null;\n  }\n\n  /*\n       Return the transform to extract the fields from a mission description\n   */\n  public static getFieldTransform(types: Array<string> = []) {\n    function getFieldTransformInternal(res: ResponseObject) {\n      if (res.data && res.data.forEach) {\n        let fields = [];\n        res.data.forEach((missiondescription: any) => {\n          let missionFields = Models.getFields(missiondescription, types);\n          missionFields = missionFields.map((field: IFormField) => {\n            return assign(field, {\n              _id: field.name,\n              name: field.name + '.value',\n              operators: Models.getFieldOperator(field),\n              slideTitle: missiondescription.title\n            });\n          });\n          fields = fields.concat(missionFields);\n        });\n        res.data = fields;\n      }\n      return res;\n    }\n\n    return getFieldTransformInternal;\n  }\n\n  /*\n        Return the list of slide items fields from a mission description (mobile type)\n    */\n  public static getFields(missiondescription: any, types: Array<string> = [], excludedTypes: Array<string> = []) {\n    return Models.getFieldsFromSlides(missiondescription.slides, types, excludedTypes);\n  }\n\n  /*\n        Return the list of slide items fields from an array of slides (mobile type)\n    */\n  public static getFieldsFromSlides(slides: Array<any>, types: Array<string> = [], excludedTypes: Array<string> = []) {\n    let fields: Array<IFormField> = [];\n    if (slides) {\n      slides.forEach((slide, index) => {\n        if (slide.items) {\n          slide.items.forEach(item => {\n            item.slideTitle = slide.title;\n            if (!types || types.length === 0 || types.indexOf(item.type) >= 0) {\n              if (!excludedTypes || excludedTypes.length === 0 || excludedTypes.indexOf(item.type) < 0) {\n                item.slideIndex = index;\n                fields.push(item);\n              }\n            }\n          });\n        }\n      });\n    }\n    return fields;\n  }\n\n  private static exportFilterField(f: FilterField) {\n    let filter = {};\n    if (isArray(f.value) && f.value.length === 0) {\n      return filter;\n    }\n\n    if (f.handleUndefined && isPresent(f.value) && isArray(f.value)) {\n      if (f.value.indexOf(undefined) < 0 && f.value.indexOf('undefined') < 0) {\n        filter[f.field] = {};\n        filter[f.field][f.operator._id] = f.value;\n      } else {\n        let def = filter;\n        def[f.field] = {};\n        def[f.field][f.operator._id] = map(f.value, v => {\n          return v === undefined || v === 'undefined' ? null : v;\n        });\n      }\n    } else {\n      filter[f.field] = {};\n      if (f.type === FormFieldType.address && f.value && (isArray(f.value) || isArray(f.value._geoloc))) {\n        filter[f.field] = {\n          nearSphere: {\n            $geometry: {\n              type: 'Point',\n              coordinates: f.value && f.value._geoloc ? f.value._geoloc : f.value\n            },\n            $maxDistance: f.radius * 1000 || 40000\n          }\n        };\n      } else if (f.operator._id === 'nearSphere' && f.value && (isArray(f.value) || isArray(f.value._geoloc))) {\n        filter[f.field] = {\n          nearSphere: {\n            $geometry: {\n              type: 'Point',\n              coordinates: f.value && f.value._geoloc ? f.value._geoloc : f.value\n            },\n            $maxDistance: f.max || 40000\n          }\n        };\n      } else if (f.type === FormFieldType.date && f.operator._id === 'eq') {\n        filter[f.field]['between'] = [f.value, dateFormat(dateAdd(f.value, 'days', 1), 'YYYY-MM-dd')];\n      } else if (isPresent(f.value)) {\n        let value = isArray(f.value) && isObject(f.value[0]) ? map(f.value, '_id') : isArray(f.value) ? f.value : isObject(f.value) ? f.value._id : f.value;\n        if (f.operator && f.operator._id === 'eq') {\n          filter[f.field] = value;\n          // } else if (f.operator && f.operator._id === 'between' && isArray(f.value) && f.value.length > 1) {\n          //     filter[f.field] = { 'gte': f.value[0], 'lt': f.value[1] };\n        } else {\n          filter[f.field][f.operator._id] = value;\n        }\n      }\n      if (f.operator && (f.operator._id === 'like' || f.operator._id === 'nlike')) {\n        filter[f.field].options = 'i';\n      }\n    }\n    return filter;\n  }\n\n  private static createOrGetModel(className: string, override?: boolean): IModel {\n    Models._models = Models._models || new Map<string, IModel>();\n    if (Models._models.has(className) && override !== true) {\n      return Models._models.get(className);\n    } else {\n      let model = new IModel(className);\n      Models._models.set(className, model);\n      return model;\n    }\n  }\n\n  private static updateModel(className: string, model: IModel) {\n    let formFields = model.formFields || [];\n    if (formFields.findIndex(f => f.name === '_tenant') < 0 && model.collectionName && model.collectionName !== 'tenants') {\n      formFields.push({\n        required: true,\n        name: '_tenant',\n        title: 'TENANT',\n        type: FormFieldType.autocomplete,\n        condition: [ROLES_CONDITIONS.isAdmin],\n        collectionName: 'tenants',\n        multiple: false,\n        columnDefinition: { name: 'name' },\n        suppressExport: true,\n        visible: false\n      });\n    }\n    model.formFields = formFields;\n    Models._models.set(className, model);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Session } from '../session/session.service';\nimport { GeoLocation, Position } from '@shared/common';\n\n@Injectable()\nexport class Smartloc {\n  constructor(private session: Session, private geoLoc: GeoLocation, private config: Config, private rq: Requestor) {}\n\n  get defaultPosition() {\n    return this.geoLoc.defaultPosition;\n  }\n\n  getLocation(forceRefresh = false): Promise<Position> {\n    if (this.hasRole('store') && !this.hasRole('admin')) {\n      let promise;\n      if (this.session.user && this.session.user.location && this.session.user.location._geoloc) {\n        promise = Promise.resolve(this.session.user.location);\n      } else if (this.session.user && this.session.user.locationRef) {\n        promise = this.getLocationEntity(this.session.user.locationRef); //, ['_id', 'title', '_geoloc', 'address']\n      } else if (this.session.user && this.session.user.address && this.session.user.address._geoloc) {\n        promise = Promise.resolve(this.session.user.address);\n      }\n      if (promise) {\n        return promise.then(loc => {\n          if (loc && loc._geoloc && loc._geoloc.length > 1) {\n            this.session.user.location = loc;\n            let position = new Position({ latitude: loc._geoloc[1], longitude: loc._geoloc[0] });\n            return position;\n          }\n          return null;\n        });\n      }\n    }\n    return this.geoLoc.getLocation(forceRefresh);\n  }\n\n  getDistance(lat1: number, lon1: number, lat2: number, lon2: number, unit = 'K') {\n    return this.geoLoc.getDistance(lat1, lon1, lat2, lon2, unit);\n  }\n\n  getLocationEntity(id) {\n    let url = this.config.apiUrl + 'locations' + '/' + id;\n    return this.rq.get(url).toPromise();\n  }\n\n  hasRole(role: string) {\n    return this.session.roles && this.session.roles.indexOf(role) >= 0;\n  }\n}\n","/* tslint:disable:variable-name */\nimport { Injectable, Injector } from '@angular/core';\n\nimport { Position, Network } from '@shared/common';\nimport { Translate } from '@shared/translate';\n\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Cache } from '../cache/cache.service';\nimport { Smartloc } from '../smartloc/smartloc.service';\nimport { CACHE_KEYS } from '../../interfaces/cache/cache.interface';\n\nimport { IAutocompleteInput, IAutocompletePrediction, IAutocompleteResponse, IBounds, IGeocodeInput, IGeocodeResult, IGeocodeResponse, INearbySearchInput, INearbySearchResponse, IReverseGeocodeInput, IReverseGeocodeResponse, IResolvedAddressLocationInput, IResolvedAddressLocationResult } from '../../interfaces/googlemaps/googlemaps.interface';\n\nimport { concatMap, map } from 'rxjs/operators';\nimport { Observable, from, combineLatest } from 'rxjs';\nimport { isString, uniqBy } from 'lodash-es';\n\nfunction normalizeBounds(b: string | IBounds): string {\n  return b ? (typeof b === 'string' ? b : b.southwest.lat + ',' + b.southwest.lng + '|' + b.northeast.lat + ',' + b.northeast.lng) : '';\n}\n\nfunction normalizeLocation(p: string | Position): string {\n  return p ? (typeof p === 'string' ? p : p.toStringLoc()) : '';\n}\n\nfunction pipeJoin(p: string | string[]): string {\n  return p ? (typeof p === 'string' ? p : p.join('|')) : '';\n}\n\nfunction normalizeObservable<T>(o: Observable<T> | Promise<T> | T): Observable<T> {\n  return o instanceof Observable ? o : from(Promise.resolve(o));\n}\n\n@Injectable()\nexport class Googlemaps {\n  private translate: Translate;\n  constructor(private rq: Requestor, private geo: Smartloc, private config: Config, protected injector: Injector, protected network: Network, protected cache: Cache) {\n    this.translate = this.injector.get<Translate>(Translate);\n  }\n\n  public autocompleteFromSync(input: string, location: string | Position, offset: number = input.length, radius = 100000, language: string = this.translate.getCurrentLanguage(), types?: string, components?: string, query = false): Observable<IAutocompletePrediction[]> {\n    return this._autocomplete(\n      {\n        input,\n        offset,\n        location: normalizeLocation(location),\n        radius,\n        language,\n        types,\n        components\n      },\n      query\n    );\n  }\n\n  public autocompleteLocationObserver(input: string, offset: number = input.length, location: Observable<string | Position> | Promise<string | Position> | string | Position = from(this.geo.getLocation().then(pos => pos.toStringLoc())), radius = 1000, language: string = this.translate.getCurrentLanguage(), types?: string, components?: string, query = false): Observable<IAutocompletePrediction[]> {\n    return normalizeObservable(location).pipe(\n      map(\n        (loc): IAutocompleteInput => {\n          return {\n            input,\n            offset,\n            location: normalizeLocation(loc),\n            radius,\n            language,\n            types,\n            components\n          };\n        }\n      ),\n      concatMap(i => this._autocomplete(i, query))\n    );\n  }\n\n  public autocompleteMultiObserver(inputO: Observable<string>, offsetO: Observable<number> = inputO.pipe(map(s => s.length)), locationO: Observable<string | Position> = from(this.geo.getLocation().then(pos => pos.toStringLoc())), radius = 1000, language: string = this.translate.getCurrentLanguage(), types?: string, components?: string, query = false): Observable<IAutocompletePrediction[]> {\n    return combineLatest(inputO, offsetO, locationO).pipe(concatMap((i: any) => this._autocomplete(i, query)));\n  }\n\n  public nearbySearchFromSync(location: string | Position, radius = 1000, keyword?: string, language: string = this.translate.getCurrentLanguage(), name?: string | string[], minprice?: number, maxprice?: number, opennow?: boolean, rankby?: string, type?: string, types?: string | string[]): Observable<INearbySearchResponse> {\n    return this._nearbySearch({\n      location: normalizeLocation(location),\n      radius,\n      keyword,\n      language,\n      name: pipeJoin(name),\n      minprice,\n      maxprice,\n      opennow,\n      rankby,\n      type,\n      types: pipeJoin(types)\n    });\n  }\n\n  public nearbySearchNextResults(next_page_token: string): Observable<INearbySearchResponse> {\n    return this._nextSearchResults(next_page_token);\n  }\n\n  public nearbySearchLocationObserver(location: Observable<string | Position> | Promise<string | Position> | string | Position = from(this.geo.getLocation().then(pos => pos.toStringLoc())), radius = 1000, keyword?: string, language: string = this.translate.getCurrentLanguage(), name?: string | string[], minprice?: number, maxprice?: number, opennow?: boolean, rankby?: string, type?: string, types?: string | string[]): Observable<INearbySearchResponse> {\n    return normalizeObservable(location).pipe(\n      map(\n        (loc): INearbySearchInput => {\n          return {\n            location: normalizeLocation(loc),\n            radius,\n            keyword,\n            language,\n            name: pipeJoin(name),\n            minprice,\n            maxprice,\n            opennow,\n            rankby,\n            type,\n            types: pipeJoin(types)\n          };\n        }\n      ),\n      concatMap(input => this._nearbySearch(input))\n    );\n  }\n\n  public nearbySearchMultiObserver(locationO: Observable<string | Position> = from(this.geo.getLocation().then(pos => pos.toStringLoc())), keywordO?: Observable<string>, radius = 1000, language: string = this.translate.getCurrentLanguage(), nameO?: Observable<string | string[]>, minprice?: number, maxprice?: number, opennow?: boolean, rankby?: string, type?: string, types?: string | string[]): Observable<INearbySearchResponse> {\n    return combineLatest(keywordO, nameO, locationO).pipe(concatMap((i: any) => this._nearbySearch(i)));\n  }\n\n  public geocodeFromSync(address?: string, components?: string | string[], bounds?: string | IBounds, language: string = this.translate.getCurrentLanguage(), region?: string): Observable<IGeocodeResult[]> {\n    return this._geocode({\n      address,\n      components: pipeJoin(components),\n      bounds: normalizeBounds(bounds),\n      language,\n      region\n    });\n  }\n\n  public geocodeAddressObserver(address: Observable<string>, components?: string | string[], bounds?: string | IBounds, language: string = this.translate.getCurrentLanguage(), region?: string): Observable<IGeocodeResult[]> {\n    return address.pipe(\n      map(\n        (addr): IGeocodeInput => {\n          return {\n            address: addr,\n            components: pipeJoin(components),\n            bounds: normalizeBounds(bounds),\n            language,\n            region\n          };\n        }\n      ),\n      concatMap(i => this._geocode(i))\n    );\n  }\n\n  public reverseGeocodeFromSyncLocation(latlng: string | Position, language: string = this.translate.getCurrentLanguage(), result_type?: string, location_type?: string): Observable<IGeocodeResult[]> {\n    return this._reverseGeocode({\n      latlng: normalizeLocation(latlng),\n      language,\n      result_type,\n      location_type\n    });\n  }\n\n  public reverseGeocodeLatLngObserver(latlng: Observable<string | Position> | Promise<string | Position> | string | Position = from(this.geo.getLocation().then(pos => pos.toStringLoc())), language: string = this.translate.getCurrentLanguage(), result_type?: string, location_type?: string): Observable<IGeocodeResult[]> {\n    return normalizeObservable(latlng).pipe(\n      map(\n        (loc): IReverseGeocodeInput => {\n          return {\n            latlng: normalizeLocation(loc),\n            language,\n            result_type,\n            location_type\n          };\n        }\n      ),\n      concatMap(i => this._reverseGeocode(i))\n    );\n  }\n\n  public reverseGeocodeFromSyncPlaceID(place_id: string, language: string = this.translate.getCurrentLanguage(), result_type?: string, location_type?: string): Observable<IGeocodeResult> {\n    return this._reverseGeocode({\n      place_id,\n      language,\n      result_type,\n      location_type\n    }).pipe(map(results => results[0]));\n  }\n\n  public reverseGeocodePlaceIDObserver(place_idO: Observable<string>, language: string = this.translate.getCurrentLanguage(), result_type?: string, location_type?: string): Observable<IGeocodeResult> {\n    return place_idO.pipe(\n      map(\n        (place_id): IReverseGeocodeInput => {\n          return {\n            place_id,\n            language,\n            result_type,\n            location_type\n          };\n        }\n      ),\n      concatMap(i => this._reverseGeocode(i)),\n      map(results => results[0])\n    );\n  }\n\n  public placePredictionsLocationObserver(\n    input?: string,\n    location: Observable<string | Position> | Promise<string | Position> | string | Position = from(this.geo.getLocation().then(pos => pos.toStringLoc())),\n    language: string = this.translate.getCurrentLanguage(),\n    offset: number = input.length,\n    radius?: number,\n    types?: string,\n    components?: string,\n    address?: string,\n    search?: string,\n    type?: string,\n    limit?: number,\n    nearbyRadius?: number,\n    skipName?: boolean,\n    debug?: boolean\n  ): Observable<IGeocodeResult[]> {\n    return normalizeObservable(location).pipe(\n      map(\n        (loc): IAutocompleteInput | IResolvedAddressLocationInput => {\n          return {\n            input,\n            offset,\n            location: normalizeLocation(loc),\n            radius,\n            language,\n            types,\n            components,\n            address,\n            search,\n            type,\n            limit,\n            nearbyRadius,\n            skipName,\n            debug\n          };\n        }\n      ),\n      concatMap(i => this._placePredictions(i))\n    );\n  }\n  public placePredictionsFromSync(location: string | Position, input?: string, language: string = this.translate.getCurrentLanguage(), offset: number = input.length, radius?: number, types?: string, components?: string, address?: string, search?: string, type?: string, limit?: number, nearbyRadius?: number, skipName?: boolean, debug?: boolean): Observable<IGeocodeResult[]> {\n    return this._placePredictions({\n      input,\n      offset,\n      location: normalizeLocation(location),\n      radius,\n      language,\n      types,\n      components,\n      address,\n      search,\n      type,\n      limit,\n      nearbyRadius,\n      skipName,\n      debug\n    });\n  }\n\n  public nearbyPlaceCodesFromSync(location: string | Position, radius?: number, keyword?: string, language: string = this.translate.getCurrentLanguage(), name?: string | string[], minprice?: number, maxprice?: number, opennow?: boolean, rankby?: string, types?: string | string[], address?: string, search?: string, type?: string, limit?: number, nearbyRadius?: number, skipName?: boolean, debug?: boolean): Observable<IGeocodeResult[]> {\n    return this._nearbyPlaceCodes({\n      location: normalizeLocation(location),\n      radius,\n      keyword,\n      language,\n      name,\n      minprice,\n      maxprice,\n      opennow,\n      rankby,\n      types,\n      address,\n      search,\n      type,\n      limit,\n      nearbyRadius,\n      skipName,\n      debug\n    });\n  }\n\n  public resolveAddressLocation(address: string, language: string = this.translate.getCurrentLanguage(), search?: string, type?: string, limit?: number, nearbyRadius?: number, skipName?: boolean, debug?: boolean): Observable<IResolvedAddressLocationResult> {\n    return this._resolveAddressLocation({\n      address,\n      language,\n      search,\n      type,\n      limit,\n      nearbyRadius,\n      skipName,\n      debug\n    });\n  }\n\n  public getCurrentAddresses(forceRefresh = false) {\n    if (this.network.isOffline()) {\n      return this.cache.get(CACHE_KEYS.addresses, CACHE_KEYS.addresses).toPromise();\n    } else {\n      return this.geo\n        .getLocation(forceRefresh)\n        .then((p: Position) => {\n          return this.reverseGeocodeFromSyncLocation(p).toPromise();\n        })\n        .then(res => {\n          let retVal = [];\n          if (res && res.length > 0) {\n            retVal = res.map(d => {\n              let position = new Position(d.geometry.location);\n              return {\n                address: d.formatted_address,\n                _id: d.id || d.formatted_address,\n                _geoloc: position.toGeoLoc(true),\n                coords: position.toJson()\n              };\n            });\n          }\n          this.cache.add(CACHE_KEYS.addresses, CACHE_KEYS.addresses, retVal);\n          return retVal;\n        });\n    }\n  }\n\n  // public getStreetView(lat: number, lng: number) {\n  //   let url= this.apiUrl+'streetView?'\n  // }\n\n  private get apiUrl() {\n    return this.config.apiUrl + 'GoogleMaps/';\n  }\n\n  private _autocomplete(input: IAutocompleteInput, query: boolean): Observable<IAutocompletePrediction[]> {\n    return this.rq.post(`${this.apiUrl}place/autocomplete?query=${query}`, input).pipe(\n      map((res: IAutocompleteResponse) => {\n        return res.predictions;\n      })\n    );\n  }\n\n  private _placePredictions(input: IResolvedAddressLocationInput | IAutocompleteInput): Observable<IGeocodeResult[]> {\n    return this.rq.post(this.apiUrl + 'place/predictions', input);\n  }\n\n  private _nearbyPlaceCodes(input: IResolvedAddressLocationInput | INearbySearchInput): Observable<IGeocodeResult[]> {\n    return this.rq.post(this.apiUrl + 'place/nearby-place-codes', input);\n  }\n\n  private _resolveAddressLocation(input: IResolvedAddressLocationInput): Observable<IResolvedAddressLocationResult> {\n    return this.rq.post(this.apiUrl + 'resolve-address-location', input);\n  }\n\n  private _nearbySearch(input: INearbySearchInput): Observable<INearbySearchResponse> {\n    return this.rq.post(this.apiUrl + 'place/nearby', input);\n  }\n\n  private _nextSearchResults(next_page_token: string): Observable<INearbySearchResponse> {\n    return this.rq.post(this.apiUrl + 'place/nearby', { next_page_token });\n  }\n\n  private _geocode(input: IGeocodeInput): Observable<IGeocodeResult[]> {\n    return this.rq.post(this.apiUrl + 'geocode', input).pipe(\n      map((res: IGeocodeResponse) => {\n        return res.results;\n      })\n    );\n  }\n\n  private _reverseGeocode(input: IReverseGeocodeInput): Observable<IGeocodeResult[]> {\n    return this.rq.post(this.apiUrl + 'reverse-geocode', input).pipe(\n      map((res: IReverseGeocodeResponse) => {\n        if (isString(res)) {\n          res = JSON.parse(res);\n        }\n        return uniqBy(res.results, t => t.formatted_address);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Config } from '../config/config.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class Workplace {\n  private get apiUrl() {\n    return this.config.apiUrl + 'workplace/';\n  }\n\n  constructor(private rq: Requestor, private config: Config) {}\n\n  getAllGroups() {\n    let url = this.apiUrl + 'getGroups';\n    return this.rq\n      .post(url, {\n        query: {\n          limit: 20,\n          fields: 'icon, name, cover, description'\n        }\n      })\n      .pipe(\n        map(res => {\n          res.data.forEach(g => (g._id = g.id));\n          return res;\n        })\n      );\n  }\n\n  postOnGroup(groupIds: Array<string>, options: any): Observable<any> {\n    let url = this.apiUrl + 'post';\n    return this.rq.post(url, {\n      groupIds,\n      options\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CoreConfig, Log } from '@shared/common';\n\nimport { File } from '../../interfaces/file/file.interface';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Config } from '../config/config.service';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  IFilesService,\n  isFile as _isFile,\n  isBase64 as _isBase64,\n  isFileUri as _isFileUri,\n  isImageFile as _isImageFile,\n  read as _read,\n  getExtension as _getExtension,\n  changeExtension as _changeExtension,\n  getMaxSize as _getMaxSize,\n  toPng as _toPng,\n  isValid as _isValid,\n  isImage as _isImage,\n  isVideo as _isVideo,\n  isAudio as _isAudio,\n  isDocument as _isDocument,\n  getType as _getType,\n  getMimeType as _getMimeType,\n  getIcon as _getIcon,\n  getVideoPoster as _getVideoPoster,\n  b64toBlob as _b64toBlob,\n  blobToFile as _blobToFile,\n  b64ToFile as _b64ToFile,\n  saveBase64AsImageFile as _saveBase64AsImageFile,\n  resizeBase64Image as _resizeBase64Image,\n  getBase64MimeType as _getBase64MimeType,\n  getBase64Extension as _getBase64Extension,\n  resizeImage as _resizeImage,\n  getNativeDirectory as _getNativeDirectory,\n  resolveFilePath as _resolveFilePath,\n  fixImageOrientation as _fixImageOrientation,\n  moveToImageDirectory as _moveToImageDirectory,\n  moveToImageDirectoryBase as _moveToImageDirectoryBase,\n  fileNativeWriteFile as _fileNativeWriteFile,\n  fileNativeCheckFile as _fileNativeCheckFile,\n  fixAbsolutePath as _fixAbsolutePath,\n  getCloudinaryUrl as _getCloudinaryUrl,\n  getLocalFilePath as _getLocalFilePath,\n  getLocalFileName as _getLocalFileName,\n  saveToLocalFile as _saveToLocalFile,\n  cleanFileName as _cleanFileName,\n  getUrlWithAnnotations as _getUrlWithAnnotations,\n  showPdfOnDevice as _showPdfOnDevice,\n  downloadFileToDevice as _downloadFileToDevice,\n  openBlob as _openBlob,\n  afterOpenBlob as _afterOpenBlob\n} from '@shared/stencil';\n\n@Injectable()\nexport class Files implements IFilesService {\n  constructor(private rq: Requestor, private coreConfig: CoreConfig, private log: Log, protected config: Config) {}\n\n  isFile(file) {\n    return _isFile(file);\n  }\n\n  isBase64(file) {\n    return _isBase64(file);\n  }\n\n  isFileUri(file) {\n    return _isFileUri(file);\n  }\n\n  isImageFile(file) {\n    return _isImageFile(file);\n  }\n\n  read(nativeFile: File | Blob, type = 'blob', encoding?: string): Promise<string> {\n    return _read(<any>nativeFile, type, encoding);\n  }\n\n  getExtension(file: File | any) {\n    return _getExtension(file);\n  }\n\n  changeExtension(filename: string, extension: string): string {\n    return _changeExtension(filename, extension);\n  }\n\n  getMaxSize(extension) {\n    return _getMaxSize(extension);\n  }\n\n  toPng(value: string) {\n    return _toPng(value);\n  }\n\n  isValid(file: File) {\n    return _isValid(<any>file);\n  }\n\n  isImage(file: File | any) {\n    return _isImage(file);\n  }\n\n  isVideo(file: File | any) {\n    return _isVideo(file);\n  }\n\n  isAudio(file: File | any) {\n    return _isAudio(file);\n  }\n\n  isDocument(file: File | any) {\n    return _isDocument(file);\n  }\n\n  getType(file: File | any) {\n    return _getType(file);\n  }\n\n  getMimeType(file: File | any) {\n    return _getMimeType(file);\n  }\n\n  getIcon(file: File) {\n    return _getIcon(file);\n  }\n\n  getVideoPoster(value: string) {\n    return _getVideoPoster(value);\n  }\n\n  b64toBlob(b64Data, contentType = null, sliceSize = 512) {\n    return _b64toBlob(b64Data, contentType, sliceSize);\n  }\n\n  blobToFile(blob): any {\n    return _blobToFile(blob);\n  }\n\n  b64ToFile(data: string, file: File): any {\n    return _b64ToFile(data, file as any);\n  }\n\n  saveBase64AsImageFile(data: string) {\n    return _saveBase64AsImageFile(data);\n  }\n\n  resizeBase64Image(base64, maxWidth, maxHeight) {\n    return _resizeBase64Image(base64, maxWidth, maxHeight);\n  }\n\n  getBase64MimeType(base64: string) {\n    return _getBase64MimeType(base64);\n  }\n\n  getBase64Extension(base64: string) {\n    return _getBase64Extension(base64);\n  }\n\n  resizeImage(file: File, maxWidth: Number, maxHeight: Number): Promise<any> {\n    return _resizeImage(file as any, maxWidth, maxHeight);\n  }\n\n  getNativeDirectory(subfolder) {\n    return _getNativeDirectory(subfolder);\n  }\n\n  resolveFilePath(filePath: string) {\n    return _resolveFilePath(filePath);\n  }\n\n  fixImageOrientation(path, fileName) {\n    return _fixImageOrientation(path, fileName);\n  }\n\n  //should only be called in cordova\n  moveToImageDirectory(originalFilePath: string, disableOrientationFix: boolean = false): Promise<string> {\n    return _moveToImageDirectory(originalFilePath, disableOrientationFix);\n  }\n\n  moveToImageDirectoryBase(fileDirPath: string, fileEntry: any, newName: string, originalFilePath: string) {\n    return _moveToImageDirectoryBase(fileDirPath, fileEntry, newName, originalFilePath);\n  }\n\n  fileNativeWriteFile(path, fileName, text, options) {\n    return _fileNativeWriteFile(path, fileName, text, options);\n  }\n\n  fileNativeCheckFile(path, fileName) {\n    return _fileNativeCheckFile(path, fileName);\n  }\n\n  fixAbsolutePath(data: string) {\n    return _fixAbsolutePath(data);\n  }\n\n  getCloudinaryUrl(retVal) {\n    return _getCloudinaryUrl(retVal);\n  }\n\n  downloadFile(filename, mediaType, url, options) {\n    return this.rq.downloadFile(filename, mediaType, url, options);\n  }\n\n  getLocalFilePath() {\n    return _getLocalFilePath();\n  }\n\n  getLocalFileName(fileName: string) {\n    return _getLocalFileName(fileName);\n  }\n\n  saveToLocalFile(blob, fileName) {\n    return _saveToLocalFile(blob, fileName);\n  }\n\n  getUrlWithAnnotations(src: string, photo?: any) {\n    return _getUrlWithAnnotations(src, photo);\n  }\n\n  cleanFileName(fileName: string) {\n    return _cleanFileName(fileName);\n  }\n\n  downloadFileToDevice(source, target) {\n    return _downloadFileToDevice(source, target);\n  }\n\n  showPdfOnDevice(filePath: string, fileName: string = null) {\n    return _showPdfOnDevice(filePath, fileName);\n  }\n\n  uploadProxy(photoUrl: string): Observable<any> {\n    let url = this.config.uploadProxyUrl;\n    return this.rq.post(url, { url: photoUrl }).pipe(\n      map(retVal => {\n        return this.getCloudinaryUrl({ cloudinary: retVal });\n      })\n    );\n  }\n\n  exportToFile(content, type, encoding, filename) {\n    encoding = encoding || 'charset=ISO-8859-1';\n    filename = filename || 'data.csv';\n    type = type || 'data:application/csv;charset=ISO-8859-1;';\n\n    if (encoding === 'base64') {\n      content = this.b64toBlob(content, type);\n    }\n    let blob = new Blob([content], {\n      type: type\n    });\n    return this.rq.saveBlob(blob, filename);\n  }\n\n  openBlob(blob, fileName: string, mimeType: string) {\n    return _openBlob(blob, fileName, mimeType);\n  }\n\n  afterOpenBlob(filePath, mimeType) {\n    return _afterOpenBlob(filePath, mimeType);\n  }\n\n  _requestExternalStoragePermission() {\n    return new Promise((resolve, reject) => {\n      if (this.coreConfig.isAndroid() && this.coreConfig.isCordova()) {\n        let permissions = (<any>window.cordova.plugins).permissions;\n        permissions.hasPermission(permissions.READ_EXTERNAL_STORAGE, initialStatus => {\n          if (!initialStatus.hasPermission) {\n            let errorCallback = () => {\n              this.log.error('Storage permission is not turned on');\n              reject(false);\n            };\n            permissions.requestPermission(\n              permissions.READ_EXTERNAL_STORAGE,\n              status => {\n                if (!status.hasPermission) {\n                  errorCallback();\n                } else {\n                  resolve(true);\n                }\n              },\n              errorCallback\n            );\n          } else {\n            resolve(true);\n          }\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Observable } from 'rxjs';\nimport { CoreConfig } from '@shared/common';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class Box {\n  constructor(private config: Config, private rq: Requestor, private coreConfig: CoreConfig) {}\n\n  upload(documentUrl: string): Observable<any> {\n    let url = this.config.apiUrl + 'businesslogic/uploadToBox';\n    return this.rq.post(url, { params: { documentUrl } }).pipe(\n      map(retVal => {\n        if (retVal && retVal.data) {\n          return retVal.data.id;\n        }\n        return null;\n      })\n    );\n  }\n\n  createViewingSession(boxId: string): Observable<any> {\n    let url = this.config.apiUrl + 'businesslogic/createViewingSessionBox';\n    return this.rq.post(url, { params: { boxId } }).pipe(\n      map(retVal => {\n        if (retVal && retVal.data) {\n          return retVal.data;\n        }\n        return null;\n      })\n    );\n  }\n\n  getViewingContent(contentUrl: string): Observable<any> {\n    let url = this.config.apiUrl + 'businesslogic/getViewingContentBox';\n    return this.rq.post(url, { params: { contentUrl } }).pipe(\n      map(retVal => {\n        if (retVal && retVal.data) {\n          let content = retVal.data;\n          let headIndex = content.indexOf('<head>') + 6;\n          let overwriteStyle = '<style type=\"text/css\">';\n          overwriteStyle += '.controls-center .scroll-previous-btn, .controls-center .scroll-next-btn, .controls-right .zoom-in-btn, .controls-right .zoom-out-btn, .controls-right {';\n          overwriteStyle += '  display: initial !important;';\n          overwriteStyle += '}';\n          overwriteStyle += '.fullscreen-btn {';\n          overwriteStyle += '  display: none !important;';\n          overwriteStyle += '}';\n          overwriteStyle += '</style>';\n          let protocol = this.coreConfig.getProtocol();\n          content = [content.slice(0, headIndex), overwriteStyle, content.slice(headIndex)].join('');\n          content = content.replace(new RegExp('href=\"//', 'g'), 'href=\"' + protocol + '//');\n          content = content.replace(new RegExp('src=\"//', 'g'), 'src=\"' + protocol + '//');\n          return content;\n        }\n        return null;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CoreConfig } from '@shared/common';\n\nimport { Requestor } from '../requestor/requestor.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class Unsplash {\n  constructor(protected rq: Requestor, protected coreConfig: CoreConfig) {}\n\n  getAll(search?: string, skip?: number, limit?: number) {\n    let url;\n    if (search) {\n      url = 'https://api.unsplash.com/search/photos?client_id=' + this.coreConfig.getKey('unsplashAccessKey');\n      url += '&query=' + search;\n      url += '&page=' + (skip / limit + 1);\n      url += '&per_page=' + limit;\n    } else {\n      url = 'https://api.unsplash.com/photos?page=1&per_page=20&client_id=' + this.coreConfig.getKey('unsplashAccessKey');\n    }\n    return this.rq.get(url, null, null, null, true).pipe(\n      map(ret => {\n        //{\n        //count: search ? ret.total : 100,\n        //data:\n        return (search ? ret.results : ret).map(r => ({\n          _id: r.id,\n          title: r.description,\n          value: r.urls.raw,\n          thumb: r.urls.thumb\n        }));\n        //};\n      })\n    );\n  }\n}\n","export class ResponseObject {\n  data: Array<any>;\n  count: number;\n}\n","import { Injectable, EventEmitter, Injector } from '@angular/core';\nimport { Cache } from '../cache/cache.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Models } from '../models/models.service';\nimport { Googlemaps } from '../googlemaps/googlemaps.service';\nimport { Workplace } from '../workplace/workplace.service';\nimport { Session } from '../session/session.service';\nimport { Files } from '../files/files.service';\nimport { Box } from '../box/box.service';\nimport { Config } from '../config/config.service';\nimport { Smartloc } from '../smartloc/smartloc.service';\nimport { Unsplash } from '../unsplash/unsplash.service';\n\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { Location } from '../../interfaces/location/location.interface';\nexport * from '../../interfaces/response-object/response-object.interface';\n\nimport { Filters, Query, SubQuery, IEntity, ICustomModel, ISort, toDate, utc, dateAdd, startOf, cacheFile, isNullOrUndefined } from '@shared/stencil';\nimport { Position, CoreConfig, PromiseService, Log, LocalForageService, Network } from '@shared/common';\nimport { Translate } from '@shared/translate';\n\nimport { FileUploader } from 'ng2-file-upload';\nimport { FileTransfer } from '@ionic-native/file-transfer/ngx';\nimport { uniq, compact, get, set, assign, isArray, isString, isObject, isEmpty, flatten, forEach, concat, remove, cloneDeep, uniqBy, isEqual, intersection, orderBy, keys, map as lodashMap } from 'lodash-es';\n\nimport { Observable, Observer, forkJoin, from, of, combineLatest } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators'; //, groupBy, flatMap, reduce\n\n@Injectable()\nexport class Broker {\n  private isUploadingDatabase: boolean;\n\n  constructor(\n    private rq: Requestor,\n    private box: Box,\n    private googlemaps: Googlemaps,\n    private workplace: Workplace,\n    private session: Session,\n    private files: Files,\n    private promise: PromiseService,\n    private coreConfig: CoreConfig,\n    private log: Log,\n    private network: Network,\n    private transfer: FileTransfer,\n    private localForage: LocalForageService,\n    public config: Config,\n    protected injector: Injector,\n    protected cache: Cache,\n    protected geoloc: Smartloc,\n    protected translate: Translate,\n    protected unsplash: Unsplash\n  ) {\n    this.init();\n  }\n\n  init() {}\n\n  getApiUrl() {\n    return this.config.apiUrl;\n  }\n\n  getServerUrl() {\n    return this.config.serverUrl;\n  }\n\n  getCollectionName(collectionName: string) {\n    let model = Models.getModelByCollectionName(collectionName);\n    if (model && model.isCustom) {\n      return 'custommodelinstances';\n    }\n    return collectionName;\n  }\n\n  getById(collectionName: string, id: string, fields?: Array<string>, include?: Array<string>, idAttributeName?: string) {\n    let query = this.getQuery(collectionName, fields, include);\n    delete query.limit;\n    delete query.skip;\n    delete query.order;\n    delete query.subQuery;\n    if (this.network.isOffline()) {\n      return from(this.cache.getByIdFromDatabaseCollection(collectionName, id, idAttributeName));\n    } else if (!idAttributeName || idAttributeName === '_id') {\n      let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/' + id + '?filter=' + encodeURIComponent(JSON.stringify(query));\n      return this.rq.get(url);\n    } else {\n      let filters: Filters = [[{ field: idAttributeName, operator: { _id: 'eq' }, value: id }]];\n      return this.getAll(collectionName, fields, include, null, filters).pipe(\n        map(res => {\n          if (res.data && res.data.length > 0) {\n            return res.data[0];\n          }\n          return null;\n        })\n      );\n    }\n  }\n\n  create(collectionName: string, entity: any) {\n    let url = this.config.apiUrl + this.getCollectionName(collectionName);\n    this.updateCustomModel(collectionName, entity);\n    if (this.network.isOffline()) {\n      return from(this.cache.upsertInDatabaseCollection(collectionName, entity));\n    } else {\n      return this.rq.post(url, entity);\n    }\n  }\n\n  update(collectionName: string, entity: any) {\n    if (this.network.isOffline() || this.isOfflineEntity(entity)) {\n      return from(this.cache.upsertInDatabaseCollection(collectionName, entity));\n    } else if (collectionName === 'groups') {\n      let url = this.config.apiUrl + this.getCollectionName(collectionName);\n      this.updateCustomModel(collectionName, entity);\n      return this.rq.put(url, entity);\n    } else {\n      if (entity._id) {\n        return this.patch(collectionName, entity);\n      } else {\n        return this.create(collectionName, entity);\n      }\n    }\n  }\n\n  save(collectionName: string, entity: any, fields?: Array<string>) {\n    if (this.network.isOffline() || this.isOfflineEntity(entity)) {\n      return from(this.cache.upsertInDatabaseCollection(collectionName, entity));\n    } else {\n      return this.upsert(collectionName, entity).pipe(mergeMap(res => this.getById(collectionName, res._id, fields)));\n    }\n  }\n\n  patch(collectionName: string, entity: any) {\n    if (!entity || !entity._id) {\n      throw new Error('Cant patch an empty entity or an entity without an id');\n    }\n    this.updateCustomModel(collectionName, entity);\n    if (this.network.isOffline() || this.isOfflineEntity(entity)) {\n      return from(this.cache.upsertInDatabaseCollection(collectionName, entity, true));\n    } else {\n      let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/' + entity._id;\n      return this.rq.patch(url, entity);\n    }\n  }\n\n  upsert(collectionName: string, entity: Object, previousEntity?: Object, skipAcl?: boolean): Observable<any> {\n    if (!skipAcl) {\n      this.setAcl(entity, (<any>entity).group, false, collectionName);\n    }\n    this.incrementTags(collectionName, entity).subscribe(() => {});\n    let suffixs = collectionName === 'missiondatas' ? ['.value', '.edit', '.value.fieldValue'] : ['._downloadURL', '.edit'];\n    let hasFiles = this._hasFiles(entity, suffixs);\n    if (this.network.isOffline() || !hasFiles) {\n      return this.update(collectionName, entity);\n    } else {\n      return new Observable<ResponseObject>((observer: Observer<any>) => {\n        this.uploadEntityFiles(entity, suffixs).then(\n          () => {\n            this.update(collectionName, entity).subscribe(ret => {\n              if (ret._downloadURL && this.files.isDocument(ret._downloadURL)) {\n                this.box.upload(ret._downloadURL).subscribe(boxId => {\n                  if (boxId) {\n                    ret.boxId = boxId;\n                  }\n                  this.update(collectionName, ret).subscribe(retval => {\n                    observer.next(retval);\n                    observer.complete();\n                  });\n                });\n              } else {\n                observer.next(ret);\n                observer.complete();\n              }\n            });\n          },\n          err => {}\n        );\n      });\n    }\n  }\n\n  upsertAll(collectionName: string, entities: Array<Object>): Observable<any> {\n    let obs = entities.map(entity => this.upsert(collectionName, entity));\n    return forkJoin(obs);\n  }\n\n  uploadEntityFiles(entity, suffixs: Array<string> = [], progressEmitter?: EventEmitter<any>, tags?: Array<string>, promisesOnly = false, totalOffset = 0): Promise<any> {\n    let properties = this._getFileProperties(entity, suffixs);\n    let count = 0;\n    let promises: Array<Promise<any>> = properties.map(prop => {\n      let promise;\n      let file = get(entity, prop);\n      promise = ((offsetIndex, total) => {\n        return () =>\n          this.prepareUpload(file)\n            .then(f => {\n              return this.upload(f, progressEmitter, offsetIndex, total, tags, totalOffset);\n            })\n            .then(url => {\n              set(entity, prop, url);\n            })\n            .catch((err: any) => Promise.reject(err));\n      })(count, properties.length);\n      count += 1;\n      return promise;\n    });\n    if (promisesOnly) {\n      return promises.length > 0 ? promises : <any>[() => Promise.resolve('empty')];\n    }\n    return this.promise.sequential(promises);\n  }\n\n  uploadEntitiesFiles(entities: Array<any>, suffixs: Array<string> = [], progressEmitter?: EventEmitter<any>, tags?: Array<string>) {\n    let promises = entities.map(entity => {\n      return () => this.uploadEntityFiles(entity, suffixs, progressEmitter, tags, false);\n    });\n    return this.promise.sequential(promises);\n  }\n\n  prepareUpload(file) {\n    return this.files._requestExternalStoragePermission().then(() => {\n      if (this.files.isBase64(file)) {\n        return Promise.resolve(this.files.b64toBlob(file));\n      } else if (this.files.isFileUri(file)) {\n        return this.files.resolveFilePath(<string>file);\n      } else {\n        return Promise.resolve(file);\n      }\n    });\n  }\n\n  updateAll(collectionName: string, query: Query, entity: any) {\n    let rawQuery: any = assign({}, query.where);\n    if (query.subQuery) {\n      rawQuery.__options = { subQuery: query.subQuery };\n    }\n    if (entity.group) {\n      entity['_acl.groups.r'] = entity.group;\n    }\n    let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/update?where=' + encodeURIComponent(JSON.stringify(rawQuery));\n    return this.rq.post(url, entity);\n  }\n\n  setAcl(entity, group?: string | Array<string>, addWrite: boolean = false, collectionName?: string, users?: Array<string>) {\n    //entity._acl = entity._acl || { groups: { r: ['admin'], w: ['admin', 'manager'] } };\n    entity._acl = entity._acl || { groups: { r: [], w: [] } };\n    entity._acl.creator = entity._acl && entity._acl.creator ? entity._acl.creator : this.session.user ? this.session.user._id : null;\n    entity._acl.groups = entity._acl && entity._acl.groups ? entity._acl.groups : {};\n    if (group) {\n      entity._acl.groups.r = uniq([].concat(group).concat(entity._acl.groups.r));\n    }\n    entity._acl.groups.r = compact(entity._acl.groups.r);\n    //entity._acl.groups.w = compact(uniq(['admin', 'manager'].concat(entity._acl.groups.w || [])));\n    entity._acl.groups.w = compact(uniq([].concat(entity._acl.groups.w || [])));\n\n    if (collectionName === 'translations' && group) {\n      entity._acl.groups.r = uniq([].concat(group));\n      entity._acl.groups.w = uniq([].concat(group));\n    }\n    if (addWrite && group) {\n      entity._acl.groups.w = compact(uniq([].concat(group).concat(entity._acl.groups.w)));\n    }\n    if (users && users.length > 0) {\n      //entity._acl.users = { r: users, w: users };\n      entity._acl.groups.r = entity._acl.groups.r.concat(users);\n    }\n  }\n\n  getCurrentGroups() {\n    if (this.session.roles.indexOf('admin') < 0) {\n      return this.session.groups;\n    } else {\n      return ['debug_v2'];\n    }\n  }\n\n  updateCustomModel(collectionName: string, entity: any) {\n    let model = Models.getModelByCollectionName(collectionName);\n    if (model && model.isCustom) {\n      entity._modelName = collectionName;\n      if (entity.location && entity.location._id) {\n        entity.locationRef = entity.location._id;\n      }\n    }\n  }\n\n  upload(file: any, progressEmitter?: EventEmitter<any>, offsetIndex = 0, total = 1, tags: Array<string> = [], totalOffset = 0): Promise<string> {\n    tags = concat([this.session.userId], tags);\n    //check for file created from base64 if we can send them through cordova transfert plugin.\n    if (this.coreConfig.isCordova() && file.nativeURL) {\n      let fileTransfer = this.transfer.create();\n      if (progressEmitter) {\n        fileTransfer.onProgress(ev => {\n          if (ev.lengthComputable) {\n            let percentage = ((ev.loaded / ev.total) * 100) / (total + totalOffset) + (offsetIndex * 100) / (total + totalOffset);\n            progressEmitter.next(percentage);\n          }\n        });\n      }\n      return fileTransfer\n        .upload(file.nativeURL, this.config.uploadUrl, {\n          fileKey: 'file',\n          fileName: file.name,\n          chunkedMode: false,\n          params: { tags: tags }\n        })\n        .then((result: any) => {\n          let retVal = JSON.parse(result.response);\n          return this.files.getCloudinaryUrl(retVal);\n        })\n        .catch((err: any) => {\n          let fileError = err && err.message ? err.message : 'File Error';\n          return Promise.reject(fileError);\n        });\n    } else {\n      let fileUploader = this.getFileUploader(null);\n      return new Promise((resolve, reject) => {\n        fileUploader.onBuildItemForm = (fileItem: any, form: any) => {\n          form.append('tags', JSON.stringify(tags));\n        };\n        fileUploader.onCompleteItem = (item: any, response: any, status: any, headers: any): any => {\n          this.log.log('upload finish');\n          fileUploader.clearQueue();\n          if (status === 200) {\n            let retVal = JSON.parse(response);\n            resolve(this.files.getCloudinaryUrl(retVal));\n          } else {\n            reject(response ? JSON.parse(response) : 'error');\n          }\n        };\n        if (progressEmitter) {\n          fileUploader.onProgressItem = (item: any, progress: any) => {\n            let percentage = progress / (total + totalOffset) + (offsetIndex * 100) / (total + totalOffset);\n            progressEmitter.next(percentage);\n          };\n        }\n        fileUploader.addToQueue([file]);\n        fileUploader.queue[0].alias = 'undefined';\n        //fileItem.alias = 'undefined';\n        this.log.log('upload begin');\n        fileUploader.uploadAll();\n      });\n    }\n  }\n\n  uploadData(data, progressEmitter?: EventEmitter<any>, offsetIndex = 0, total = 1) {\n    let file = this.files.b64toBlob(data);\n    return this.upload(file, progressEmitter, offsetIndex, total);\n  }\n\n  incrementTags(collectionName: string, entity: any): Observable<any> {\n    if (entity.tags && entity.tags.length > 0) {\n      entity.tags = uniq(compact([].concat(entity.tags)));\n      if (entity.tags.length > 0 && !this.network.isOffline()) {\n        let url = this.config.apiUrl + 'tags/incrementTags';\n        return this.rq.post(url, {\n          params: {\n            collectionName: Models.fixCollectionName(collectionName),\n            tags: entity.tags,\n            groups: [].concat(entity.group || entity._acl.groups.r),\n            entity\n          }\n        });\n      }\n    }\n    return of(null);\n  }\n\n  updateTags(collectionName: string) {\n    let url = this.config.apiUrl + 'tags/updateTags';\n    return this.rq.post(url, { params: { collection: collectionName } });\n  }\n\n  createAllTags() {\n    let url = this.config.apiUrl + 'businessLogic/createAllTags';\n    return this.rq.post(url, { params: {} });\n  }\n\n  delete(collectionName: string, id: string) {\n    if (this.isOfflineId(id)) {\n      return from(this.cache.removeFromDatabaseCollection(collectionName, id));\n    } else {\n      let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/' + encodeURIComponent(id);\n      return this.rq.delete(url);\n    }\n  }\n\n  deleteAll(collectionName: string, query: Query) {\n    let url = this.config.apiUrl + this.getCollectionName(collectionName);\n    let rawQuery: any = assign({}, query.where || { _id: { exists: true } });\n    if (query.subQuery) {\n      rawQuery.__options = { subQuery: query.subQuery };\n    }\n    return this.rq.delete(url, rawQuery);\n  }\n\n  getQuery(collectionName: string, fields?: Array<string>, include?: Array<string>, search?: string, filters?: Filters | Object, sorts?: Array<ISort>, skip = 0, limit = 20, subQuery: SubQuery = null, customFilter = null): Query {\n    let model = Models.getModelByCollectionName(collectionName);\n    if (model) {\n      fields = fields && fields.length > 0 ? fields : model.fields;\n      include = include || model.include;\n      if (model && model.isCustom) {\n        if (!filters || (isArray(filters) && (<Array<any>>filters).length < 1)) {\n          filters = [[]];\n        }\n        if (isArray(filters)) {\n          filters = cloneDeep(filters);\n          (<any>filters).forEach(f => {\n            f.push({ field: '_modelName', operator: { _id: 'eq' }, value: model.collectionName });\n          });\n        }\n      }\n    }\n\n    let query: Query = {};\n    if (skip && skip > 0) {\n      query.skip = skip;\n    }\n\n    if (limit && limit > 0) {\n      query.limit = limit;\n    }\n\n    if (sorts && sorts.length > 0) {\n      query.order = sorts.filter(s => isString(s) || (s.colId && s.sort)).map(s => (isString(s) ? s : s.colId + ' ' + (s.sort ? s.sort.toUpperCase() : 'ASC')));\n    } else if (sorts && sorts.length === 0) {\n      query.order = [];\n    } else {\n      query.order = ['_lmt DESC'];\n    }\n    let searchWhere = null;\n    let filterWhere = null;\n    if (search && model && !model.searchSubquery) {\n      searchWhere = Models.exportSearch(collectionName, search);\n    }\n\n    if (filters && isArray(filters) && (<Array<any>>filters).length > 0) {\n      filterWhere = Models.exportWhere(collectionName, <Filters>filters);\n    } else if (filters && !isArray(filters) && isObject(filters)) {\n      filterWhere = filters;\n    }\n    if (searchWhere && filterWhere) {\n      query.where = { and: [searchWhere, filterWhere] };\n    } else if (searchWhere) {\n      query.where = searchWhere;\n    } else if (filterWhere) {\n      query.where = filterWhere;\n    }\n\n    if (customFilter && query.where) {\n      query.where = { and: [query.where, customFilter] };\n    } else if (customFilter) {\n      query.where = customFilter;\n    }\n\n    if (fields && fields.length > 0) {\n      query.fields = fields;\n    }\n\n    if (!isEmpty(include)) {\n      query.include = include;\n    }\n\n    if (subQuery) {\n      query.subQuery = subQuery;\n    }\n\n    let filterSubquery = Models.exportSubQuery(collectionName, filters);\n    if (filterSubquery) {\n      if (query.subQuery) {\n        query.subQuery = [].concat(query.subQuery, filterSubquery);\n      } else {\n        query.subQuery = filterSubquery;\n      }\n    }\n    //this is mainly used in the channel model because we want to filter on users properties\n    if (search && model && model.searchSubquery) {\n      searchWhere = Models.exportSearch(model.searchSubquery.collectionName, search);\n      if (!query.subQuery) {\n        query.subQuery = {\n          collectionName: model.searchSubquery.collectionName,\n          field: model.searchSubquery.field,\n          values: model.searchSubquery.values,\n          where: searchWhere\n        };\n      } else if (query.subQuery && !isArray(query.subQuery) && (<SubQuery>query.subQuery).where) {\n        (<SubQuery>query.subQuery).where = { and: [searchWhere, (<SubQuery>query.subQuery).where] };\n      }\n    }\n    return query;\n  }\n\n  getCount(collectionName: string, search?: string, filters?: Filters, subQuery: SubQuery = null, customFilter = null, noOffline: boolean = false): Observable<ResponseObject> {\n    if (this.network.isOffline()) {\n      return this.getAllOffline(collectionName, false, search, filters, null, null, null, customFilter, false).pipe(\n        map(ret => {\n          return { count: ret.count, data: [] };\n        })\n      );\n    } else {\n      let query = this.getQuery(collectionName, null, null, search, filters, null, null, null, subQuery, customFilter);\n      let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/count'; //?where=' + encodeURIComponent(JSON.stringify(query.where || {}));\n      let finalQuery: any = {};\n      if (query.where) {\n        finalQuery.where = query.where;\n      }\n      if (query.subQuery) {\n        finalQuery.subQuery = query.subQuery;\n      }\n\n      let finalRes;\n      return this.rq\n        .post(url, finalQuery)\n        .pipe(\n          mergeMap(res => {\n            finalRes = res;\n            if (noOffline) {\n              return of([]);\n            } else {\n              return from(this.getAllOffline(collectionName, true, search, filters, null, null, null, customFilter));\n            }\n          })\n        )\n        .pipe(\n          map(offlineRes => {\n            let count = finalRes || 0;\n            if (offlineRes && offlineRes.count > 0) {\n              count += offlineRes.count;\n            }\n            return { count: count, data: [] };\n          })\n        );\n    }\n  }\n\n  getAll(collectionName: string, fields?: Array<string>, include?: Array<string>, search?: string, filters?: Filters, sorts?: Array<ISort>, skip = 0, limit = 20, tag = false, subQuery: SubQuery = null, customFilter = null, cacheId: string = null, looseCount: boolean = null, noCount: boolean = false, noOffline: boolean = false): Observable<ResponseObject> {\n    if (collectionName === 'googlemaps') {\n      return this.getAllGoogleMaps(search);\n    }\n    if (collectionName.indexOf('workplace_') >= 0) {\n      return this.getAllWorkplace(collectionName, search);\n    }\n    if (collectionName === 'unsplash') {\n      return this.getAllUnsplash(search, skip, limit);\n    }\n    if (tag === true) {\n      return this.getAllTags(collectionName, search, filters, skip, limit);\n    } else {\n      let query = this.getQuery(collectionName, fields, include, search, filters, sorts, skip, limit, subQuery, customFilter);\n      if (collectionName.indexOf('_store') >= 0) {\n        return this.getAllOperation(collectionName, query);\n      }\n      let obs;\n      if (this.network.isOffline()) {\n        if (cacheId) {\n          obs = from(this.localForage.get(cacheId)).pipe(\n            map(res => {\n              return res || (noCount ? [] : { count: 0, data: [] });\n            })\n          );\n        } else {\n          obs = this.getAllOffline(collectionName, false, search, filters, sorts, skip, limit, customFilter, noCount);\n        }\n      } else {\n        let finalRes;\n        obs = this.getAllQuery(collectionName, query, looseCount, noCount)\n          .pipe(\n            mergeMap(res => {\n              finalRes = res;\n              if (cacheId) {\n                this.localForage.set(cacheId, res);\n              }\n              if (noOffline) {\n                return of([]);\n              } else {\n                return from(this.getAllOffline(collectionName, true, search, filters, sorts, skip, limit, customFilter, noCount));\n              }\n            })\n          )\n          .pipe(\n            map((offlineRes: any) => {\n              if (noCount) {\n                finalRes = [...(offlineRes || []), ...(finalRes || [])];\n              } else {\n                finalRes.data = [...(offlineRes.data || []), ...(finalRes.data || [])];\n              }\n              return finalRes;\n            })\n          );\n      }\n      return obs;\n    }\n  }\n\n  getAllTags(collectionName: string, search?: string, filters?: Filters, skip = 0, limit = 20, useTagsCollection = false) {\n    filters = filters || [[]];\n    //fix for \"MongoError\",\"message\":\"$geoNear, $near, and $nearSphere are not allowed in this context\"\n    if (collectionName === 'locations') {\n      filters = filters.map(ff => {\n        return ff.filter(f => f.field !== '_geoloc');\n      });\n    }\n    if (this.network.isOffline()) {\n      return this.getAllTagsOffline({ collectionName, search, filters });\n    } else if (useTagsCollection) {\n      //this is not used anymore\n      let aggregateOptions = [{ $match: { collectionName: Models.fixCollectionName(collectionName) } }, { $group: { _id: '$tag', count: { $max: '$count' } } }, { $sort: { count: -1 } }, { $project: { _id: 1, tag: '$_id', count: 1 } }, { $group: { _id: 1, total: { $sum: 1 }, data: { $push: '$$ROOT' } } }, { $project: { count: '$total', data: { $slice: ['$data', skip, skip + limit] } } }];\n      return this.aggregateQuery('tags', filters, aggregateOptions, search).pipe(map((res: any) => (res && res.length > 0 ? { data: res[0].data, count: res[0].count } : { data: [], count: 0 })));\n    } else {\n      let aggregateOptions: Array<any> = [{ $unwind: '$tags' }];\n      if (search) {\n        aggregateOptions.push({\n          $match: { tags: { $regex: search.replace(/([^a-z0-9]+)/gi, ''), $options: 'i' } }\n        });\n      }\n\n      aggregateOptions = aggregateOptions.concat([{ $group: { _id: '$tags', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { _id: 1, tag: '$_id', count: 1 } }, ...(skip > 0 ? [{ $skip: skip }] : []), ...(limit > 0 ? [{ $limit: limit }] : [])]);\n      return this.aggregateQuery(collectionName, filters, aggregateOptions).pipe(map((res: Array<any> = []) => ({ data: res, count: res.length })));\n    }\n  }\n\n  getAllTagsOffline(config: { collectionName: string; search?: string; filters?: Filters }) {\n    return this.getAllOffline(config.collectionName, false, config.search, config.filters, null, null, null, null, true).pipe(\n      map((res: Array<IEntity>) => {\n        let data = [];\n        let count: any = {};\n        if (res && res.length > 0) {\n          res.forEach(t => {\n            if (t.tags) {\n              [].concat(t.tags).forEach(tag => {\n                count[tag] = count[tag] > 0 ? count[tag] + 1 : 1;\n              });\n            }\n          });\n          keys(count).forEach(key => {\n            data.push({ _id: key, tag: key, count: count[key] });\n          });\n          data = orderBy(data, d => -d.count);\n        }\n        return { data, count: data.length, config };\n      })\n    );\n  }\n\n  getMultipleAllTags(config: { collectionName: string; search?: string; filters?: Filters; subQuery?: SubQuery }[], skip = 0, limit = 20) {\n    if (this.network.isOffline()) {\n      let obs = config.map(c => this.getAllTagsOffline(c));\n      return combineLatest(obs).pipe(\n        map(ret => {\n          return ret;\n        })\n      );\n    } else {\n      let aggregateOptions = [{ $unwind: '$tags' }, { $group: { _id: '$tags', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { _id: 1, tag: '$_id', count: 1 } }, ...(skip > 0 ? [{ $skip: skip }] : []), ...(limit > 0 ? [{ $limit: limit }] : [])];\n      let queries: Query[] = config.map(conf => {\n        let filters = conf.filters || [];\n        if (conf.collectionName === 'locations') {\n          filters = filters.map(ff => {\n            return ff.filter(f => f.field !== '_geoloc');\n          });\n        }\n        return this.getAggregateQuery(conf.collectionName, filters, aggregateOptions, conf.search, null, null, null, conf.subQuery);\n      });\n      return this.aggregateQueries(queries).pipe(\n        map(rets => {\n          let retVal = rets.map((res, i) => ({ data: res, count: res.length, config: config[i] }));\n          return retVal;\n        })\n      );\n    }\n  }\n\n  getAllQuery(collectionName, query: Query, looseCount?: boolean, noCount?: boolean) {\n    let url = this.config.apiUrl + this.getCollectionName(collectionName) + '/find';\n    return this.rq.post(url, { filter: query }, null, !noCount, false, looseCount);\n    //let url = this.config.apiUrl + collectionName + '?filter=' + encodeURIComponent(JSON.stringify(query));\n    //return this.rq.get(url, true);\n  }\n\n  getAllGoogleMaps(search?: string) {\n    if (search) {\n      return this.googlemaps.placePredictionsLocationObserver(search).pipe(\n        map(predictions => {\n          let details = flatten(predictions).filter(d => d.geometry && d.geometry.location);\n          return {\n            count: details.length,\n            data: details.map(d => {\n              let position = new Position(d.geometry.location);\n              return {\n                address: d.formatted_address,\n                _id: d.id,\n                _geoloc: position.toGeoLoc(true),\n                coords: position.toJson()\n              };\n            })\n          };\n        })\n      );\n    } else {\n      return from(this.googlemaps.getCurrentAddresses(true)).pipe(\n        map(addresses => {\n          return { count: addresses.length, data: addresses };\n        })\n      );\n    }\n  }\n\n  getAllUnsplash(search?: string, skip?: number, limit?: number) {\n    return this.unsplash.getAll(search, skip, limit);\n  }\n\n  getAllWorkplace(collectionName: string, search?: string): Observable<ResponseObject> {\n    let graphEntity = collectionName.replace('workplace_', '');\n    switch (graphEntity) {\n      case 'groups':\n        return <any>this.workplace.getAllGroups();\n    }\n    return of({ count: 0, data: [] });\n  }\n\n  getAllOperation(collectionName: string, query: Query) {\n    let url = this.config.apiUrl + 'Operation/findDocument';\n    return this.rq\n      .post(\n        url,\n        {\n          collectionName: Models.fixCollectionName(collectionName.replace('_store', ''), true),\n          where: query.where,\n          //operationId: (<any>query.where).operationId.inq[0],\n          limit: query.limit,\n          skip: query.skip\n        },\n        null,\n        true\n      )\n      .pipe(\n        map(res => {\n          if (res.data && res.data.map) {\n            res.data = res.data; //.map(r => r.doc);\n          }\n          return res;\n        })\n      );\n  }\n\n  syncDatabase(lastSync?: Date, progressEvent?: EventEmitter<number>) {\n    let collections = this.coreConfig.getSyncedCollections();\n    if (collections && collections.length > 0) {\n      this.log.log('Syncing Database - Start');\n      let promises = collections.map((entry, i) => {\n        return () => {\n          if (entry.max <= 0) {\n            return;\n          }\n          this.log.log('Syncing Database - Syncing ' + entry.name);\n          return this.cache.getDatabaseCollection(entry.name).then(data => {\n            let filters: Filters = cloneDeep(entry.filters || [[]]);\n            filters.forEach(fs =>\n              fs.forEach(f => {\n                if (f.value && isArray(f.value) && f.value.indexOf('currentLanguage') >= 0) {\n                  f.value[f.value.indexOf('currentLanguage')] = this.translate.getCurrentLanguage();\n                }\n              })\n            );\n            if (lastSync && data.length > 0) {\n              // && ) {\n              filters.forEach(f => f.push({ field: '_lmt', operator: { _id: 'gte' }, value: lastSync }));\n            }\n\n            return (\n              this.getAll(entry.name, entry.fields, null, null, filters, null, 0, Math.min(entry.max || 1000, 1000), null, null, null, null, null, null, true)\n                .toPromise()\n                // let chunckNumber = (entry.max || 10000) / 100;\n                // let ps = [];\n                // for (let ii = 0; ii <= chunckNumber; ii++) {\n                //   ps.push(this.getAll(entry.name, entry.fields, null, null, filters, null, ii * 100, 100).toPromise());\n                //   //ps.push(this.aggregateQuery(entry.name, filters, [{ $skip: ii * 100 }, { $limit: 100 }], null, null, false, null, null).toPromise());\n                // }\n                // return Promise.all(ps)\n                // .then((ret: Array<ResponseObject>) => {\n                //   let d = [].concat.apply([], ret.map(r => r.data));\n                //   return {\n                //     count: d.length,\n                //     data: d\n                //   };\n                // })\n                .then(ret => {\n                  if (progressEvent) {\n                    progressEvent.emit((i / collections.length) * 100);\n                  }\n                  if (ret && ret.data) {\n                    let filePromises: Array<any> = [Promise.resolve(null)];\n                    let deletedKeys: Array<string>;\n                    if (lastSync) {\n                      filePromises = [\n                        this.getDeletedEntities(entry.name, data)\n                          .toPromise()\n                          .then((deletedkeys: Array<string>) => {\n                            deletedKeys = deletedkeys;\n                          })\n                      ];\n                    }\n                    if (entry.addToCache && entry.addToCache.length > 0) {\n                      entry.addToCache.forEach(key => {\n                        ret.data.forEach(item => {\n                          if (item[key]) {\n                            filePromises.push(() => cacheFile(item[key]));\n                          }\n                        });\n                      });\n                    }\n\n                    return Promise.all(filePromises).then(() => {\n                      return this.cache.updateDatabaseCollection(entry.name, ret.data, '_id', deletedKeys);\n                    });\n                  }\n                })\n            );\n          });\n        };\n      });\n      return this.promise.sequential(promises).then(ret => {\n        if (progressEvent) {\n          progressEvent.emit(100);\n        }\n        return ret;\n      });\n    }\n    return Promise.resolve(null);\n  }\n\n  clearDatabase() {\n    let collections = this.coreConfig.getSyncedCollections();\n    if (collections && collections.length > 0) {\n      let promises = collections.map(entry => {\n        return () => this.cache.clearDatabaseCollection(entry.name);\n      });\n      return this.promise.sequential(promises);\n    }\n    return Promise.resolve(null);\n  }\n\n  getDeletedEntities(collectionName: string, data: IEntity[]) {\n    data = data || [];\n    let url = this.config.apiUrl + 'businesslogic/getDeletedIds';\n    let modelName = Models.fixCollectionName(collectionName, true);\n    return this.rq.post(url, { modelName, ids: data.map(e => e._id) }).pipe(\n      map(retVal => {\n        if (retVal) {\n          return retVal || [];\n        }\n        return [];\n      })\n    );\n  }\n\n  getOfflineEntitiesCount() {\n    return this.uploadDatabaseOrGetCount(true);\n  }\n\n  uploadDatabase(progressEmitter?: EventEmitter<number>) {\n    return this.uploadDatabaseOrGetCount(false, progressEmitter);\n  }\n\n  uploadDatabaseOrGetCount(returnCount: boolean, progressEmitter?: EventEmitter<number>) {\n    let total = 0;\n    let count = 0;\n    let offlineData = {};\n\n    if (!this.isUploadingDatabase || this.network.isOffline()) {\n      this.isUploadingDatabase = true;\n      let collections = this.coreConfig.getSyncedCollections();\n\n      return this.cache.getDatabaseCollection<ICustomModel>('custommodels').then(custommodels => {\n        if (collections && collections.length > 0) {\n          collections = cloneDeep(collections);\n          collections = collections.concat(custommodels.map(c => ({ name: c.name })));\n          let promisesCount = collections.map(entry => {\n            return () =>\n              this.cache.getDatabaseCollection(entry.name).then(data => {\n                data = data.filter(e => this.isOfflineEntity(e) && (e as any).status !== 'draft');\n                offlineData[entry.name] = data;\n                total += data.length;\n              });\n          });\n          return this.promise.sequential(promisesCount).then(() => {\n            if (returnCount) {\n              this.isUploadingDatabase = false;\n              return total;\n            } else {\n              this.log.log('uploadDatabase', 'total', total);\n              if (progressEmitter) {\n                progressEmitter.emit(total > 0 ? (count / total) * 100 : 0);\n              }\n              let promises: Array<any> = [];\n              if (total > 0) {\n                collections.forEach(entry => {\n                  let data = offlineData[entry.name];\n                  data.forEach(entity => {\n                    promises.push(() => {\n                      let offlineId = entity._id;\n                      entity = { ...entity };\n                      delete entity._id;\n                      return this.upsert(entry.name, entity)\n                        .toPromise()\n                        .then(retVal => {\n                          count += 1;\n                          if (progressEmitter) {\n                            progressEmitter.emit((count / total) * 100);\n                          }\n                          this.log.log('uploadDatabase', 'count', count);\n                          return this.cache.replaceFromDatabaseCollection(entry.name, offlineId, retVal);\n                        });\n                    });\n                  });\n                });\n              }\n              return this.promise.sequential(promises).then(() => {\n                setTimeout(() => {\n                  if (progressEmitter) {\n                    progressEmitter.emit(100);\n                  }\n                }, 300);\n                this.isUploadingDatabase = false;\n                return total;\n              });\n            }\n          });\n        }\n      });\n    }\n    return Promise.resolve(returnCount ? 0 : null);\n  }\n\n  isOfflineEntity(entity: IEntity) {\n    return entity && entity._id && this.isOfflineId(entity._id);\n  }\n\n  isOfflineId(id: string) {\n    return id && id.startsWith && id.startsWith(Cache.OFFLINE_PREFIX);\n  }\n\n  getAllOffline(collectionName: string, offlineOnly: boolean, search?: string, filters?: Filters, sorts?: Array<ISort>, skip = 0, limit = 20, customFilter = null, noCount: boolean = false): Observable<any> {\n    return from(\n      this.cache.getDatabaseCollection(collectionName).then(data => {\n        let model = Models.getModelByCollectionName(collectionName);\n        if (offlineOnly) {\n          data = data.filter(d => this.isOfflineEntity(d));\n        }\n\n        if (filters && filters.length > 0) {\n          let newData: Array<IEntity> = [];\n          filters.forEach(fs => {\n            let subData = [...data];\n            fs.filter(f => f.removeFromOffline !== true).forEach(f => {\n              subData = subData.filter(e => {\n                let value = isArray(f.value) && isObject(f.value[0]) ? lodashMap(f.value, '_id') : isArray(f.value) ? f.value : isObject(f.value) ? f.value._id : f.value;\n                if (e && e[f.field] !== undefined && e[f.field] !== null) {\n                  switch (f.operator._id) {\n                    case 'eq':\n                      return isEqual(e[f.field], value);\n                    case 'neq':\n                      return !isEqual(e[f.field], value);\n                    case 'inq':\n                      return intersection([].concat(e[f.field]), [].concat(value)).length > 0;\n                    case 'nin':\n                      return intersection([].concat(e[f.field]), [].concat(value)).length <= 0;\n                    case 'gt':\n                      return e[f.field] > value;\n                    case 'gte':\n                      return e[f.field] >= value;\n                    case 'lt':\n                      return e[f.field] < value;\n                    case 'lte':\n                      return e[f.field] <= value;\n                    case 'nearSphere':\n                      (e as any).distance = this.geoloc.getDistance(e[f.field][1], e[f.field][0], value[1], value[0]);\n                      return (e as any).distance < f.max;\n                      break;\n                    case 'exists':\n                      return !isNullOrUndefined(e[f.field]);\n                      break;\n                  }\n                } else {\n                  switch (f.operator._id) {\n                    case 'neq':\n                    case 'nin':\n                      return true;\n\n                    case 'inq':\n                      return value && value.indexOf(null) >= 0;\n                  }\n                }\n              });\n            });\n            newData = [...newData, ...subData];\n          });\n          data = uniqBy(newData, e => e._id);\n        }\n\n        if (search && model && model.searchableFields) {\n          data = data.filter(d => {\n            if (\n              model.searchableFields.some(\n                name =>\n                  d[name] &&\n                  d[name]\n                    .toString()\n                    .toUpperCase()\n                    .indexOf(search.toUpperCase()) >= 0\n              )\n            ) {\n              return true;\n            }\n            return false;\n          });\n        }\n        if (filters && filters.some(fs => fs.some(f => f.operator._id === 'nearSphere'))) {\n          data = orderBy(data, ['distance']);\n        }\n        if (sorts) {\n          data = orderBy(data, sorts.map(s => s.colId), sorts.map(s => s.sort));\n        }\n        let total = data.length;\n        if (limit > 0) {\n          skip = skip || 0;\n          data = data.slice(skip, skip + limit);\n        }\n        return noCount ? data : { count: total, data: data };\n      })\n    );\n  }\n\n  aggregateQuery(collectionName: string, filters?: Filters, aggregateOptions?: Array<any>, search?: string, excludedFields?: Array<any>, includeCount = false, cacheId: string = null, customFilter?: any, subQuery?: SubQuery, aggregateOptionsOffline?: any) {\n    let obs: Observable<any>;\n    collectionName = Models.fixCollectionName(collectionName, true);\n    if (this.network.isOffline()) {\n      if (cacheId) {\n        obs = from(this.localForage.get(cacheId));\n      } else if (aggregateOptionsOffline) {\n        obs = from(\n          this.cache.getDatabaseCollection(collectionName).then(data => {\n            data = aggregateOptionsOffline(data);\n            if (includeCount) {\n              return { data: [{ count: data.length, data: data }] };\n            } else {\n              return { data: data };\n            }\n          })\n        );\n      } else {\n        obs = of({ count: 0, data: [] });\n      }\n    } else if (collectionName === 'aggregateLogs') {\n      return this.aggregateLogs(aggregateOptions);\n    } else {\n      let url = this.config.apiUrl + 'businesslogic/aggregateQuery';\n      let query: Query = this.getAggregateQuery(collectionName, filters, aggregateOptions, search, excludedFields, includeCount, customFilter, subQuery);\n      obs = this.rq.post(url, { params: query }).pipe(\n        map(retVal => {\n          if (cacheId) {\n            this.localForage.set(cacheId, retVal);\n          }\n          return retVal;\n        })\n      );\n    }\n\n    return obs.pipe(\n      map((retVal: any) => {\n        let data = [];\n        if (retVal && retVal.data && retVal.data.length > 0) {\n          if (includeCount) {\n            data = retVal.data[0];\n          } else {\n            data = retVal.data;\n          }\n        }\n        return data;\n      })\n    );\n  }\n\n  aggregateQueries(queries: Array<Query>, includeCount = false, cacheId: string = null) {\n    let obs: Observable<any>;\n    if (this.network.isOffline()) {\n      if (cacheId) {\n        obs = from(this.localForage.get(cacheId));\n      } else {\n        obs = of({ count: 0, data: [] });\n      }\n    } else {\n      let url = this.config.apiUrl + 'businesslogic/aggregateQueries';\n      obs = this.rq.post(url, queries).pipe(\n        map((retVal: { data: Array<any> }) => {\n          let finalArray = Array(queries.length);\n          for (let i = 0; i < finalArray.length; i++) {\n            finalArray[i] = [];\n          }\n          if (retVal && retVal.data && retVal.data.some(d => isObject(d.doc))) {\n            retVal.data.forEach((d: { index: number; doc: any }) => {\n              finalArray[d.index] = finalArray[d.index] || [];\n              finalArray[d.index].push(d.doc);\n            });\n            retVal.data = finalArray;\n          } else if (retVal && isArray(retVal.data) && retVal.data.length === 0) {\n            retVal.data = finalArray;\n          }\n\n          if (cacheId) {\n            this.localForage.set(cacheId, retVal);\n          }\n          return retVal;\n        })\n      );\n    }\n\n    return obs.pipe(\n      map((retVal: any) => {\n        let data = [];\n        if (retVal && retVal.data && retVal.data.length > 0) {\n          if (includeCount) {\n            data = retVal.data[0];\n          } else {\n            data = retVal.data;\n          }\n        }\n        return data;\n      })\n    );\n  }\n\n  getAggregateQuery(collectionName: string, filters?: Filters, aggregateOptions?: Array<any>, search?: string, excludedFields?: Array<any>, includeCount = false, customFilter?: any, subQuery?: SubQuery) {\n    let match = {};\n    let project = {};\n    let filterWhere = null;\n    let searchWhere = null;\n    let defaultFields = [];\n    let query: Query = <Query>{\n      collectionName: Models.fixCollectionName(collectionName, true),\n      includeCount\n    };\n    if (filters && filters.length > 0) {\n      filterWhere = Models.exportWhere(collectionName, filters, excludedFields);\n    }\n\n    if (search) {\n      searchWhere = Models.exportSearch(collectionName, search);\n    }\n\n    if (searchWhere && filterWhere) {\n      query.where = { and: [searchWhere, filterWhere] };\n    } else if (searchWhere) {\n      query.where = searchWhere;\n    } else if (filterWhere) {\n      query.where = filterWhere;\n    }\n\n    if (customFilter && query.where) {\n      query.where = { and: [query.where, customFilter] };\n    } else if (customFilter) {\n      query.where = customFilter;\n    }\n    query.where = query.where || {};\n\n    if (defaultFields && defaultFields.length > 0) {\n      defaultFields.forEach((field, i) => {\n        project[field] = 1;\n      });\n    }\n\n    if (!isEmpty(project)) {\n      aggregateOptions.unshift({ $project: project });\n    }\n    if (!isEmpty(match)) {\n      aggregateOptions.unshift({ $match: match });\n    }\n\n    query.options = aggregateOptions;\n    query.subQuery = Models.exportSubQuery(collectionName, filters, true);\n    if (subQuery) {\n      query.subQuery = subQuery;\n    }\n    return query;\n  }\n\n  aggregateLogs(stages?: Array<any>, groups?: Array<string>, userIds?: Array<string>) {\n    let url = this.config.apiUrl + 'AdminDashboard/aggregateLogs';\n    return this.rq.post(url, { stages, groups, userIds });\n  }\n\n  textSearch(query: string, collectionName: string) {\n    let url = this.config.apiUrl + 'businesslogic/textSearch';\n    return this.rq.post(url, { query, modelName: collectionName });\n  }\n\n  createFile(file: File, group: string | Array<string>, hideMobile = true, fileName?: string, tenantRef?: string) {\n    return this.upsert('files', {\n      _downloadURL: file,\n      _filename: file.name,\n      group: group,\n      hideMobile: hideMobile,\n      mimeType: file.type,\n      size: file.size,\n      _tenantRef: tenantRef\n    });\n  }\n\n  getFileUploader(fileTypes?, maxFileSize?) {\n    let options: any = {\n      maxFileSize: maxFileSize,\n      url: this.config.uploadUrl\n    };\n    // if (fileTypes && fileTypes.length > 0) {\n    //     options.allowedFileType = fileTypes;\n    // }\n    return new FileUploader(options);\n  }\n\n  execute(params) {\n    let url = this.config.apiUrl + 'Endpoints/execute';\n    return this.rq.post(url, { params });\n  }\n\n  undoOperation(operationId: string) {\n    let url = this.config.apiUrl + 'operation/undoDelete';\n    return this.rq.post(url, { operationId });\n  }\n\n  getMarkers(locations: Array<Location>) {\n    return locations\n      .filter((l: Location) => l._geoloc && l._geoloc.length > 1)\n      .map((l: Location) => {\n        return {\n          _id: l._id,\n          address: l.address,\n          latitude: l._geoloc[1],\n          longitude: l._geoloc[0],\n          title: l.title,\n          color: l.status === 'place' ? 'success' : l.status === 'file' ? 'info' : l.status === 'error' ? 'danger' : l.status === 'prediction' ? 'stable' : 'dark'\n        };\n      });\n  }\n\n  getUserOrLocationStat(\n    id: string | Array<string>,\n    mode: string,\n    customFilter?: any\n  ): Observable<\n    Array<{\n      _id: string;\n      booked: number;\n      count: number;\n      finished: number;\n      archived: number;\n      validated: number;\n      rejected: number;\n      tobevalidated: number;\n      available: number;\n    }>\n  > {\n    let value: Array<any> = <any>(isString(id) ? [{ _id: id }] : id);\n    let ref = mode === 'campaign' ? 'descriptionRef' : mode === 'location' ? 'locationRef' : 'ownerRef';\n    let filters = [[{ field: ref, operator: { _id: 'inq' }, value: value }]];\n\n    let options = [\n      {\n        $project: {\n          _id: '$' + ref,\n          booked: { $cond: { if: { $eq: ['$status', 'booked'] }, then: 1, else: 0 } },\n          finished: { $cond: { if: { $eq: ['$status', 'finished'] }, then: 1, else: 0 } },\n          archived: { $cond: { if: { $eq: ['$status', 'archived'] }, then: 1, else: 0 } },\n          validated: { $cond: { if: { $eq: ['$validated', true] }, then: 1, else: 0 } },\n          rejected: { $cond: { if: { $eq: ['$validated', false] }, then: 1, else: 0 } },\n          finishedDate: '$finishedDate'\n        }\n      },\n      {\n        $group: {\n          _id: '$_id',\n          booked: { $sum: '$booked' },\n          finished: { $sum: '$finished' },\n          archived: { $sum: '$archived' },\n          validated: { $sum: '$validated' },\n          rejected: { $sum: '$rejected' },\n          latest: { $max: '$finishedDate' },\n          count: { $sum: 1 }\n        }\n      }\n    ];\n    return this.aggregateQuery('missions', filters, options, null, null, false, null, customFilter).pipe(\n      map((stats: any) => {\n        if (stats && stats.length > 0) {\n          stats[0].available = (stats[0].count || 0) - (stats[0].finished || 0) - (stats[0].booked || 0) - (stats[0].archived || 0);\n          stats[0].tobevalidated = (stats[0].finished || 0) - (stats[0].validated || 0) - (stats[0].rejected || 0);\n        }\n        return stats;\n      })\n    );\n  }\n\n  setTimescale(filters: Filters, timescale: string, dateField = 'finishedDate', endDate?: Date | string, previous: boolean = false) {\n    if (timescale) {\n      filters = filters || [];\n      filters.forEach(fs => {\n        fs = fs || [];\n        remove(fs, (f: any) => f.field === dateField);\n        fs.push({\n          field: dateField,\n          operator: { _id: 'between', interval: true },\n          value: getStartAndEndDates(timescale, endDate, undefined, undefined, previous)\n        });\n      });\n    }\n  }\n\n  private _hasFiles(entity, suffixs: Array<string> = []): boolean {\n    let retVal = false;\n    for (let prop in entity) {\n      if (entity.hasOwnProperty(prop) && this.files.isImageFile(entity[prop])) {\n        retVal = true;\n      }\n      forEach(suffixs, suffix => {\n        if (suffix) {\n          let object = get(entity, prop + suffix);\n          if (isArray(object)) {\n            // for multiphoto field, value is an array;\n            let extraDataSuffix = '.extraData';\n            let extraData = get(entity, prop + extraDataSuffix);\n            object.forEach((v, index) => {\n              if (this.files.isImageFile(v)) {\n                retVal = true;\n              }\n              if (extraData && extraData[index] && extraData[index].edit) {\n                if (this.files.isImageFile(extraData[index].edit)) {\n                  retVal = true;\n                }\n              }\n            });\n          } else {\n            if (this.files.isImageFile(get(entity, prop + suffix))) {\n              retVal = true;\n            }\n          }\n        }\n      });\n    }\n    return retVal;\n  }\n\n  private _getFileProperties(entity, suffixs: Array<string> = []): Array<string> {\n    let retVal = [];\n    for (let prop in entity) {\n      if (entity.hasOwnProperty(prop) && this.files.isImageFile(entity[prop])) {\n        retVal.push(prop);\n      }\n      forEach(suffixs, suffix => {\n        if (suffix) {\n          let objectPath = get(entity, prop + suffix);\n          // for multiphoto field, value is an array; and for todo with linked multi photo we need to do it to\n          if (isArray(objectPath)) {\n            let extraDataSuffixs = ['.extraData', '.value.fieldExtra'];\n            extraDataSuffixs.forEach(extraDataSuffix => {\n              let extraData = get(entity, prop + extraDataSuffix);\n              objectPath.forEach((v, index) => {\n                if (this.files.isImageFile(v)) {\n                  retVal.push(prop + suffix + '[' + index + ']');\n                }\n                if (extraData && extraData[index] && extraData[index].edit) {\n                  if (this.files.isImageFile(extraData[index].edit)) {\n                    retVal.push(prop + extraDataSuffix + '[' + index + ']' + '.edit');\n                  }\n                }\n              });\n            });\n          } else {\n            if (this.files.isImageFile(objectPath)) {\n              retVal.push(prop + suffix);\n            }\n          }\n        }\n      });\n    }\n    retVal = uniq(retVal);\n    return retVal;\n  }\n}\n\nexport function getStartAndEndDates(timescale, endDate?: Date | string, amount?: number, notsliding?: boolean, previous: boolean = false) {\n  let lastDate = endDate || new Date();\n  amount = amount || 7;\n  let period = 'days';\n  let startof = 'day';\n  switch (timescale) {\n    case 'last30days':\n      amount = 30;\n      period = 'days';\n      break;\n    case 'last90days':\n      amount = 90;\n      period = 'days';\n      break;\n    case 'last365days':\n      amount = 365;\n      period = 'days';\n      break;\n    case 'lastweek':\n      amount = 0;\n      period = 'weeks';\n      break;\n    case 'lastmonth':\n      amount = 0;\n      period = 'months';\n      startof = 'month';\n      break;\n    case 'lastquarter':\n      amount = 2;\n      period = 'months';\n      startof = 'month';\n      break;\n    case 'lastyear':\n      amount = 0;\n      period = 'years';\n      startof = 'year';\n      break;\n    case 'last7days':\n      amount = 7;\n      period = 'days';\n      startof = 'day';\n      break;\n\n    default:\n      if (notsliding) {\n        amount = amount ? amount - 1 : 0;\n        period = timescale;\n        startof = timescale;\n      } else {\n        amount = amount || 1;\n        period = timescale;\n        startof = 'day';\n      }\n\n      break;\n  }\n\n  let dateFrom = startOf(dateAdd(utc(toDate(lastDate)), period, -amount), startof);\n  let dateTo = toDate(lastDate);\n\n  if (previous) {\n    dateFrom = dateAdd(dateFrom, period, -amount);\n    dateTo = dateAdd(dateTo, period, -amount);\n  }\n\n  //use .utc() to get the startOf with no offset issues\n  return [dateFrom.toISOString(), dateTo.toISOString()];\n}\n","import { Models } from '../../services/models/models.service';\nimport { IFormField } from '@shared/stencil';\n\nexport function Editable(className: string, config: IFormField) {\n  return function decoratorFactory(target: Object, decoratedPropertyName?: string): void {\n    config.name = config.name || decoratedPropertyName;\n    config.filterName = config.filterName || config.name;\n    if (!config.title) {\n      config.title = config.name.toUpperCase();\n    }\n    if (config.collectionName && !config.tag && config.name !== '_acl.groups.r' && config.collectionName !== 'groups') {\n      config.filterName += 'Ref';\n    }\n\n    if (Models) {\n      Models.addFormField(className, config);\n    }\n  };\n}\n","import { Models } from '../../services/models/models.service';\n\nexport function Searchable(className: string) {\n  return function decoratorFactory(target: Object, decoratedPropertyName: string): void {\n    if (Models) {\n      Models.addSearchableField(className, decoratedPropertyName);\n    }\n  };\n}\n","import { Entity } from '../../interfaces/entity/entity.interface';\nimport { Models } from '../../services/models/models.service';\n\nexport interface IModelConfig {\n  collectionName?: string;\n  className: string;\n  fields?: Array<string>;\n  include?: any;\n  searchSubquery?: { collectionName: string; field: string; values: string };\n  feathersService?: string;\n  detailComponent?: string;\n  icon?: string;\n}\n\nexport function Model(config: IModelConfig) {\n  return function(target: typeof Entity) {\n    if (Models) {\n      Models.setCollectionName(config.className, config.collectionName, config.fields, config.include, config.searchSubquery, config.feathersService, target, null, config.detailComponent, config.icon);\n    }\n  };\n}\n\nexport function ModelExtended(config: { baseClass: string; extendedClass: string }) {\n  return function(target: any) {\n    Models.addBaseModel(config.extendedClass, config.baseClass, target);\n  };\n}\n","import { IFormField, MOBILE_FORM_FIELDS_ALL, FormFieldType, ICondition, IConditionalField } from '@shared/stencil';\n\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { CONDITION_TYPES, ROLES, ROLES_ASK, ROLES_CONDITIONS } from './icondition.interface';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\n\nimport { map } from 'lodash-es';\n\nexport { CONDITION_TYPES, ROLES, ROLES_ASK, ROLES_CONDITIONS };\n\nlet conditions = {\n  isNotField: 'type!=\"field\"',\n  isField: 'type==\"field\"',\n  isTag: 'type==\"tags\"',\n  isGroup: 'type==\"groups\"',\n  isSelect: 'field.type==\"selectmulti\" or field.type==\"selectbuttonsmulti\"',\n  isToggle: 'field.type==\"checkbox\" or field.type==\"toggle\"',\n  isAutocomplete: 'field.type==\"select\" or field.type==\"selectbuttons\" or field.type==\"autocomplete\"',\n  isFieldSimple: 'type==\"field\" and (field.type==\"text\" or field.type==\"email\" or field.type==\"number\" or field.type==\"formula\" or field.type==\"date\" or field.type==\"tel\" or field.type==\"time\" or field.type==\"range\" or field.type==\"starrating\")',\n  isFieldWithValues: 'type==\"field\" and (field.type==\"checkbox\" or field.type==\"toggle\" or field.type==\"select\" or field.type==\"selectmulti\" or field.type==\"selectbuttons\" or field.type==\"selectbuttonsmulti\" or field.type==\"autocomplete\" or field.type==\"selectimage\")'\n};\n\nexport function getGroupsTransform(res: ResponseObject) {\n  if (res.data && res.data.filter) {\n    res.data = res.data.filter(g => ROLES.indexOf(g._id) < 0 && g.isRole !== true);\n  }\n  return res;\n}\n\nexport function isNotInformationField(m) {\n  return m.type !== FormFieldType.information;\n}\n\nexport function getFormFieldValues() {\n  return map(MOBILE_FORM_FIELDS_ALL.filter(isNotInformationField), 'type');\n}\n\n@Model({ className: 'Condition' })\nexport class Condition extends ICondition {\n  @Editable('Condition', { type: FormFieldType.text, required: true })\n  title: string;\n\n  @Editable('Condition', {\n    type: FormFieldType.autocomplete,\n    translate: true,\n    values: CONDITION_TYPES,\n    required: true\n  })\n  type: string;\n\n  @Editable('Condition', {\n    type: FormFieldType.autocomplete,\n    condition: conditions.isField,\n    required: true,\n    idAttributeName: 'name'\n  })\n  field?: IFormField;\n\n  // { condition: conditions.isSelect, values: ['in', 'notin', 'containsall'] }\n  // contains all : check that all values are present.\n  // Deactivated for the moment to be compatible with the V2\n  @Editable('Condition', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    multiple: false,\n    translate: true,\n    condition: 'type',\n    conditionalValues: [{ condition: conditions.isNotField, values: ['in', 'notin'] }, { condition: conditions.isSelect, values: ['in', 'notin'] }, { condition: conditions.isToggle, values: ['equals', 'notequals'] }, { condition: conditions.isAutocomplete, values: ['equals', 'in', 'notin'] }],\n    defaultValues: ['equals', 'notequals', 'greaterthan', 'lessthan']\n  })\n  operator: string;\n\n  @Editable('Condition', {\n    type: FormFieldType.autocomplete,\n    condition: conditions.isTag,\n    tag: true,\n    multiple: true,\n    collectionName: 'locations',\n    required: true\n  })\n  tags?: Array<string>;\n\n  @Editable('Condition', {\n    title: 'GROUPS',\n    required: true,\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    condition: conditions.isGroup,\n    multiple: true,\n    clearable: false\n  })\n  group?: Array<string>;\n\n  @Editable('Condition', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    condition: conditions.isFieldWithValues,\n    dynamicValues: 'field.values',\n    defaultValues: ['true', 'false'],\n    multiple: true\n  })\n  values: Array<any>;\n\n  @Editable('Condition', {\n    dynamicType: 'field.type',\n    defaultType: FormFieldType.text,\n    required: true,\n    condition: conditions.isFieldSimple\n  })\n  value: any;\n}\n\n@Model({ className: 'ConditionalField' })\nexport class ConditionalField extends IConditionalField {\n  @Editable('ConditionalField', { type: FormFieldType.text, readonly: true, title: 'FIELDIF' })\n  fieldTitle: string;\n\n  @Editable('ConditionalField', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    multiple: false,\n    translate: true,\n    title: 'FIELDIS',\n    conditionalValues: [{ condition: conditions.isNotField, values: ['in', 'notin'] }, { condition: conditions.isSelect, values: ['in', 'notin'] }, { condition: conditions.isToggle, values: ['equals', 'notequals'] }, { condition: conditions.isAutocomplete, values: ['equals', 'in', 'notin'] }],\n    defaultValues: ['equals', 'notequals', 'greaterthan', 'lessthan']\n  })\n  operator: string;\n\n  @Editable('ConditionalField', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    condition: conditions.isFieldWithValues,\n    dynamicValues: 'field.values',\n    defaultValues: ['true', 'false'],\n    multiple: true\n  })\n  values: Array<any>;\n\n  @Editable('ConditionalField', {\n    dynamicType: 'field.type',\n    defaultType: FormFieldType.text,\n    required: true,\n    condition: conditions.isFieldSimple\n  })\n  value: any;\n\n  @Editable('ConditionalField', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    title: 'FIELDTYPE',\n    values: getFormFieldValues(),\n    translate: true\n  })\n  newFieldType: string;\n\n  @Editable('ConditionalField', { type: FormFieldType.text, required: true, title: 'TITLE' })\n  newfieldTitle: string;\n\n  @Editable('ConditionalField', { title: 'INSTRUCTIONS', type: FormFieldType.textarea })\n  newfieldDescription: string;\n\n  @Editable('ConditionalField', { title: 'MANDATORY', type: FormFieldType.checkbox })\n  newFieldRequired: boolean;\n}\n","export const ADMIN_FILES_TYPE = ['locations', 'user', 'geofilters', 'campaignfilters', 'products', 'locationtypes'];\nexport const FORMCREATOR_FILES_TYPE = ['pages'];\n\nexport const FORM_FILES_IMAGE_MIME = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'image/bmp'];\nexport const FORM_FILES_IMAGE_FILTER = [[{ field: 'mimeType', operator: { _id: 'inq' }, value: FORM_FILES_IMAGE_MIME }]];\n\nexport const FORM_FILES_GROUP_FILTER = [[{ field: 'mimeType', operator: { _id: 'inq' }, value: FORM_FILES_IMAGE_MIME }, { field: 'tags', operator: { _id: 'inq' }, value: ['group'] }]];\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { FormFieldType, ITenant, ILocationKpi } from '@shared/stencil';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FORM_FILES_IMAGE_FILTER } from '../constants/constants.interface';\n\n@Model({\n  className: 'Tenant',\n  collectionName: 'tenants',\n  fields: ['*'],\n  include: [],\n  icon: 'yo-company'\n})\nexport class Tenant extends ITenant {\n  @Editable('Tenant', { required: true, type: FormFieldType.text })\n  @Searchable('Tenant')\n  name: string;\n\n  @Editable('Tenant', { required: false, type: FormFieldType.text })\n  @Searchable('Tenant')\n  title: string;\n\n  @Editable('Tenant', { required: false, type: FormFieldType.textarea })\n  @Searchable('Tenant')\n  description: string;\n\n  @Editable('Tenant', {\n    type: FormFieldType.autocomplete,\n    filters: FORM_FILES_IMAGE_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    clearable: true,\n    fixedPosition: true,\n    maxWidth: 160,\n    maxHeight: 160,\n    crop: 'circle',\n    collectionName: 'files',\n    title: 'ICON',\n    columnDefinition: { name: '_downloadURL' },\n    filterable: false,\n    sortable: false\n  })\n  icon: any;\n\n  @Editable('Tenant', { type: FormFieldType.toggle })\n  ssoOnly: boolean;\n\n  @Editable('Tenant', { type: FormFieldType.toggle })\n  protected: boolean;\n\n  @Editable('Tenant', {\n    type: FormFieldType.json,\n    filterable: false,\n    sortable: false,\n    suppressExport: true\n  })\n  locationKpis?: Array<ILocationKpi>;\n}\n","import { ILocationType, FormFieldType } from '@shared/stencil';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { getGroupsTransform, ROLES_CONDITIONS } from '../condition/condition.interface';\nimport { Tenant } from '../tenant/tenant.interface';\n\n@Model({\n  className: 'LocationType',\n  collectionName: 'locationtypes',\n  fields: ['*'],\n  include: ['_tenant'],\n  icon: 'yo-categories'\n})\nexport class LocationType extends ILocationType {\n  // export class LocationType implements IEntity {\n  @Editable('LocationType', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 1\n  })\n  _id?: string;\n\n  @Editable('LocationType', { type: FormFieldType.text, required: true, exportOrder: 2 })\n  @Searchable('LocationType')\n  name: string;\n\n  @Editable('LocationType', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    allowCustomTag: true,\n    collectionName: 'groups',\n    multiple: true,\n    clearable: false,\n    required: true,\n    idOnly: true,\n    filters: [[{ field: 'type', operator: { _id: 'nin' }, value: ['plan'] }, { field: 'isRole', operator: { _id: 'neq' }, value: true }]],\n    hiddenFields: ['isRole', 'type'],\n    mapTransform: getGroupsTransform\n  })\n  group?: Array<any>;\n\n  @Editable('LocationType', {\n    type: FormFieldType.number,\n    readonly: true,\n    visible: false,\n    forceExport: true,\n    exportOrder: 4\n  })\n  count?: number;\n\n  @Editable('LocationType', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    condition: [ROLES_CONDITIONS.isAdmin],\n    collectionName: 'tenants',\n    multiple: false,\n    columnDefinition: { name: 'name' }\n  })\n  _tenant: Tenant;\n  _tenantRef?: string;\n}\n","import { Models } from '../../services/models/models.service';\n\nexport function Mapping(className: string, config: { order: number }) {\n  return function decoratorFactory(target: Object, decoratedPropertyName: string): void {\n    if (Models) {\n      Models.addMappingField(className, decoratedPropertyName, config.order);\n    }\n  };\n}\n","import { IProperty } from '../entity/entity.interface';\nimport { FormFieldType, ILocation, IKpiData } from '@shared/stencil';\nimport { LocationType } from '../location-type/location-type.interface';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { Mapping } from '../../decorators/mapping/mapping.decorator';\nimport { ROLES_CONDITIONS } from '../condition/icondition.interface';\nimport { Tenant } from '../tenant/tenant.interface';\n\nexport const LOCATION_GEOCODESTATUS = ['file', 'geocoder', 'place', 'prediction', 'error'];\n\nexport function onAddressChange(value, data, field) {\n  if (value && value._geoloc) {\n    data._geoloc = value._geoloc;\n    (<any>field)._geoloc = value._geoloc;\n    data.address = value.address;\n  }\n}\n\nexport function onTypeChange(value, data) {\n  if (value && value._id) {\n    data.typeRef = value._id;\n  }\n}\n\n@Model({\n  className: 'Location',\n  collectionName: 'locations',\n  fields: ['*', 'type.name'],\n  include: ['type', '_tenant'],\n  icon: 'yo-store'\n})\nexport class Location implements ILocation {\n  @Mapping('Location', { order: 12 })\n  @Editable('Location', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 13,\n    filterable: false\n  })\n  _id: string;\n\n  @Mapping('Location', { order: 11 })\n  @Editable('Location', {\n    type: FormFieldType.text,\n    columnDefinition: { width: 100 },\n    exportOrder: 12\n  })\n  @Searchable('Location')\n  clientid: string;\n\n  @Mapping('Location', { order: 0 })\n  @Editable('Location', {\n    required: true,\n    type: FormFieldType.text,\n    exportOrder: 1,\n    sortable: true\n  })\n  @Searchable('Location')\n  title: string;\n\n  @Mapping('Location', { order: 1 })\n  @Editable('Location', {\n    required: true,\n    type: FormFieldType.address,\n    filterName: '_geoloc',\n    columnDefinition: { width: 350 },\n    showMap: true,\n    exportOrder: 2,\n    onChange: onAddressChange\n  })\n  @Searchable('Location')\n  address: string;\n\n  @Mapping('Location', { order: 15 })\n  @Editable('Location', {\n    type: FormFieldType.photo,\n    filterable: false,\n    title: 'PHOTO',\n    columnDefinition: { width: 52 },\n    exportOrder: 16,\n    sortable: false,\n    allowLibrary: true\n  })\n  imageData?: string;\n\n  @Mapping('Location', { order: 13 })\n  @Editable('Location', {\n    type: FormFieldType.checkbox,\n    columnDefinition: { width: 40 },\n    exportOrder: 14,\n    filterable: true\n  })\n  vip: boolean;\n\n  @Mapping('Location', { order: 9 })\n  @Editable('Location', {\n    title: 'LOCATIONTAGS',\n    type: FormFieldType.autocomplete,\n    tag: true,\n    collectionName: 'locations',\n    multiple: true,\n    subQuery: { field: 'locationRef', values: '_id' },\n    icon: 'yo-tag',\n    exportOrder: 10\n  })\n  tags: Array<string>;\n\n  @Mapping('Location', { order: 2 })\n  @Editable('Location', {\n    type: FormFieldType.autocomplete,\n    collectionName: 'locationtypes',\n    required: true,\n    columnDefinition: { name: 'name' },\n    exportOrder: 3,\n    filterableAdvanced: true,\n    onChange: onTypeChange,\n    filterable: true\n  })\n  type: LocationType;\n  typeRef: string;\n\n  @Mapping('Location', { order: 14 })\n  @Editable('Location', {\n    type: FormFieldType.autocomplete,\n    collectionName: 'missiondescriptions',\n    clearable: true,\n    multiple: true,\n    filterable: false,\n    sortable: false,\n    suppressExport: true,\n    filters: [[{ field: 'archived', operator: { _id: 'neq' }, value: true }]],\n    hiddenFields: ['archived']\n  })\n  missiondescriptions?;\n  missiondescriptionsRef?: Array<string>;\n\n  @Mapping('Location', { order: 10 })\n  @Editable('Location', {\n    title: 'NOTIFICATIONEMAILS',\n    type: FormFieldType.emailreport,\n    showUsers: true,\n    stateful: false,\n    tab: 'INFORMATION',\n    exportOrder: 11,\n    filterableAdvanced: true\n  })\n  notificationemail?: Array<string>;\n\n  @Mapping('Location', { order: 5 })\n  @Editable('Location', {\n    type: FormFieldType.text,\n    tab: 'INFORMATION',\n    exportOrder: 6,\n    filterableAdvanced: true\n  })\n  @Searchable('Location')\n  contactname?: string;\n\n  @Mapping('Location', { order: 6 })\n  @Editable('Location', {\n    type: FormFieldType.email,\n    tab: 'INFORMATION',\n    exportOrder: 7,\n    filterableAdvanced: true\n  })\n  contactemail?: string;\n\n  @Mapping('Location', { order: 7 })\n  @Editable('Location', {\n    type: FormFieldType.text,\n    tab: 'INFORMATION',\n    exportOrder: 8,\n    filterableAdvanced: true\n  })\n  contactphone?: string;\n\n  @Mapping('Location', { order: 8 })\n  @Editable('Location', {\n    type: FormFieldType.textarea,\n    tab: 'INFORMATION',\n    exportOrder: 9,\n    filterableAdvanced: true\n  })\n  info?: string;\n\n  @Editable('Location', {\n    readonly: true,\n    type: FormFieldType.autocomplete,\n    values: LOCATION_GEOCODESTATUS,\n    clearable: false,\n    filterableAdvanced: true,\n    suppressExport: true\n  })\n  status?: string;\n\n  @Mapping('Location', { order: 4 })\n  @Editable('Location', {\n    visible: false,\n    exportOrder: 5,\n    forceExport: true,\n    filterable: false,\n    sortable: false\n  })\n  placesearch?: string;\n\n  @Mapping('Location', { order: 3 })\n  @Editable('Location', {\n    visible: false,\n    forceExport: true,\n    exportOrder: 4,\n    filterable: false,\n    sortable: false\n  })\n  _geoloc: [number, number];\n\n  @Editable('Location', {\n    type: FormFieldType.autocomplete,\n    tab: 'PROPERTIES',\n    allowCustomTag: true,\n    multiple: true,\n    filterable: false,\n    sortable: false,\n    suppressExport: true,\n    condition: ROLES_CONDITIONS.hasProductBatch\n  })\n  aisles?: string[];\n\n  @Editable('Location', {\n    type: FormFieldType.text,\n    tab: 'PROPERTIES',\n    condition: ROLES_CONDITIONS.hasProductBatch\n  })\n  smartTagId?: string;\n\n  @Editable('Location', {\n    type: FormFieldType.json,\n    tab: 'PROPERTIES',\n    filterable: false,\n    sortable: false,\n    suppressExport: true,\n    condition: ROLES_CONDITIONS.isAdmin\n  })\n  properties?: IProperty[];\n\n  distance?: number;\n  stats?: Array<{ title: string; value: number; color: string }>;\n\n  @Editable('Location', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    condition: [ROLES_CONDITIONS.isAdmin],\n    collectionName: 'tenants',\n    multiple: false,\n    columnDefinition: { name: 'name' }\n  })\n  _tenant?: Tenant;\n  _tenantRef?: string;\n\n  lastVisit?: Date;\n  countVisits?: number;\n\n  @Editable('Location', {\n    visible: false,\n    type: FormFieldType.toggle,\n    filterable: false,\n    invertedSort: true\n  })\n  hasAvailableMissions?: boolean;\n\n  @Editable('Location', {\n    visible: false,\n    type: FormFieldType.number,\n    filterable: false,\n    invertedSort: true\n  })\n  availableMissions?: number;\n\n  kpiData?: Array<IKpiData>;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IUser, IUserSettings, ISimpleUser, IRole, IRoles } from '@shared/stencil';\nimport { Location } from '../location/location.interface';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { getGroupsTransform, ROLES_CONDITIONS } from '../condition/condition.interface';\n\nimport { startCase } from 'lodash-es';\n\nlet conditions = {\n  isCreate: 'not getAttributeValue(\"_ect\")',\n  isUpdate: 'getAttributeValue(\"_ect\")',\n  isNotUpdateMultiple: 'not (getAttributeValue(\"_id\") == \"multiple\")',\n  //isTeam: ' isTeam == 1',\n  //isNotTeam: ' not (isTeam == 1)',\n  isNotSarahMartin: 'not (username == \"smartin@yoobic.com\")',\n  isNotYoobicAdmin: 'not (endsWith(getAttributeValue(\"username\"),\"@yoobic.com\") == 1 and length(\"_acl.groups.r\") == 0)'\n};\n\nexport function onUserLocationChange(value, data) {\n  if (!value) {\n    data.locationRef = null;\n  }\n}\n\n@Model({\n  className: 'User',\n  collectionName: 'user',\n  fields: ['*'],\n  include: ['location', '_tenant'],\n  icon: 'yo-user'\n})\nexport class User extends IUser {\n  @Editable('User', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 11\n  })\n  _id?: string;\n\n  @Editable('User', {\n    type: FormFieldType.photo,\n    filterable: false,\n    title: 'PHOTO',\n    columnDefinition: { width: 52 },\n    exportOrder: 10,\n    sortable: false,\n    allowLibrary: true\n  })\n  imageData?: string;\n\n  @Editable('User', {\n    required: true,\n    flex: 100,\n    type: FormFieldType.email,\n    sortable: true,\n    disableAutocomplete: true,\n    condition: conditions.isNotUpdateMultiple,\n    readonly: conditions.isUpdate,\n    exportOrder: 1\n  })\n  @Searchable('User')\n  username: string;\n\n  @Editable('User', {\n    required: false,\n    flex: 100,\n    type: FormFieldType.email,\n    disableAutocomplete: true,\n    exportOrder: 6\n  })\n  @Searchable('User')\n  email?: string;\n\n  @Editable('User', {\n    required: true,\n    type: FormFieldType.password,\n    secondary: true,\n    icon: 'yo-password',\n    disableAutocomplete: true,\n    condition: ROLES_CONDITIONS.isAdminOrClientAdmin,\n    filterable: false,\n    sortable: false,\n    exportOrder: 2\n  })\n  password?: string;\n\n  @Editable('User', {\n    required: true,\n    flex: 100,\n    type: FormFieldType.text,\n    sortable: true,\n    exportOrder: 4\n  })\n  @Searchable('User')\n  firstName?: string;\n\n  @Editable('User', {\n    flex: 100,\n    required: true,\n    type: FormFieldType.text,\n    sortable: true,\n    exportOrder: 5\n  })\n  @Searchable('User')\n  lastName?: string;\n\n  @Editable('User', {\n    required: true,\n    filterable: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    condition: [ROLES_CONDITIONS.isAdmin],\n    collectionName: 'tenants',\n    multiple: false,\n    columnDefinition: { name: 'name' }\n  })\n  _tenant: Tenant;\n\n  @Editable('User', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    title: 'TEAM',\n    exportOrder: 12,\n    condition: [conditions.isCreate, ROLES_CONDITIONS.isAdmin],\n    filterableAdvanced: true\n  })\n  isTeam?: boolean;\n\n  @Editable('User', {\n    title: 'USERTAGS',\n    type: FormFieldType.autocomplete,\n    tag: true,\n    collectionName: 'user',\n    readonly: ROLES_CONDITIONS.isNeitherAdminNorClientAdmin,\n    multiple: true,\n    icon: 'yo-flag',\n    subQuery: { field: 'ownerRef', values: '_id' },\n    exportOrder: 13\n  })\n  tags?: Array<string>;\n\n  @Editable('User', {\n    flex: 100,\n    required: true,\n    filterable: true,\n    readonly: ROLES_CONDITIONS.isNeitherAdminNorClientAdmin,\n    type: FormFieldType.autocomplete,\n    exportOrder: 15,\n    values: IRoles,\n    translate: true,\n    filterableAdvanced: true\n  })\n  role?: IRole;\n\n  @Editable('User', {\n    flex: 50,\n    type: FormFieldType.tel,\n    exportOrder: 7,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  telephone?: string;\n\n  @Editable('User', {\n    flex: 50,\n    type: FormFieldType.text,\n    exportOrder: 8,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  company?: string;\n\n  //@Editable('User', { flex: 100, type: FormFieldType.text, exportOrder: 16, filterableAdvanced: true })\n  position?: string;\n\n  @Editable('User', {\n    flex: 50,\n    type: FormFieldType.date,\n    suppressExport: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  dateOfBirth?: string;\n\n  @Editable('User', {\n    flex: 50,\n    type: FormFieldType.autocomplete,\n    values: ['MALE', 'FEMALE'],\n    translate: true,\n    suppressExport: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  gender?: string;\n\n  //@Editable('User', { type: FormFieldType.email, condition: conditions.isNotTeam, exportOrder: 17, filterableAdvanced: true })\n\n  @Editable('User', { type: FormFieldType.address, exportOrder: 9, advanced: true })\n  address?: any;\n\n  @Editable('User', {\n    title: 'LOCATION',\n    filterable: true,\n    type: FormFieldType.autocomplete,\n    onChange: onUserLocationChange,\n    collectionName: 'locations',\n    deleteOnHidden: false,\n    readonly: ROLES_CONDITIONS.isNotManager,\n    suppressExport: true,\n    clearable: true\n  }) //, conditions.isNotYoobicAdmin\n  location?: Location;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 14,\n    filterable: false\n  })\n  locationRef?: string;\n\n  @Editable('User', {\n    required: true,\n    name: '_acl.groups.r',\n    columnDefinition: { name: '_acl?.groups?.r', forceName: true },\n    title: 'GROUPS',\n    condition: <any>[ROLES_CONDITIONS.isAdminOrClientAdmin, <any>conditions.isNotSarahMartin, conditions.isNotYoobicAdmin],\n    type: FormFieldType.autocomplete,\n    allowCustomTag: true,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    multiple: true,\n    clearable: false,\n    exportOrder: 3,\n    deleteOnHidden: false,\n    mapTransform: getGroupsTransform\n  })\n  _aclGroupsR?: any;\n\n  @Editable('User', {\n    type: FormFieldType.date,\n    name: '_lmt',\n    title: 'LASTSEEN',\n    sortable: true,\n    filterable: true,\n    readonly: true,\n    suppressExport: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  lastSeen?: any;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: false,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  version?: any;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: false,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  mobileVersion?: any;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  platform?: any;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  language?: string;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: true,\n    filterable: false,\n    advanced: true\n  })\n  device?: string;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: true,\n    filterable: false,\n    advanced: true\n  })\n  uuid?: string;\n\n  @Editable('User', {\n    type: FormFieldType.text,\n    readonly: true,\n    suppressExport: true,\n    filterable: false,\n    advanced: true\n  })\n  target?: string;\n\n  @Editable('User', {\n    title: 'MAXWIDTH',\n    type: FormFieldType.number,\n    condition: ROLES_CONDITIONS.isAdmin,\n    suppressExport: true,\n    filterable: false\n  })\n  photoMaxWidth?: number;\n\n  @Editable('User', {\n    title: 'SSO',\n    type: FormFieldType.toggle,\n    condition: ROLES_CONDITIONS.isAdmin,\n    exportOrder: 18\n  })\n  sso?: boolean;\n\n  @Editable('User', {\n    type: FormFieldType.toggle,\n    condition: ROLES_CONDITIONS.isAdmin,\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  disableTracking?: boolean;\n\n  @Editable('User', {\n    type: FormFieldType.toggle,\n    condition: ROLES_CONDITIONS.isAdmin,\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  disableDatabaseSync?: boolean;\n\n  static getDisplayName(user: any): string {\n    if (user) {\n      let displayName = user.username;\n      if (user.firstName && user.lastName) {\n        displayName = startCase(user.firstName.toString().toLowerCase()) + ' ' + startCase(user.lastName.toString().toLowerCase());\n      } else if (user.first_name && user.last_name) {\n        displayName = startCase(user.first_name.toString().toLowerCase()) + ' ' + startCase(user.last_name.toString().toLowerCase());\n      } else if (user._socialIdentity && user._socialIdentity.facebook && user._socialIdentity.facebook.name) {\n        displayName = user._socialIdentity.facebook.name;\n      } else if (user.email) {\n        displayName = user.email;\n      } else if (user._socialIdentity && user._socialIdentity.facebook && user._socialIdentity.facebook.email) {\n        displayName = user._socialIdentity.facebook.email;\n      }\n      return displayName;\n    }\n    return '';\n  }\n\n  static getSimpleFields() {\n    return ['_id', 'imageData', 'firstName', 'lastName', 'email', 'telephone', 'username'];\n  }\n}\n\n@Model({ className: 'UserSettings' })\nexport class UserSettings extends IUserSettings {\n  //@Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, suppressExport: true, filterable: false, sortable: false })\n  useBigFonts: boolean;\n\n  // @Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, title: 'DISABLEHAPTICFEEDBACK', suppressExport: true, filterable: false, sortable: false })\n  disableHapticFeedback: boolean;\n\n  //@Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, suppressExport: true, filterable: false, sortable: false })\n  showScrollbars: boolean;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    header: 'NOTIFICATIONS',\n    flex: 100,\n    title: 'DISABLEALLEMAILS',\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  disableEmailNotifications: boolean;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    title: 'DISABLEALLPUSH',\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  disablePushNotifications: boolean;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    title: 'DISABLEALLSMS',\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  disableSmsNotifications: boolean;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  sendFinishedEmail: boolean;\n\n  @Editable('UserSettings', {\n    title: 'MAXWIDTH',\n    header: 'PHOTOS',\n    type: FormFieldType.number,\n    suppressExport: true,\n    filterable: false,\n    min: 600,\n    max: 10240\n  })\n  photoMaxWidth?: number;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    title: 'DELETEPHOTOSINALBUM',\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  deletePhotos: boolean;\n\n  @Editable('UserSettings', {\n    type: FormFieldType.toggle,\n    flex: 100,\n    header: 'MISSIONS',\n    title: 'ENABLEMISSIONLIVESYNC',\n    condition: ROLES_CONDITIONS.isAdmin,\n    suppressExport: true,\n    filterable: false,\n    sortable: false\n  })\n  enableMissionLiveSync: boolean;\n\n  //@Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, suppressExport: true, filterable: false, sortable: false })\n  allowPhotoEdit: boolean;\n\n  //@Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, suppressExport: true, filterable: false, sortable: false })\n  disablePhotoOrientationAutoFix: boolean;\n\n  //@Editable('UserSettings', { type: FormFieldType.toggle, flex: 100, header: 'SERVICES', suppressExport: true, filterable: false, sortable: false })\n  orderServicesByDate: boolean;\n\n  //@Editable('UserSettings', { type: FormFieldType.toggle, header: 'MISSIONS', flex: 100, suppressExport: true, filterable: false, sortable: false })\n  goToBasket: boolean;\n\n  // @Editable('UserSettings', {\n  //   type: FormFieldType.range,\n  //   header: 'FILTERS',\n  //   min: 1,\n  //   max: 400,\n  //   suppressExport: true,\n  //   filterableAdvanced: true\n  // })\n  radius: any;\n\n  // @Editable('UserSettings', { type: FormFieldType.autocomplete, values: momentTimeZone.tz.names() })\n  timezone: any;\n\n  // @Editable('UserSettings', { type: FormFieldType.selectbuttons, flex: 100, suppressExport: true, filterable: false, sortable: false, values: ['YES', 'NO'] })\n  // test;\n}\n\n@Model({ className: 'SimpleUser' })\nexport class SimpleUser extends ISimpleUser {\n  // export class SimpleUser implements IEntity {\n  @Editable('SimpleUser', { type: FormFieldType.text, visible: false })\n  _id?: string;\n\n  @Editable('SimpleUser', {\n    visible: true,\n    type: FormFieldType.photo,\n    filterable: false,\n    title: 'PHOTO',\n    columnDefinition: { width: 52 }\n  })\n  imageData: string;\n\n  @Editable('SimpleUser', { required: true, type: FormFieldType.email })\n  @Searchable('SimpleUser')\n  username: string;\n\n  @Editable('SimpleUser', { visible: true, required: true, type: FormFieldType.email })\n  @Searchable('SimpleUser')\n  email: string;\n\n  @Editable('SimpleUser', {\n    required: true,\n    type: FormFieldType.password,\n    condition: conditions.isCreate,\n    filterable: false,\n    sortable: false\n  })\n  password: string;\n}\n","import { Editable } from '../../decorators/editable/editable.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { FormFieldType, INotification } from '@shared/stencil';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { User } from '../user/user.interface';\n\n@Model({\n  className: 'Notification',\n  collectionName: 'notifications',\n  fields: ['*', 'sender._id', 'sender.firstName', 'sender.lastName', 'sender.username', 'sender.imageData', 'sender.email', 'sender.telephone'],\n  include: ['sender'], //'creator'\n  icon: 'yo-activity'\n})\nexport class Notification extends INotification {\n  @Editable('Notification', {\n    type: FormFieldType.autocomplete,\n    translate: true,\n    values: ['email', 'notification', 'allnotification'],\n    required: true,\n    filterable: true\n  })\n  mode: 'email' | 'notification' | 'allnotification';\n\n  @Editable('Notification', { type: FormFieldType.text, required: true })\n  @Searchable('Notification')\n  title: string;\n\n  @Editable('Notification', { type: FormFieldType.textarea, required: true })\n  body?: string;\n\n  @Editable('Notification', {\n    type: FormFieldType.datetime,\n    minDate: new Date(),\n    condition: 'mode!=\"sms\"'\n  })\n  scheduledDate?: Date;\n\n  //@Editable('Notification', { type: FormFieldType.autocomplete, values: ['com.ipelia.yoobicv3', 'com.kering.yoobic', 'com.ipelia.yooask'], condition: ROLES_CONDITIONS.isAdmin, clearable: true, translate: true, multiple: true, advanced: true })\n  apps?: Array<string>;\n\n  @Editable('Notification', {\n    type: FormFieldType.autocomplete,\n    collectionName: 'user',\n    icon: 'yo-user',\n    columnDefinition: { name: 'username' },\n    exportOrder: 24,\n    title: 'SENDBY',\n    filterable: true\n  })\n  sender?: User;\n  senderRef?: string;\n}\n","import { Injectable } from '@angular/core';\n\nimport { User } from '../../interfaces/user/user.interface';\nimport { Notification } from '../../interfaces/notification/notification.interface';\nimport { NotificationEvent } from '../../interfaces/notification-event/notification-event.interface';\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\n\nimport { Subscription, Observable, Subject, of } from 'rxjs';\n\nimport { Colors, CoreConfig, Log } from '@shared/common';\n\nimport { toDate } from '@shared/stencil';\n\nimport { OneSignal } from '@ionic-native/onesignal/ngx';\nimport { Push as PushNative } from '@ionic-native/push/ngx';\n\nexport * from '../../interfaces/notification/notification.interface';\n\nimport { pick, uniq, compact, union, without, isArray, uniqBy, filter, map, merge, isEmpty, get } from 'lodash-es';\n\n@Injectable()\nexport class Push {\n  private push: any;\n  private tags: Array<string> = ['username', 'language', 'isTeam'];\n  private _notificationReceived = new Subject<NotificationEvent>();\n  private _parentSubscription: Subscription;\n  private currentOneSignalId: string;\n  private registered: boolean = false;\n  private _oneSignalPlayerIdChange = new Subject<string>();\n\n  constructor(private coreConfig: CoreConfig, private log: Log, private config: Config, private rq: Requestor, private oneSignal: OneSignal, private pushNative: PushNative) {}\n\n  get oneSignalPlayerIdChange$(): Observable<string> {\n    return this._oneSignalPlayerIdChange.asObservable();\n  }\n\n  get notificationReceived$(): Observable<NotificationEvent> {\n    return this._notificationReceived.asObservable();\n  }\n\n  registerOneSignal(user: User) {\n    if (this.registered === true) {\n      //|| this.coreConfig.getAppId() === 'uk.co.boots.yoobicoperations'\n      return Promise.resolve(user);\n    }\n    this.registered = true;\n    let onesignalAppId = this.coreConfig.getKey('onesignalAppId');\n    this._parentSubscription = new Subscription();\n    if (this.coreConfig.isCordova()) {\n      //OneSignal.setLogLevel({ logLevel: 4, visualLevel: 4 });\n      this.oneSignal.startInit(onesignalAppId, this.coreConfig.getKey('googleProjectNumber'));\n      this.oneSignal.inFocusDisplaying(this.oneSignal.OSInFocusDisplayOption.None);\n      this._parentSubscription.add(this.oneSignal.handleNotificationReceived().subscribe(notif => this.onNotificationReceived(notif)));\n      this._parentSubscription.add(this.oneSignal.handleNotificationOpened().subscribe(notif => this.onNotificationOpened(notif)));\n      this.oneSignal.endInit();\n\n      return this.oneSignal.getIds().then(\n        retVal => {\n          this.oneSignal.setSubscription(true);\n          this.oneSignal.sendTags(pick(user, this.tags));\n          if (retVal && retVal.userId) {\n            this.currentOneSignalId = retVal.userId;\n            this.updateUserOneSignalIds(user, this.currentOneSignalId);\n            if (user.email) {\n              this.oneSignal.syncHashedEmail(user.email);\n            }\n            if (retVal.pushToken) {\n              this.addToken(user, retVal.pushToken);\n            }\n          }\n          this._oneSignalPlayerIdChange.next(retVal.userId);\n          return user;\n        },\n        err => {\n          this.log.forceLog(err);\n          return user;\n        }\n      );\n    } else if (this.coreConfig.isWeb() && window.OneSignal) {\n      return new Promise((resolve, reject) => {\n        if (!window.OneSignal.isPushNotificationsSupported() || location.hostname === 'localhost') {\n          return resolve(user);\n        }\n        window.OneSignal.push([\n          'init',\n          {\n            appId: onesignalAppId,\n            autoRegister: true,\n            notifyButton: { enable: false },\n            safari_web_id: this.coreConfig.getKey('onesignalSafariWebId')\n          }\n        ]);\n        window.OneSignal.push(() => {\n          window.OneSignal.sendTags(pick(user, this.tags));\n          window.OneSignal.on('notificationDisplay', ev => {\n            this.onNotificationReceived(ev);\n          });\n\n          window.OneSignal.getUserId().then(userId => {\n            this.currentOneSignalId = userId;\n            this.updateUserOneSignalIds(user, this.currentOneSignalId);\n            resolve(user);\n          });\n        });\n      });\n    } else {\n      return Promise.resolve(user);\n    }\n  }\n\n  updateUserOneSignalIds(user, oneSignalId) {\n    if (user) {\n      user.oneSignalId = uniq(compact(union([].concat(user.oneSignalId), [oneSignalId])));\n\n      user.oneSignalAppIds = user.oneSignalAppIds || {};\n      let bundleId = this.coreConfig.getAppId().replace(/\\./g, '_');\n      user.oneSignalAppIds[bundleId] = uniq(compact(union([].concat(user.oneSignalAppIds[bundleId]), [oneSignalId])));\n    }\n  }\n\n  onNotificationReceived(notif: any) {\n    this._notificationReceived.next({ type: 'received', notification: notif });\n  }\n\n  onNotificationOpened(notif: any) {\n    this._notificationReceived.next({\n      type: 'opened',\n      action: notif.action,\n      notification: notif.notification\n    });\n  }\n\n  unregisterOneSignal(user: User) {\n    if (this.coreConfig.isCordova()) {\n      this.oneSignal.setSubscription(false);\n      if (this._parentSubscription) {\n        this._parentSubscription.unsubscribe();\n        this._parentSubscription = null;\n      }\n      user.oneSignalId = without(user.oneSignalId, this.currentOneSignalId);\n      user.oneSignalAppIds = user.oneSignalAppIds || {};\n      let bundleId = this.coreConfig.getAppId().replace(/\\./g, '_');\n      user.oneSignalAppIds[bundleId] = without(user.oneSignalAppIds[bundleId], this.currentOneSignalId);\n      this.registered = false;\n    }\n  }\n\n  addToken(user: User, token: string) {\n    let platform = this.coreConfig.isIOS() ? 'ios' : 'android';\n    if (!user._messaging || !isArray(user._messaging.pushTokens)) {\n      user._messaging = { pushTokens: [] };\n    }\n    user._messaging.pushTokens.push({ token: token, platform: platform });\n    user._messaging.pushTokens = uniqBy(user._messaging.pushTokens, push => push.token);\n    delete (<any>user).messaging;\n  }\n\n  removeToken(user: User, token: string) {\n    if (user._messaging && isArray(user._messaging.pushTokens)) {\n      user._messaging.pushTokens = filter(user._messaging.pushTokens, push => push.token !== token);\n    }\n  }\n\n  getUserTokens(user: User, platform: string) {\n    let tokens = [];\n    if (user._messaging && user._messaging.pushTokens) {\n      tokens = union(map(filter(user._messaging.pushTokens, push => push.platform === platform), 'token'));\n    }\n    return tokens;\n  }\n\n  notifyGroups(groups: string | Array<string>, notification: Notification) {\n    groups = [].concat(groups);\n    if (groups && groups.length > 0) {\n      notification.group = groups;\n      //notification.userQuery = { where: { '_acl.groups.r': { inq: groups } } };\n      return this.notify(notification);\n    } else {\n      return of(null);\n    }\n  }\n\n  notifyUsers(users: Array<User>, notification: Notification) {\n    if (users && users.length > 0) {\n      return this.notify(notification, true, users.map(u => u._id));\n    } else {\n      return of(null);\n    }\n  }\n\n  notifyUserById(userId: string, notification: Notification) {\n    if (userId) {\n      return this.notify(notification, true, [userId]);\n    } else {\n      return of(null);\n    }\n  }\n\n  notifyUsersById(userIds: Array<string>, notification: Notification) {\n    if (userIds && userIds.length > 0) {\n      return this.notify(notification, true, userIds);\n    } else {\n      return of(null);\n    }\n  }\n\n  notifyUsersByQuery(userQuery: any, notification: Notification) {\n    if (!isEmpty(userQuery) && (!isEmpty(userQuery.where) || !isEmpty(userQuery.subQuery.where))) {\n      //notification.userQuery = { where: { _id: { inq: userIds } } };\n      notification.userQuery = userQuery;\n      notification._tenantRef = notification._tenantRef || get(userQuery, ['where', '_tenantRef']) || get(userQuery, ['subQuery', 'where', '_tenantRef']);\n      return this.notify(notification);\n    } else {\n      return of(null);\n    }\n  }\n\n  notify(notification: Notification, noQuery: boolean = false, userIds?: Array<string>) {\n    if (notification.scheduledDate) {\n      notification.scheduledDate = toDate(notification.scheduledDate);\n    }\n    if (notification.userQuery && notification.userQuery.limit !== undefined) {\n      delete notification.userQuery.limit;\n    }\n    if (notification.userQuery && notification.userQuery.field !== undefined) {\n      delete notification.userQuery.field;\n    }\n    notification.notificationOptions = merge(notification.notificationOptions || {}, {\n      ios_badgeType: 'Increase',\n      ios_badgeCount: 1\n    });\n    if (notification.mode === 'allnotification') {\n      (<any>notification).mode = 'all';\n    }\n    if (noQuery) {\n      let url = this.config.apiUrl + 'notifications/sendTargetedNotification';\n      return this.rq.post(url, { userIds, notification });\n    } else {\n      let url = this.config.apiUrl + 'businesslogic/sendNotification';\n      return this.rq.post(url, notification);\n    }\n  }\n\n  //deprecated\n  protected _registerNative(): Promise<string> {\n    if (this.coreConfig.isCordova()) {\n      return new Promise((resolve, reject) => {\n        let promiseFulfilled = false;\n        this.push = this.pushNative.init({\n          android: {\n            senderID: this.coreConfig.getKey('googleProjectNumber'),\n            iconColor: Colors.success,\n            icon: 'notify'\n          },\n          ios: { alert: 'true', badge: 'true', sound: 'false' }\n        });\n        this.push.on('registration').subscribe((data: any) => {\n          promiseFulfilled = true;\n          resolve(data.registrationId);\n        });\n\n        this.push.on('error').subscribe(error => {\n          reject(error);\n        });\n\n        this.push.on('notification').subscribe((data: any) => {});\n        //sometimes on ios if the push are not enable it will not send an error, so we check after 10 sec\n        setTimeout(() => {\n          if (!promiseFulfilled) {\n            reject('timeout');\n          }\n        }, 10000);\n      });\n    } else {\n      return <any>Promise.reject('not cordova');\n    }\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Broker } from '../broker/broker.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Session } from '../session/session.service';\nimport { Push } from '../push/push.service';\nimport { Config } from '../config/config.service';\nimport { User } from '../../interfaces/user/user.interface';\n\nimport { Observable, Subject, throwError, of } from 'rxjs';\nimport { map, catchError, mergeMap, flatMap } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Network, LocalStorage, LocalForageService, CoreConfig } from '@shared/common';\nimport { isPresent, ITenant, IPublicApiToken } from '@shared/stencil';\nimport { assign, some, map as _map, every, pick } from 'lodash-es';\n\n@Injectable()\nexport class Authentication {\n  protected static roleAdmin = 'admin';\n  protected static roleTeam = 'team';\n  protected static roleTrial = 'trial';\n  protected static roleDashboard = 'dashboard';\n  protected static roleManager = 'manager';\n  protected static roleMissionViewer = 'missionviewer';\n\n  public login$ = new Subject<string>();\n  public logout$ = new Subject<string>();\n  public profileUpdated$: EventEmitter<any>;\n\n  constructor(protected rq: Requestor, protected push: Push, protected config: Config, protected broker: Broker, protected network: Network, protected localStorage: LocalStorage, protected localForage: LocalForageService, protected session: Session, protected coreConfig: CoreConfig) {\n    this.profileUpdated$ = new EventEmitter<any>();\n  }\n\n  login(username: string, password: string, roles?: Array<string>): Observable<any> {\n    let url = this.broker.getServerUrl() + 'auth/login';\n    return this.rq.post(url, { username, password, roles }).pipe(\n      map(res => {\n        this.afterLogin(res);\n        return res;\n      }),\n      catchError(res => {\n        this.session.token = null;\n        let err;\n        if (res && res.json) {\n          err = res.json().error;\n        } else if (res && res.error && res.error.error) {\n          err = res.error.error;\n        } else if (res.name) {\n          err = { message: res.name.toUpperCase() };\n        } else {\n          err = { message: 'REQUESTERROR' };\n        }\n        return throwError(err);\n      })\n    );\n  }\n\n  loginSocial(accessToken: string, provider = 'facebook') {\n    let url = this.broker.getServerUrl() + 'auth/' + provider;\n    return this.rq.post(url, { accessToken }).pipe(\n      map(res => {\n        this.afterLogin(res);\n        return res;\n      }),\n      catchError(res => {\n        this.session.token = null;\n        return throwError(res.json().error);\n      })\n    );\n  }\n\n  getLoginAdvancedUrl(tenant: string, method: string, host: string) {\n    let url = this.broker.getServerUrl() + 'auth/' + tenant.toLowerCase() + '/' + method + '/login?host=' + host + '&tokenLocation=' + (this.coreConfig.isCordova() ? 'query' : 'fragment');\n    return url;\n  }\n\n  getTenantAdvancedLoginMethods(tenant: string) {\n    let url = this.broker.getServerUrl() + 'auth/' + tenant.toLowerCase() + '/providers';\n    return this.rq.get(url);\n  }\n\n  getTenantFromToken(token): { _tenantRef?: string; _tenantName?: string; sub?: string } {\n    let jwtHelper: JwtHelperService = new JwtHelperService({});\n    return jwtHelper.decodeToken(token) || {};\n  }\n\n  afterLogin(res) {\n    this.session.token = res.$mcfly$token;\n    this.session.userId = res.userId;\n    this.session.user = res.user;\n    this.session.tenant = res.tenant;\n    this.login$.next('');\n    this.cleanUpLocalStorage();\n    return res;\n  }\n\n  cleanUpLocalStorage() {\n    let keys = ['stats.kpiFilterFormData', 'stats.selectedDescription', 'stats.selectedDashboard', 'stats.customSelectedDashboard'];\n    keys.forEach(key => {\n      this.localStorage.remove(key);\n    });\n  }\n\n  getCurrentSession(): Observable<Session> {\n    if (this.network.isOffline()) {\n      return of(null);\n    }\n    return this.rq.get(this.broker.getApiUrl() + 'businesslogic/getCurrentSession').pipe(\n      map((res: any) => {\n        assign(this.session, res.data);\n        this.session.hasScandit = this.coreConfig.isCordova() ? this.hasRoles(['scandit']) : this.hasRoles(['scandit', 'admin']);\n        return <any>this.session;\n      }),\n      catchError(() => {\n        return of(null);\n      })\n    );\n  }\n\n  doLogout() {\n    let url = this.broker.getApiUrl() + 'user/logout';\n    return this.rq.post(url, {});\n  }\n\n  logout() {\n    let promise = Promise.resolve(null);\n    if (this.config.isTestpen) {\n      if (this.localStorage) {\n        this.localStorage.clear();\n      }\n      if (this.localForage) {\n        this.localForage.clear();\n      }\n    }\n    if (this.session && this.session.user && this.session.user._id) {\n      this.push.unregisterOneSignal(this.session.user);\n      promise = this.updateProfile(this.session.user).toPromise();\n    }\n    this.logout$.next('');\n    return promise.then(() => this.afterLogout(), () => this.afterLogout());\n  }\n\n  afterLogout() {\n    this.doLogout().subscribe(() => {}, () => {});\n    this.network.forceOffline(false, false);\n    this.session.clear().catch(() => {});\n    return Promise.resolve();\n  }\n\n  signup(email: string, imageData: any, password: string) {\n    let user = <any>{ username: email, email, password, imageData };\n    let url = this.broker.getApiUrl() + 'user/signup';\n    return this.rq.post(url, { user }).pipe(\n      mergeMap(() => {\n        return this.login(email, password);\n      })\n    );\n  }\n\n  inviteUsers(users: Array<{ email: string; roles: Array<string>; locationRef?: string }>, groups: Array<string>, password: string = null, sendPassword: boolean = true, appName?: string, appleStoreUrl?: string, playStoreUrl?: string, _tenantRef?: string): Observable<any> {\n    let url = this.broker.getApiUrl() + 'user/invite';\n    let finalPlayStoreUrl = playStoreUrl + this.coreConfig.getAppId();\n    return this.rq.post(url, {\n      users,\n      groups,\n      password,\n      sendPassword,\n      appName,\n      appleStoreUrl,\n      playStoreUrl: finalPlayStoreUrl,\n      _tenantRef\n    });\n  }\n\n  isLoggedIn() {\n    return this.session.token && this.session.token.length > 0 && !this.isTokenExpired(this.session.token);\n  }\n\n  hasRole(role: string) {\n    return this.session.roles && this.session.roles.indexOf(role) >= 0;\n  }\n\n  hasRoles(roles: Array<string>) {\n    return some(_map(roles, role => this.hasRole(role)), t => t === true);\n  }\n\n  hasAllRoles(roles: Array<string>) {\n    return every(roles, role => this.hasRole(role));\n  }\n\n  hasGroup(group: string) {\n    return this.session.groups && this.session.groups.indexOf(group) >= 0;\n  }\n\n  hasGroups(groups: Array<string>) {\n    return some(_map(groups, group => this.hasGroup(group)), t => t === true);\n  }\n\n  hasAllGroups(groups: Array<string>) {\n    return every(groups, group => this.hasGroup(group));\n  }\n\n  isAdmin(checkSmartin: boolean = false) {\n    let retVal = this.hasRole(Authentication.roleAdmin);\n    if (checkSmartin && this.session.user.username !== 'smartin@yoobic.com') {\n      retVal = false;\n    }\n    return retVal;\n  }\n\n  isTrial() {\n    return !this.hasRole(Authentication.roleAdmin) && this.hasRole(Authentication.roleTrial);\n  }\n\n  isDashboard() {\n    return this.hasRole(Authentication.roleDashboard) && !this.isAdmin() && !this.hasRole(Authentication.roleMissionViewer) && !this.hasRole(Authentication.roleManager);\n  }\n\n  isTeam() {\n    return this.hasRole(Authentication.roleTeam);\n  }\n\n  isCrowd() {\n    return !this.hasRole(Authentication.roleTeam);\n  }\n\n  isStore() {\n    return this.session.user && isPresent(this.session.user.locationRef);\n  }\n\n  isStoreManager() {\n    return this.hasRole('store') && this.session.user && this.session.user.locationRef;\n  }\n\n  isRoleAdmin() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLEADMIN';\n  }\n\n  isRoleEditor() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLEEDITOR';\n  }\n\n  isRoleViewer() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLEVIEWER';\n  }\n\n  isRoleManager() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLEMANAGER';\n  }\n\n  isRoleField() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLEFIELD';\n  }\n\n  isRoleStoreManager() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLESTOREMANAGER';\n  }\n\n  isRoleStore() {\n    return this.getCurrentUser() && this.getCurrentUser().role === 'ROLESTORE';\n  }\n\n  hasAccessToOperations() {\n    return this.hasRole('team');\n  }\n\n  hasAccessToBoost() {\n    return this.hasRole('academy');\n  }\n\n  getCurrentUser(): User {\n    return this.session.user;\n  }\n\n  passwordChange(oldPassword: string, newPassword: string) {\n    return this.rq.post(this.broker.getApiUrl() + 'user/changePassword', {\n      oldPassword,\n      newPassword\n    });\n  }\n\n  passwordReset(email, isMagicLink: boolean = false, urlPrefix: string = 'https://yoobic.app.link/') {\n    if (isMagicLink) {\n      return this.rq.post(this.broker.getApiUrl() + 'user/getMagicLink', {\n        username: email,\n        urlPrefix\n      });\n    } else {\n      return this.rq.post(this.broker.getApiUrl() + 'user/reset', { email: email });\n    }\n  }\n\n  passwordResetConfirm(token: string, password: string, host?: string) {\n    let url = host ? 'https://' + host + '/api/' : this.broker.getApiUrl();\n    return this.rq.post(url + 'Endpoints/resetPassword', { password: password }, token, null, true);\n  }\n\n  passwordResetAdmin(user: any, password: string, dontSendMail = false) {\n    return this.rq.post(this.broker.getApiUrl() + 'AdminDashboard/resetPassword', {\n      options: {\n        userPasswordList: [user].map((u: any) => ({\n          username: u.username,\n          _id: u._id,\n          password: password\n        })),\n        dontSendMail: dontSendMail\n      }\n    });\n  }\n\n  impersonate(username: string) {\n    return this.rq.post(this.broker.getApiUrl() + 'AdminDashboard/impersonate', {\n      username\n    });\n  }\n\n  forceLogout(username: string) {\n    return this.rq.post(this.broker.getApiUrl() + 'AdminDashboard/forceLogout', {\n      username\n    });\n  }\n\n  generatePassword() {\n    let length = 8;\n    let charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let retVal = '';\n    for (let i = 0, n = charset.length; i < length; ++i) {\n      retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n    return retVal;\n  }\n\n  updateProfile(user?: any, skipAcl = false, fields: Array<string> = []) {\n    let userToUpdate: any = user || this.getCurrentUser();\n    if (userToUpdate) {\n      if (!this.isAdmin() && !skipAcl) {\n        this.broker.setAcl(userToUpdate, this.session.groups);\n      }\n      if (fields && fields.length > 0) {\n        userToUpdate = <any>pick(userToUpdate, fields);\n        if (fields.indexOf('_acl') < 0) {\n          skipAcl = true;\n        }\n      }\n      return this.broker.upsert('user', userToUpdate, null, skipAcl).pipe(\n        flatMap(retVal => {\n          return this.broker.getById('user', retVal._id).pipe(\n            map(updatedUser => {\n              this.session.user = updatedUser;\n              return updatedUser;\n            })\n          );\n        })\n      );\n    } else {\n      return of(null);\n    }\n  }\n\n  isTokenExpired(token: string) {\n    let jwtHelper: JwtHelperService = new JwtHelperService({});\n    try {\n      return jwtHelper.isTokenExpired(token);\n    } catch (err) {\n      return true;\n    }\n  }\n\n  setToken(token: string, userId: string) {\n    this.session.token = token;\n    this.session.userId = userId;\n    return this.broker.getById('user', userId).pipe(\n      map((retVal: any) => {\n        this.session.user = retVal;\n        this.profileUpdated$.emit(retVal);\n        return retVal;\n      })\n    );\n  }\n\n  createPublicApiToken(tenant: ITenant) {\n    let url = this.broker.getApiUrl() + 'AdminDashboard/generateServiceAccount';\n\n    return this.rq.post(url, {\n      tenantId: tenant._id\n    });\n  }\n\n  invalidatePublicApiToken(token: IPublicApiToken) {\n    let url = this.broker.getApiUrl() + 'publicAPITokens/' + token._id + '/invalidate';\n    return this.rq.post(url, {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanDeactivate, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { Authentication } from './authentication.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private authentication: Authentication) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    let retVal = false;\n    if (this.authentication.isLoggedIn()) {\n      if (next.data && next.data['roles']) {\n        retVal = this.authentication.hasRoles(next.data['roles']) || this.authentication.isAdmin();\n      } else {\n        retVal = true;\n      }\n      if (next.data && next.data['excludedRoles'] && !this.authentication.isAdmin()) {\n        retVal = retVal && !this.authentication.hasRoles(next.data['excludedRoles']);\n      }\n    } else {\n      Requestor.unauthorizedEmitter.emit('not logged in');\n    }\n    return retVal;\n  }\n}\n\nexport interface CanComponentDeactivate {\n  canDeactivate: (component: CanComponentDeactivate, route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => boolean | Observable<boolean>;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n  canDeactivate(component: CanComponentDeactivate, route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {\n    return component && component.canDeactivate ? component.canDeactivate(component, route, state) : true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Config } from '../config/config.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toDate, dateParse, dateFormat, fromNow } from '@shared/stencil';\n\n@Injectable()\nexport class BackupService {\n  private get apiUrl() {\n    return this.config.apiUrl + 'AdminDashboard/';\n  }\n\n  constructor(protected rq: Requestor, protected config: Config) {}\n\n  getAll(date?: Date) {\n    let url = this.apiUrl + 'listBackup';\n    return this.rq\n      .post(url, {\n        clusterName: 'rs-ds039424',\n        date: toDate(date || new Date()).toISOString()\n      })\n      .pipe(\n        map((res: Array<string>) => {\n          if (res && res.map) {\n            res = res\n              .map((name: string) => {\n                let backup: any = { _id: name };\n                let lastIndex = name.lastIndexOf('_');\n                let dateStr = name.substr(lastIndex + 1).replace('.tgz', '');\n                backup.title = fromNow(dateParse(dateStr, 'YYYY-MM-DDTHHmmss.sssZ'));\n                backup.badge = dateFormat(dateParse(dateStr, 'YYYY-MM-DDTHHmmss.sssZ'), 'L LT');\n                backup.description = name;\n                return backup;\n              })\n              .reverse();\n          }\n          return res;\n        })\n      );\n  }\n\n  restore(backupName: string, collections?: Array<string>): Observable<any> {\n    let url = this.apiUrl + 'restoreBackup ';\n    return this.rq.post(url, {\n      s3Key: backupName,\n      collections\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CoreConfig } from '@shared/common';\nimport { Translate } from '@shared/translate';\n\nimport { Config } from '../config/config.service';\nimport { Requestor } from '../requestor/requestor.service';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { isString } from 'lodash-es';\n\n@Injectable()\nexport class Blog {\n  constructor(protected coreConfig: CoreConfig, protected config: Config, protected rq: Requestor, protected translate: Translate) {}\n\n  getUrl() {\n    let url: string;\n    if (this.coreConfig.getAppName() === 'operations') {\n      if (this.translate.getCurrentLanguage() === 'fr') {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=20417&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=20415&public_link=true';\n        }\n      } else if (this.translate.getCurrentLanguage() === 'it') {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=21144&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=21143&public_link=true';\n        }\n      } else {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=20416&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=20414&public_link=true';\n        }\n      }\n    } else if (this.coreConfig.getAppName() === 'boost') {\n      if (this.translate.getCurrentLanguage() === 'fr') {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25008&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25006&public_link=true';\n        }\n      } else if (this.translate.getCurrentLanguage() === 'it') {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25009&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25010&public_link=true';\n        }\n      } else {\n        if (this.coreConfig.isIonic()) {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25007&public_link=true';\n        } else {\n          url = 'https://yoobic.blogin.co/rss.xml?mt=521fe7a42642c458e2403084bad1f468504f2da6&c=25005&public_link=true';\n        }\n      }\n    }\n    return url;\n  }\n\n  get(blogUrl: string, limit?: number, skip?: number): Observable<any> {\n    let url = this.config.apiUrl + 'businesslogic/getBlog';\n    return this.rq.post(url, { url: blogUrl, limit, skip }).pipe(\n      map(retVal => {\n        let items = [];\n        if (retVal && retVal.rss && retVal.rss.channel && retVal.rss.channel.item && retVal.rss.channel.item.length > 0) {\n          items = [].concat(retVal.rss.channel.item);\n        }\n        items.forEach(b => {\n          try {\n            if (b && b.enclosure && b.enclosure.$ && b.enclosure.$.url) {\n              b.background = b.enclosure.$.url;\n            } else {\n              let content = b['content:encoded'];\n              let re = /<img[^>]+src=\"?([^\"\\s]+)\"?[^>]*\\/>/g;\n              let results = re.exec(content);\n              if (results) {\n                b.background = results[1];\n              }\n            }\n            if (b.pubDate && isString(b.pubDate)) {\n              b.pubDate = new Date(b.pubDate);\n            }\n            if (b.background) {\n              b.background = b.background.replace('blog.yoobic.com', 'yoobic.blogin.co');\n            }\n          } catch (err) {}\n        });\n        return items;\n      })\n    );\n  }\n\n  getLatestArticleDate(blogUrl: string) {\n    let url = this.config.apiUrl + 'businesslogic/getBlog';\n    return this.rq.post(url, { url: blogUrl, limit: 1 }).pipe(\n      map(retVal => {\n        let items = [];\n        if (retVal && retVal.rss && retVal.rss.channel && retVal.rss.channel.item && retVal.rss.channel.item.length > 0) {\n          items = [].concat(retVal.rss.channel.item);\n        }\n        if (items && items.length > 0 && items[0]) {\n          return items[0].pubDate;\n        }\n        return null;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Authentication } from './authentication.service';\nimport { Session } from '../session/session.service';\n\nimport { Network } from '@shared/common';\nimport { Observable, of } from 'rxjs';\n\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Resolve } from '@angular/router';\n\n@Injectable()\nexport class CurrentSessionResolver implements Resolve<any> {\n  constructor(private authentication: Authentication, private network: Network) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Session> {\n    if (this.network.isOffline()) {\n      return of(null);\n    }\n    return this.authentication.getCurrentSession();\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Filters, SubQuery, IFormField, dateFormat, getUUID, FormFieldType } from '@shared/stencil';\nimport { Translate } from '@shared/translate';\n\nimport { ChartDefinition } from '../../interfaces/chart-definition/chart-definition.interface';\nimport { Dashboard as IDashboard } from '../../interfaces/dashboard/dashboard.interface';\nimport { User } from '../../interfaces/user/user.interface';\nimport { MissionDescription } from '../../interfaces/mission-description/mission-description.interface';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\n\nimport { Broker } from '../broker/broker.service';\nimport { Session } from '../session/session.service';\n\nimport { cloneDeep, map } from 'lodash-es';\nimport { Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\n@Injectable()\nexport class Dashboard {\n  constructor(protected broker: Broker, protected translate: Translate, protected session: Session) {}\n\n  publish(dashboard: IDashboard, users: Array<User>) {\n    let dashboards = users\n      .filter(u => u._id !== this.session.user._id)\n      .map(user => {\n        let dashboardCopy = cloneDeep(dashboard);\n        // dashboardCopy.title += ' - ' + moment().format('L');\n        dashboardCopy.originalRef = dashboard._id;\n        delete dashboardCopy._id;\n\n        dashboardCopy._acl = user._acl;\n        this.broker.setAcl(dashboardCopy, null, null, null, [user._id]);\n        //dashboardCopy._acl.users = { r: [user._id], w: [user._id] };\n        dashboardCopy.creatorRef = user._id;\n        //dashboardCopy._acl.creator = user._id;\n        return dashboardCopy;\n      });\n\n    return this.broker\n      .deleteAll('dashboards', {\n        where: { originalRef: { inq: [dashboard._id] }, creatorRef: { inq: map(users, '_id') } }\n      })\n      .pipe(\n        mergeMap(() => {\n          return this.broker.upsertAll('dashboards', dashboards);\n        })\n      );\n  }\n\n  deletePublished(dashboard: IDashboard) {\n    return this.broker.deleteAll('dashboards', {\n      where: { originalRef: { inq: [dashboard._id] } }\n    });\n  }\n\n  updatePublished(dashboard: IDashboard) {\n    return this.broker.getAll('dashboards', ['_id', '_acl', '_ect', '_lmt'], null, null, [[{ field: 'originalRef', operator: { _id: 'inq' }, value: [dashboard._id] }]], null, 0, -1).pipe(\n      mergeMap(response => {\n        let dashboards: Array<IDashboard> = response.data;\n        dashboards.forEach(d => {\n          d.title = dashboard.title + ' - ' + dateFormat(new Date(), 'L');\n          d.description = dashboard.description;\n          d.tabs = dashboard.tabs;\n        });\n        return this.broker.upsertAll('dashboards', dashboards);\n      })\n    );\n  }\n\n  copy(dashboard: IDashboard, title: string) {\n    let newDashboard = cloneDeep(dashboard);\n    newDashboard.title = title;\n    delete newDashboard._id;\n    if (newDashboard.tabs) {\n      newDashboard.tabs.forEach(t => {\n        if (t.items) {\n          t.items.forEach(c => {\n            c.definition._id = getUUID();\n          });\n        }\n      });\n    }\n    return this.broker.upsert('dashboards', newDashboard);\n  }\n\n  aggregateQuery(collectionName: string, filters?: Filters, options?: Array<any>, excludedFields?: Array<any>, customFilter?: any, subQuery?: SubQuery): Observable<any> {\n    //, aggregateFormDefinition?: Array<IFormField>, aggregateData?: any) { //where ?: Filters, match?: Object, limit?: Number, lookup?: Object, projectBefore?: Object, group?: Object, projectAfter?: Object) {\n    options = options || [];\n    return this.broker.aggregateQuery(collectionName, filters, options, null, excludedFields, false, null, customFilter, subQuery);\n  }\n\n  setTimescale(filters: Filters, timescale: string, dateField = 'finishedDate', endDate?: Date | string, previous: boolean = false) {\n    return this.broker.setTimescale(filters, timescale, dateField, endDate, previous);\n  }\n\n  getChartDefinition(title: string, filters: Array<any> = [[]], collectionName = 'missions', dateGrouping = 'day', groupByDate = true, timeScale = 'last7days') {\n    let definition: ChartDefinition = <any>{\n      title: this.translate.get(title),\n      aggregateOptions: [],\n      timescale: timeScale,\n      collectionName: collectionName,\n      dateGrouping: dateGrouping,\n      filters: filters,\n      groupByDate: groupByDate,\n      palette: 'palette2',\n      showAs: 'chart',\n      type: 'areaspline',\n      datetimeFormat: 'dd'\n    };\n    return definition;\n  }\n\n  getPhotos(missionDescription?: MissionDescription, fields?: Array<IFormField>, start = 0, locationTags?: Array<string>): Observable<ResponseObject> {\n    let filters: Filters = [[]];\n    if (missionDescription && missionDescription._id) {\n      filters[0].push({\n        field: 'missiondescriptionRef',\n        operator: { _id: 'inq' },\n        value: [missionDescription._id]\n      });\n    }\n    if (fields) {\n      fields = [].concat(fields);\n      filters[0].push({\n        field: 'name',\n        operator: { _id: 'inq' },\n        value: fields.map(f => f.name.replace('.value', ''))\n      });\n    }\n    if (locationTags && locationTags.length) {\n      filters[0].push({\n        field: 'tags',\n        collectionName: 'locations',\n        operator: { _id: 'inq' },\n        value: locationTags,\n        type: FormFieldType.autocomplete,\n        subQuery: { field: 'locationRef', values: '_id' }\n      });\n    }\n    return this.broker.getAll('photos', null, null, null, filters, null, start, 10);\n  }\n\n  getFolderFolderStat(folderIds: Array<string>): Observable<Array<{ _id: string; folders: number }>> {\n    let filters = [[{ field: 'parent', operator: { _id: 'inq' }, value: folderIds }]];\n    let options = [\n      {\n        $project: {\n          _id: '$parent'\n        }\n      },\n      {\n        $group: {\n          _id: '$_id',\n          folders: { $sum: 1 }\n        }\n      }\n    ];\n    return this.aggregateQuery('folders', filters, options);\n  }\n\n  getFolderFileStat(folderIds: Array<string>, keepHideMobile = true): Observable<Array<{ _id: string; files: number }>> {\n    let filters: Filters = [[{ field: 'folder', operator: { _id: 'inq' }, value: folderIds }]];\n    if (keepHideMobile === false) {\n      filters[0].push({ field: 'hideMobile', operator: { _id: 'neq' }, value: true });\n    }\n    let options = [\n      {\n        $project: {\n          _id: '$folder'\n        }\n      },\n      {\n        $group: {\n          _id: '$_id',\n          files: { $sum: 1 }\n        }\n      }\n    ];\n    return this.aggregateQuery('files', filters, options);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Files } from '../files/files.service';\nimport { Broker } from '../broker/broker.service';\nimport { Dashboard } from '../dashboard/dashboard.service';\n\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { Folder } from '../../interfaces/folder/folder.interface';\n\nimport { Observable, Observer } from 'rxjs';\n\n@Injectable()\nexport class FilesBroker {\n  constructor(private dashboard: Dashboard, private broker: Broker, protected files: Files) {}\n\n  getFilesTransform() {\n    return (res: ResponseObject) => {\n      if (res && res.data && res.data.map) {\n        res.data.forEach(f => this.updateFileIcon(f));\n      }\n      return res;\n    };\n  }\n\n  getFilesFoldersTransformAsync() {\n    return (res: ResponseObject, search, filters, start, pageSize) => {\n      return new Observable<ResponseObject>((observer: Observer<ResponseObject>) => {\n        if (res && res.data && res.data.length > 0) {\n          res.data.forEach(f => {\n            delete f.items;\n            if (f.fftype === 'file') {\n              this.updateFileIcon(f);\n            }\n          });\n          let ids = res.data.filter(f => f.fftype === 'folder').map((folder: Folder) => folder._id);\n          this.dashboard.getFolderFolderStat(ids).subscribe(stats => {\n            res.data.forEach((folder: Folder) => {\n              let stat = stats.find(s => s._id === folder._id);\n              let value = stat ? stat.folders || 0 : 0;\n              folder.stats = [{ title: 'FOLDERS', color: 'dark', value }];\n              (<any>folder).hasChildren = value > 0;\n            });\n            this.dashboard.getFolderFileStat(ids, false).subscribe(fileStats => {\n              res.data.forEach((folder: Folder) => {\n                let stat = fileStats.find(s => s._id === folder._id);\n                folder.stats.push({\n                  title: 'FILES',\n                  color: 'dark',\n                  value: stat ? stat.files || 0 : 0\n                });\n              });\n              observer.next({ count: res.count, data: <any>res.data });\n              observer.complete();\n            });\n          });\n        } else {\n          observer.next({ count: 0, data: [] });\n          observer.complete();\n        }\n      });\n    };\n  }\n\n  cleanupFolder(folderId) {\n    return this.broker.deleteAll('files', { where: { folder: folderId } });\n  }\n\n  updateFileIcon(f) {\n    if (this.files.isImage(f)) {\n      f.imgSrc = f._downloadURL;\n    } else if (this.files.isVideo(f)) {\n      f.imgSrc = this.files.getVideoPoster(f._downloadURL);\n    } else {\n      f.icon = this.files.getIcon(f);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Translate } from '@shared/translate';\nimport { Requestor } from '../requestor/requestor.service';\n\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class Googletranslate {\n  static get(query: string, source: string, target: string, rq: Requestor): Observable<any> {\n    let sourceLang = this.fixLanguage(source);\n    let targetLang = this.fixLanguage(target);\n    if (sourceLang === targetLang) {\n      return of(query);\n    } else {\n      let url = 'businesslogic/translate';\n      return rq.post(url, { query, sourceLang, targetLang }, null, null, null, null, true).pipe(\n        map(response => {\n          return response || query;\n        })\n      );\n    }\n  }\n\n  static fixLanguage(language: string) {\n    switch (language) {\n      case 'us':\n        return 'en';\n      case 'zhs':\n        return 'zh-CN';\n      case 'zht':\n        return 'zh-TW';\n      case 'ua':\n        return 'uk';\n      case 'kr':\n        return 'ko';\n      case 'cz':\n        return 'cs';\n      case 'gr':\n        return 'el';\n      case 'br':\n        return 'pt';\n      default:\n        return language;\n    }\n  }\n\n  static getAll(query: string, source: string, rq: Requestor) {\n    let observables = Translate.availablesLanguage\n      .filter(l => l !== source)\n      .filter(l => l !== 'key')\n      .map(l => {\n        return this.get(query, source, l, rq).pipe(\n          map(value => ({\n            language: l,\n            value: value || query\n          }))\n        );\n      });\n    return forkJoin(observables);\n  }\n\n  constructor() {}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Config } from '../config/config.service';\nimport { Network, Log } from '@shared/common';\n\n@Injectable()\nexport class HttpCustomInterceptor implements HttpInterceptor {\n  constructor(protected config: Config, protected network: Network, protected log: Log) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // if (req.url && req.url.indexOf(this.config.serverUrl) >= 0) {\n    //     const authReq = req.clone({ headers: req.headers.set('Yoobic-Client-Version', this.coreConfig.getAppVersion()) });\n    //     return next.handle(authReq);\n    // } else {\n\n    if (this.network.isOffline() && req.url && !req.url.startsWith('./')) {\n      this.log.error(req);\n    }\n    return next.handle(req);\n    //}\n  }\n}\n","/* tslint:disable:variable-name */\nimport { Injectable } from '@angular/core';\nimport { CoreConfig } from '@shared/common';\nimport { ReplaySubject } from 'rxjs';\n\n@Injectable()\nexport class PlatformService {\n  public data$: ReplaySubject<any> = new ReplaySubject<any>(1, 2000);\n\n  constructor(private coreConfig: CoreConfig) {}\n\n  handler(data) {\n    if (data) {\n      this.data$.next(data);\n    }\n  }\n\n  onReadyOrResume(debug = false) {\n    if (this.coreConfig.isCordova() && window.Branch) {\n      window.Branch.setDebug(debug);\n      window.Branch.initSession().then(data => {\n        this.handler(data);\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IPosition, Network } from '@shared/common';\nimport { Broker } from '../broker/broker.service';\nimport { Smartloc } from '../smartloc/smartloc.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Googlemaps } from '../googlemaps/googlemaps.service';\nimport { Authentication } from '../authentication/authentication.service';\nimport { Config } from '../config/config.service';\nimport { Session } from '../session/session.service';\nimport { Cache } from '../cache/cache.service';\n\nimport { Location } from '../../interfaces/location/location.interface';\nimport { LocationType } from '../../interfaces/location-type/location-type.interface';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { CACHE_KEYS } from '../../interfaces/cache/cache.interface';\n\nimport { Filters, SubQuery, IHealthscore, ISort, IKpiData } from '@shared/stencil';\n\nimport { Observable, Observer, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { isNumber } from 'lodash-es';\n\n@Injectable()\nexport class Locations {\n  constructor(private geoloc: Smartloc, private broker: Broker, protected rq: Requestor, protected config: Config, protected session: Session, protected network: Network, protected cache: Cache, protected authentication: Authentication, protected googleMaps: Googlemaps) {}\n\n  loadMarkers(position: IPosition, maxPoints = 5000) {\n    position = position || this.geoloc.defaultPosition;\n    let filters = [\n      [\n        {\n          field: '_geoloc',\n          operator: { _id: 'nearSphere' },\n          value: [position.longitude, position.latitude],\n          max: 40000\n        }\n      ]\n    ];\n    return this.broker.getAll('locations', ['_id', 'title', '_geoloc', 'address'], null, null, filters, null, 0, maxPoints).pipe(\n      map(retVal => {\n        return this.getMarkers(retVal.data);\n      })\n    );\n  }\n\n  getMarkers(locations: Array<Location>) {\n    return this.broker.getMarkers(locations);\n  }\n\n  getMarkersData(collectionName: string, maxPoints: number = 5000, fields?: Array<string>, filters?: Filters, subQuery?: SubQuery) {\n    return this.broker.getAll(collectionName, fields || ['_id', 'title', '_geoloc', 'address'], null, null, filters, null, 0, maxPoints, false, subQuery).pipe(\n      map(retVal => {\n        let markers = this.getMarkers(retVal.data);\n        let legendColors = {\n          available: 'energized',\n          booked: 'info',\n          validated: 'success',\n          rejected: 'danger',\n          tobevalidated: 'royal',\n          archived: 'dark'\n        };\n        return { markers, legendColors };\n      })\n    );\n  }\n\n  getLegendColors() {\n    let legendColors = {\n      available: 'energized',\n      booked: 'info',\n      validated: 'success',\n      rejected: 'danger',\n      tobevalidated: 'royal',\n      archived: 'dark'\n    };\n    return legendColors;\n  }\n\n  getLastVisitDate(locationIds: Array<string>, userId?: string): Observable<Array<{ _id: string; finishedDate: Date; count: number }>> {\n    let filters: Filters = [[{ field: 'locationRef', operator: { _id: 'inq' }, value: locationIds }, { field: 'ownerRef', operator: { _id: 'eq' }, value: userId || this.session.userId }, { field: 'status', operator: { _id: 'eq' }, value: 'finished' }]];\n\n    let options = [\n      {\n        $group: {\n          _id: '$locationRef',\n          finishedDate: { $max: '$finishedDate' },\n          count: { $sum: 1 }\n        }\n      }\n    ];\n    return this.broker.aggregateQuery('missions', filters, options, null, null, false, null);\n  }\n\n  getStatsAndDistanceTransformAsync(position?: IPosition) {\n    return (res: ResponseObject) => {\n      return new Observable<ResponseObject>((observer: Observer<ResponseObject>) => {\n        if (res && res.data && res.data.length > 0) {\n          if (position) {\n            res.data = this.calculateDistanceAndKpiData(res, position);\n          }\n          let ids = res.data.map((location: Location) => location._id);\n          this.getLastVisitDate(ids).subscribe(dates => {\n            res.data.forEach((location: Location) => {\n              let date = dates.find(d => d._id === location._id);\n              if (date && date.finishedDate) {\n                location.lastVisit = date.finishedDate;\n                location.countVisits = date.count;\n              }\n              observer.next({ count: res.count, data: <any>res.data });\n              observer.complete();\n            });\n          });\n        } else {\n          observer.next({ count: 0, data: [] });\n          observer.complete();\n        }\n      });\n    };\n  }\n\n  getDistanceTransform() {\n    return this.geoloc.getLocation().then((position: IPosition) => {\n      return (res: ResponseObject) => {\n        return new Observable<ResponseObject>((observer: Observer<ResponseObject>) => {\n          if (res && res.data && res.data.length > 0) {\n            res.data = this.calculateDistanceAndKpiData(res, position);\n            observer.next({ count: res.count, data: <any>res.data });\n            observer.complete();\n          } else {\n            observer.next({ count: 0, data: [] });\n            observer.complete();\n          }\n        });\n      };\n    });\n  }\n\n  getDistanceAndLastVisitTransform(position: IPosition) {\n    return (res: ResponseObject) => {\n      return new Observable<ResponseObject>((observer: Observer<ResponseObject>) => {\n        if (res && res.data && res.data.length > 0) {\n          res.data = this.calculateDistanceAndKpiData(res, position);\n          let ids = res.data.map((location: Location) => location._id);\n          this.getLastVisitDate(ids).subscribe(dates => {\n            res.data.forEach((location: Location) => {\n              let date = dates.find(d => d._id === location._id);\n              if (date && date.finishedDate) {\n                location.lastVisit = date.finishedDate;\n                location.countVisits = date.count;\n              }\n              observer.next({ count: res.count, data: <any>res.data });\n              observer.complete();\n            });\n          });\n        } else {\n          observer.next({ count: 0, data: [] });\n          observer.complete();\n        }\n      });\n    };\n  }\n\n  calculateDistanceAndKpiData(res: ResponseObject, position: IPosition) {\n    let retVal = res.data.map((location: Location) => {\n      if (location._geoloc && position && isNumber(position.latitude) && isNumber(position.longitude)) {\n        location.distance = this.geoloc.getDistance(position.latitude, position.longitude, location._geoloc[1], location._geoloc[0]);\n      }\n\n      let oldKpiData: Object = location.kpiData as any;\n      let kpiData: Array<IKpiData> = [];\n      if (this.session.tenant && this.session.tenant.locationKpis && this.session.tenant.locationKpis.length > 0) {\n        this.session.tenant.locationKpis.forEach(kpi => {\n          if (this.authentication.isAdmin() || (kpi.category === 'healthscore' && this.authentication.hasRole('healthscore')) || (kpi.category !== 'healthscore' && this.authentication.hasRole('storeinsights'))) {\n            kpiData.push({\n              category: kpi.category,\n              value: oldKpiData && oldKpiData[kpi.category] ? oldKpiData[kpi.category].value : null,\n              icon: kpi.icon,\n              extraSymbol: kpi.extraSymbol,\n              variation: oldKpiData && oldKpiData[kpi.category] ? oldKpiData[kpi.category].variation : null\n            });\n          }\n        });\n      }\n      location.kpiData = kpiData;\n\n      return location;\n    });\n    //retVal = orderBy(retVal, ['distance']);\n    return retVal;\n  }\n\n  getAroundMeFilter(aroundMe: boolean, stats: boolean, forceRefresh: boolean): Promise<{ filters: Filters; sortModel: ISort[]; mapTransform: any; position: IPosition }> {\n    let filters: Filters;\n    let sortModel: Array<any>;\n    let mapTransform: any;\n    return this.geoloc.getLocation(forceRefresh).then((res: any) => {\n      mapTransform = stats ? this.getStatsAndDistanceTransformAsync(res) : this.getDistanceAndLastVisitTransform(res);\n      if (!aroundMe || !res) {\n        filters = [[]];\n        sortModel = [{ colId: 'title', sort: 'asc' }];\n      } else {\n        sortModel = [];\n        filters = [\n          [\n            {\n              field: '_geoloc',\n              operator: { _id: 'nearSphere' },\n              value: [res.longitude, res.latitude],\n              max: 40000\n            }\n          ]\n        ];\n      }\n      return { filters, sortModel, mapTransform, position: res };\n    });\n  }\n\n  getLocationTypesTransform() {\n    return (res: ResponseObject, search, filters, start, pageSize) => {\n      return new Observable<ResponseObject>((observer: Observer<ResponseObject>) => {\n        if (res && res.data && res.data.length > 0) {\n          let ids = res.data.map((type: LocationType) => type._id);\n          this.getLocationTypesStat(ids).subscribe(stats => {\n            res.data.forEach((locationType: LocationType) => {\n              let stat = stats.find(s => s._id === locationType._id);\n              let count = stat ? stat.count || 0 : 0;\n              locationType.count = count;\n            });\n            observer.next({ count: res.count, data: <any>res.data });\n            observer.complete();\n          });\n        } else {\n          observer.next({ count: 0, data: [] });\n          observer.complete();\n        }\n      });\n    };\n  }\n\n  getLocationTypesStat(locationTypeIds: Array<string>): Observable<Array<{ _id: string; count: number }>> {\n    let filters: Filters = [[{ field: 'typeRef', operator: { _id: 'inq' }, value: locationTypeIds }]];\n    let options = [\n      {\n        $project: {\n          _id: '$typeRef'\n        }\n      },\n      {\n        $group: {\n          _id: '$_id',\n          count: { $sum: 1 }\n        }\n      }\n    ];\n    return this.broker.aggregateQuery('locations', filters, options);\n  }\n\n  getHealthscore(locationId: string, nbDays: Array<number> = [7, 30, 90]): Observable<Array<IHealthscore>> {\n    if (this.network.isOffline()) {\n      return from(this.cache.get(CACHE_KEYS.healthscore, locationId));\n    } else {\n      let url = this.config.apiUrl + 'locations/healthScore?storeId=' + locationId + '&days=[' + nbDays.toString() + ']';\n      return this.rq.get(url).pipe(\n        map(ret => {\n          let retVal = ret.data ? ret.data : ret;\n          this.cache.add(CACHE_KEYS.healthscore, locationId, retVal);\n          return retVal;\n        })\n      );\n    }\n  }\n\n  getUserLocations(userId: string) {\n    let url = this.config.apiUrl + 'businesslogic/getUserLocations';\n    return this.rq.post(url, { userId });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Session } from '../session/session.service';\n//require('yoobic-loopback-node-sdk/client/browserify.bundle');\n\n@Injectable()\nexport class Loopback {\n  private _client = (<any>window).loopbackClient;\n\n  constructor(private session: Session) {\n    if (this._client) {\n      //this._client.setBaseUrl(this._config.apiUrl);\n      this._client.setAccessToken(this.session.token);\n    }\n  }\n\n  get client() {\n    return this._client;\n  }\n}\n","import { Translate } from '@shared/translate';\nimport { IMissionDescription, IScoring, FormFieldType, IFormField, IRoles, IRole, SelectionQuery } from '@shared/stencil';\nimport { Slide } from '../slide/slide.interface';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { Condition, getGroupsTransform, ROLES_CONDITIONS } from '../condition/condition.interface';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { FORM_FILES_IMAGE_FILTER } from '../constants/constants.interface';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { range } from 'lodash-es';\n\nexport const MISSION_TYPES_NO_ADMIN = ['mission'];\nexport const MISSION_TYPES = ['mission', 'service', 'poll', 'todo', 'lesson']; //'template',, 'memo'\nexport const MISSION_STATUS = ['booked', 'finished', 'archived', 'scheduled'];\n\nlet conditions = {\n  isPoll: 'type == \"poll\"',\n  isMission: 'type == \"mission\"',\n  isQuizz: 'quizz == 1',\n  isService: 'type == \"service\"',\n  notService: 'not (type == \"service\")',\n  notPollOrService: 'not (type == \"service\") and not (type == \"poll\")',\n  isPollOrService: 'type==\"poll\" or type==\"service\"' //,\n  //isUpdate: 'isNullOrEmpty(getAttributeValue(\"_ect\")) == 0'\n};\n\nexport function onMissionDescriptionTypeChange(value, data, field) {\n  // if (value && (value === 'service' || value === 'poll' || value === 'lesson')) {\n  //   setTimeout(() => {\n  //     controls.language.setValue(controls.language.getValue() || Translate.currentLanguage);\n  //   }, 300);\n  // }\n  // let groupIndex = formDefinition.findIndex(f => f.name === 'group');\n  // let group = formDefinition[groupIndex];\n  // if (value === 'service') {\n  //   group.title = 'SERVICEGROUPS';\n  // } else {\n  //   group.title = 'MISSIONGROUPS';\n  // }\n  // formDefinition[groupIndex] = { ...group };\n  // return true;\n}\n\n@Model({\n  className: 'MissionDescription',\n  collectionName: 'missiondescriptions',\n  fields: [\n    '_ect',\n    '_id',\n    '_lmt',\n    '_tenant',\n    '_tenantRef',\n    'allowMultiple',\n    'allowSameUserValidation',\n    'archived',\n    'audit',\n    'autoRenew',\n    'autoRenewOnBooking',\n    'background',\n    'bookingDuration', //\n    'category',\n    'categoryRef',\n    'count',\n    'duration',\n    'finishedGroups',\n    'generateTitle',\n    'group',\n    'icon',\n    'language',\n    'locationOptions',\n    'missionTags',\n    'multiple',\n    'notificationemail',\n    'notify',\n    'notifyBody',\n    'notifyScheduledDate',\n    'pdfMode',\n    'price',\n    'priority',\n    'public',\n    'quizz',\n    'quizzMode',\n    'recurring',\n    'scoring',\n    'showAnswers',\n    'skipValidation',\n    'submittext',\n    'successtext',\n    'tags',\n    'text',\n    'title',\n    'type',\n    'validFrom',\n    'validUntil',\n    'versionmin',\n    'storesQuery'\n  ],\n  include: ['_tenant'], //'category',\n  icon: 'yo-campaign'\n})\nexport class MissionDescription extends IMissionDescription {\n  @Editable('MissionDescription', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 1\n  })\n  _id?: string;\n\n  @Editable('MissionDescription', {\n    type: FormFieldType.autocomplete,\n    title: 'TYPE',\n    values: MISSION_TYPES, //MISSION_TYPES_NO_ADMIN,\n    translate: true,\n    clearable: false,\n    required: true,\n    exportOrder: 3,\n    filterable: true,\n    onChange: onMissionDescriptionTypeChange\n  })\n  type: string;\n\n  @Editable('MissionDescription', {\n    required: true,\n    title: 'TITLE',\n    sortable: true,\n    type: FormFieldType.text,\n    exportOrder: 2\n  })\n  @Searchable('MissionDescription')\n  title: string;\n\n  @Editable('MissionDescription', {\n    required: true,\n    title: 'DESCRIPTION',\n    type: FormFieldType.textarea,\n    filterable: false,\n    sortable: false,\n    language: 'html'\n  }) //\n  text: string;\n\n  @Editable('MissionDescription', {\n    type: FormFieldType.autocomplete,\n    filters: FORM_FILES_IMAGE_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    fixedPosition: true,\n    maxWidth: 160,\n    maxHeight: 160,\n    crop: 'circle',\n    collectionName: 'files',\n    title: 'ICON',\n    required: true,\n    flex: 50,\n    columnDefinition: { name: '_downloadURL' },\n    filterable: false,\n    sortable: false\n  })\n  icon: any;\n\n  @Editable('MissionDescription', {\n    title: 'CAMPAIGNTAGS',\n    filterable: true,\n    type: FormFieldType.autocomplete,\n    clearable: true,\n    tag: true,\n    allowCustomTag: true,\n    collectionName: 'missiondescriptions',\n    multiple: true,\n    subQuery: { field: 'descriptionRef', values: '_id' },\n    filters: [[{ field: 'archived', operator: { _id: 'neq' }, value: true }]],\n    icon: 'yo-tag',\n    secondary: true\n  })\n  tags: Array<string>;\n\n  background: any;\n  group: Array<string>;\n  serviceGroups: Array<string>;\n  missionTags: Array<string>;\n  slides: Array<Slide>;\n  public: boolean;\n  skipValidation: boolean;\n  allowSameUserValidation: boolean;\n  allowMultiple: boolean;\n  quizz: boolean;\n  quizzMode: string;\n  showAnswers: boolean;\n  audit: boolean;\n  recurring: boolean;\n  category: MissionDescription;\n  language: string;\n  submittext: string;\n  successtext: string;\n  versionmin: string;\n  finishedGroups: Array<string>;\n  roles?: Array<IRole>;\n  archived: boolean;\n  count: number;\n  storesQuery?: SelectionQuery;\n  latest: Date;\n  _ect: any;\n  conditions: Array<Condition>;\n  scoring: Array<Scoring>;\n  _tenant: Tenant;\n  _tenantRef?: string;\n\n  //MissionDescriptionSchedule\n  validFrom: Date;\n  validUntil: Date;\n  duedate: Date;\n\n  //MissionDescriptionNotifications\n  notify?: boolean;\n  notifyBody?: string;\n  notifyScheduledDate?: Date;\n  notificationemail?: Array<string>;\n  disableLocationNotificationemail?: boolean;\n  pdfMode?: string;\n}\n\n@Model({\n  className: 'MissionDescriptionCreate'\n})\nexport class MissionDescriptionCreate extends IMissionDescription {\n  type: string;\n\n  @Editable('MissionDescriptionCreate', {\n    required: true,\n    title: 'TITLE',\n    sortable: true,\n    type: FormFieldType.text,\n    exportOrder: 2\n  })\n  title: string;\n\n  @Editable('MissionDescriptionCreate', {\n    required: true,\n    title: 'DESCRIPTION',\n    type: FormFieldType.textarea,\n    filterable: false,\n    sortable: false,\n    language: 'html'\n  })\n  text: string;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.autocomplete,\n    filters: FORM_FILES_IMAGE_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    fixedPosition: true,\n    maxWidth: 160,\n    maxHeight: 160,\n    crop: 'circle',\n    collectionName: 'files',\n    title: 'ICON',\n    required: true,\n    columnDefinition: { name: '_downloadURL' },\n    filterable: false,\n    sortable: false\n  })\n  icon: any;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.autocomplete,\n    values: range(1, 5)\n  })\n  priority: any;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.toggle,\n    condition: [conditions.isMission],\n    title: 'AUDIT',\n    columnDefinition: { width: 80 }\n  })\n  audit: boolean;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.toggle,\n    condition: [conditions.isMission],\n    title: 'RECURRING',\n    columnDefinition: { width: 80 }\n  })\n  recurring: boolean;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.toggle,\n    condition: conditions.isPoll,\n    columnDefinition: { width: 80 }\n  })\n  allowMultiple: boolean;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.toggle,\n    condition: conditions.isPoll,\n    title: 'QUIZZ',\n    columnDefinition: { width: 80 }\n  })\n  quizz: boolean;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.autocomplete,\n    condition: conditions.isQuizz,\n    flex: 100,\n    title: 'MODE',\n    values: ['ALLANSWERSVALID', 'ALLOWUNVALIDANSWERS', 'LIVEANSWERS'],\n    translate: true,\n    columnDefinition: { width: 80 }\n  })\n  quizzMode: string;\n\n  @Editable('MissionDescriptionCreate', {\n    type: FormFieldType.toggle,\n    condition: conditions.isQuizz,\n    flex: 100,\n    title: 'SHOWANSWERS',\n    columnDefinition: { width: 80 }\n  })\n  showAnswers: boolean;\n\n  @Editable('MissionDescription', {\n    type: FormFieldType.autocomplete,\n    required: true,\n    condition: conditions.isPollOrService,\n    title: 'LANGUAGE',\n    flex: 100,\n    translate: true,\n    values: Translate.availablesLanguageAll,\n    clearable: false\n  })\n  language: string;\n\n  @Editable('MissionDescriptionCreate', {\n    title: 'CAMPAIGNTAGS',\n    filterable: true,\n    type: FormFieldType.autocomplete,\n    clearable: true,\n    tag: true,\n    allowCustomTag: true,\n    collectionName: 'missiondescriptions',\n    multiple: true,\n    subQuery: { field: 'descriptionRef', values: '_id' },\n    icon: 'yo-tag',\n    secondary: true\n  })\n  tags: Array<string>;\n\n  slides: Array<Slide>;\n\n  @Editable('MissionDescriptionCreate', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    condition: [ROLES_CONDITIONS.isAdmin],\n    collectionName: 'tenants',\n    multiple: false,\n    columnDefinition: { name: 'name' }\n  })\n  _tenant: Tenant;\n  _tenantRef?: string;\n}\n\n@Model({\n  className: 'MissionDescriptionSchedule'\n})\nexport class MissionDescriptionSchedule extends IMissionDescription {\n  @Editable('MissionDescriptionSchedule', {\n    title: 'MISSIONVALIDFROMTOOLTIP',\n    type: FormFieldType.datetime,\n    condition: conditions.notService,\n    externalValidators: [{ externalFieldName: 'validUntil', rule: 'lower' }]\n  })\n  validFrom: Date;\n\n  @Editable('MissionDescriptionSchedule', {\n    title: 'MISSIONVALIDUNTILTOOLTIP',\n    type: FormFieldType.datetime,\n    condition: conditions.notService,\n    externalValidators: [{ externalFieldName: 'validFrom', rule: 'higher' }]\n  })\n  validUntil: Date;\n\n  @Editable('MissionDescriptionSchedule', {\n    title: 'MISSIONDUEDATE',\n    type: FormFieldType.datetime,\n    condition: conditions.notService\n  })\n  duedate: Date;\n\n  // @Editable('MissionGenerate', {\n  //   tabIndex: 2,\n  //   tab: 'OPTIONS',\n  //   type: FormFieldType.schedule,\n  //   hideLabel: true,\n  //   condition: conditions.isScheduled,\n  //   flex: 100\n  // })\n  // schedule: boolean;\n}\n\n@Model({\n  className: 'MissionDescriptionNotifications'\n})\nexport class MissionDescriptionNotifications extends IMissionDescription {\n  @Editable('MissionDescriptionNotifications', {\n    type: FormFieldType.toggle,\n    condition: conditions.notService\n  })\n  notify: boolean;\n\n  @Editable('MissionDescriptionNotifications', {\n    title: 'NOTIFICATION',\n    required: true,\n    condition: 'notify == 1',\n    type: FormFieldType.textarea\n  })\n  notifyBody: string;\n\n  @Editable('MissionDescriptionNotifications', {\n    title: 'SCHEDULEDDATE',\n    required: false,\n    condition: 'notify == 1',\n    type: FormFieldType.datetime\n  })\n  notifyScheduledDate: Date;\n\n  @Editable('MissionDescriptionNotifications', {\n    title: 'NOTIFICATIONEMAILS',\n    type: FormFieldType.emailreport,\n    showUsers: true,\n    stateful: false,\n    filterable: false,\n    sortable: false\n  })\n  notificationemail: Array<string>;\n\n  @Editable('MissionDescriptionNotifications', {\n    type: FormFieldType.toggle,\n    columnDefinition: { width: 80 },\n    suppressExport: true\n  })\n  disableLocationNotificationemail: boolean;\n\n  @Editable('MissionDescriptionNotifications', {\n    title: 'PDFEXPORT',\n    type: FormFieldType.selectcard,\n    translate: true,\n    values: [\n      { title: 'PDFCLASSIC', description: 'PDFCLASSICDESCRIPTION', value: 'PDFCLASSIC' }, //\n      { title: 'PDFPHOTOREPORT', description: 'PDFPHOTOREPORTDESCRIPTION', value: 'PDFPHOTOREPORT' },\n      { title: 'PDFAUDITEXPORTS', description: 'PDFAUDITEXPORTSDESCRIPTION', value: 'PDFAUDITEXPORTS' },\n      { title: 'PDFCONTRACT', description: 'PDFCONTRACTDESCRIPTION', value: 'PDFCONTRACT' }\n    ],\n    filterable: false\n  })\n  pdfMode?: string;\n}\n\n@Model({\n  className: 'MissionDescriptionSettings'\n})\nexport class MissionDescriptionSettings extends IMissionDescription {\n  @Editable('MissionDescriptionSettings', {\n    required: true,\n    title: 'MISSIONGROUPS',\n    header: 'PERMISSIONS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false\n  })\n  group: Array<string>;\n\n  @Editable('MissionDescriptionSettings', {\n    required: false,\n    title: 'MISSIONGROUPS',\n    type: FormFieldType.autocomplete,\n    condition: conditions.isService,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false\n  })\n  serviceGroups: Array<string>;\n\n  @Editable('MissionDescriptionSettings', {\n    required: false,\n    title: 'FINISHEDGROUPS',\n    type: FormFieldType.autocomplete,\n    condition: [conditions.isMission],\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: true\n  })\n  finishedGroups: Array<string>;\n\n  @Editable('MissionDescriptionSettings', {\n    multiple: true,\n    type: FormFieldType.autocomplete,\n    exportOrder: 15,\n    values: IRoles,\n    translate: true,\n    filterableAdvanced: true\n  })\n  roles?: Array<IRole>;\n\n  @Editable('MissionDescriptionSettings', {\n    title: 'CATEGORIES',\n    type: FormFieldType.autocomplete,\n    tag: true,\n    collectionName: 'missions',\n    multiple: true,\n    subQuery: { field: 'descriptionRef', values: '_id' },\n    icon: 'yo-flag',\n    filterable: false\n  })\n  missionTags: Array<string>;\n\n  @Editable('MissionDescriptionSettings', {\n    header: 'COMPLIANCE',\n    type: FormFieldType.toggle,\n    title: 'SKIPVALIDATION',\n    columnDefinition: { width: 80 },\n    filterableAdvanced: true\n  })\n  skipValidation: boolean;\n\n  @Editable('MissionDescriptionSettings', {\n    type: FormFieldType.toggle,\n    title: 'ALLOWSAMEUSERVALIDATION',\n    condition: [ROLES_CONDITIONS.isManager, ROLES_CONDITIONS.isAdminOrClientAdmin],\n    columnDefinition: { width: 80 },\n    filterableAdvanced: true\n  })\n  allowSameUserValidation: boolean;\n\n  @Editable('MissionDescriptionSettings', {\n    header: 'MISSIONSETTINGS',\n    type: FormFieldType.toggle,\n    condition: conditions.notPollOrService,\n    flex: 100\n  })\n  autoRenew: boolean;\n\n  @Editable('MissionDescriptionSettings', {\n    type: FormFieldType.toggle,\n    condition: [conditions.notPollOrService]\n  }) //, readonly: conditions.isScheduled\n  autoRenewOnBooking: boolean;\n\n  @Editable('MissionDescriptionSettings', {\n    title: 'CHECK',\n    clearable: true,\n    type: FormFieldType.selectcard,\n    values: [\n      { title: 'AVAILABLE', description: 'CHECKAVAILABLE', value: 'CHECKAVAILABLE' }, //\n      { title: 'EXISTING', description: 'CHECKEXISTING', value: 'CHECKEXISTING' }\n    ],\n    translate: true,\n    condition: conditions.notPollOrService\n  })\n  locationOptions: string;\n\n  @Editable('MissionDescriptionSettings', {\n    header: 'MISC',\n    required: false,\n    title: 'MISSIONDURATION',\n    type: FormFieldType.number\n  })\n  duration: number;\n\n  @Editable('MissionDescriptionSettings', {\n    condition: conditions.isService,\n    title: 'SUBMITTEXT',\n    type: FormFieldType.text,\n    filterable: false,\n    sortable: false\n  })\n  submittext: string;\n\n  @Editable('MissionDescriptionSettings', {\n    condition: conditions.isService,\n    title: 'SUCCESSTEXT',\n    type: FormFieldType.text,\n    filterable: false,\n    sortable: false\n  })\n  successtext: string;\n\n  @Editable('MissionDescriptionSettings', {\n    title: 'VERSIONMIN',\n    type: FormFieldType.text,\n    sortable: false,\n    condition: ROLES_CONDITIONS.isAdmin,\n    filterableAdvanced: true\n  })\n  versionmin: string;\n}\n\nlet scoringConditions = {\n  isPercentage: 'isPercentage == 1'\n};\n\n@Model({ className: 'Scoring' })\nexport class Scoring extends IScoring {\n  @Editable('Scoring', { required: true, type: FormFieldType.text })\n  title: string;\n\n  @Editable('Scoring', { type: FormFieldType.textarea })\n  description: string;\n\n  @Editable('Scoring', {\n    title: 'INITIALSCORE',\n    type: FormFieldType.number,\n    advanced: true,\n    condition: ROLES_CONDITIONS.isAdmin\n  })\n  initialValue: number;\n\n  @Editable('Scoring', {\n    title: 'MINSCOREFORVALIDATION',\n    type: FormFieldType.number,\n    advanced: true\n  })\n  minValue: number;\n\n  @Editable('Scoring', {\n    type: FormFieldType.checkbox,\n    title: 'ISPRIMARYSCORE',\n    columnDefinition: { width: 80 }\n  })\n  isActive: boolean;\n\n  @Editable('Scoring', { type: FormFieldType.checkbox, title: 'ISLIVE', columnDefinition: { width: 80 } })\n  isLive: boolean;\n\n  @Editable('Scoring', {\n    type: FormFieldType.checkbox,\n    title: 'PERCENTAGE',\n    columnDefinition: { width: 80 },\n    advanced: true\n  })\n  isPercentage: boolean;\n\n  @Editable('Scoring', {\n    title: 'TOTAL',\n    type: FormFieldType.number,\n    condition: scoringConditions.isPercentage,\n    required: true\n  })\n  percentageBasis: number;\n\n  @Editable('Scoring', {\n    type: FormFieldType.autocomplete,\n    multiple: true,\n    title: 'FIELDS',\n    displayType: 'formfield'\n  })\n  selectedFields: Array<IFormField>;\n}\n","import { Injectable } from '@angular/core';\nimport { IFormField, FormFieldType } from '@shared/stencil';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { MissionDescription, MISSION_STATUS } from '../../interfaces/mission-description/mission-description.interface';\nimport { Models } from '../models/models.service';\nimport { Slide } from '../../interfaces/slide/slide.interface';\n\nimport { cloneDeep, uniq, concat, forEach } from 'lodash-es';\n\n@Injectable()\nexport class Missiondescriptions {\n  /*\n        Return the transform to extract the fields from a mission description\n    */\n  static getFieldTransform(types: Array<string> = []): (res: ResponseObject) => ResponseObject {\n    return Models.getFieldTransform(types);\n  }\n\n  /*\n        Return the list of slide items fields from a mission description (mobile type)\n    */\n  static getFields(missiondescription: MissionDescription, types: Array<string> = [], excludedTypes: Array<string> = []) {\n    return Models.getFields(missiondescription, types, excludedTypes);\n  }\n\n  /*\n        Return the list of slide items fields from an array of slides (mobile type)\n    */\n  static getFieldsFromSlides(slides: Array<Slide>, types: Array<string> = [], excludedTypes: Array<string> = []) {\n    return Models.getFieldsFromSlides(slides, types, excludedTypes);\n  }\n\n  /*\n        Return the list of form field from a mission description. Used in the mission data grid and form\n    */\n  public static getFormFields(missiondescription: MissionDescription, translate, includeComments = false): Array<IFormField> {\n    let mobileFields = Models.getFields(missiondescription, null, ['information']);\n    mobileFields = mobileFields.reduce((previous: Array<IFormField>, current: IFormField) => {\n      let retVal = cloneDeep(current);\n      retVal.name += '.value';\n      retVal.operators = Models.getFieldOperator(current);\n      //retVal.type = Models.getFormFieldFromMobileField(retVal.type);\n      previous.push(retVal);\n\n      if (current.allowComments && includeComments) {\n        retVal = cloneDeep(current);\n        retVal.title = translate.polyglot(retVal.title) + ' .C';\n        retVal.name += '.comments';\n        retVal.type = FormFieldType.text;\n        previous.push(retVal);\n      }\n\n      if (current.allowTime && includeComments) {\n        retVal = cloneDeep(current);\n        retVal.title = translate.polyglot(retVal.title) + ' .T';\n        retVal.name += '.time';\n        retVal.type = FormFieldType.datetime;\n        previous.push(retVal);\n      }\n      return previous;\n    }, []);\n    if (missiondescription.type === 'service') {\n      mobileFields.unshift({\n        name: 'mission.status',\n        title: 'STATUS',\n        type: FormFieldType.autocomplete,\n        translate: true,\n        values: uniq(concat(MISSION_STATUS, [undefined])),\n        handleUndefined: true,\n        columnDefinition: { cellRenderer: 'missionStatusRenderer' },\n        operators: Models.getFieldOperator({ type: FormFieldType.autocomplete })\n      });\n      mobileFields.unshift({\n        name: 'mission.creatorDisplayName',\n        title: 'REQUESTOR',\n        type: FormFieldType.text,\n        operators: Models.getFieldOperator({ type: FormFieldType.text })\n      });\n      mobileFields.unshift({\n        name: 'mission._ect',\n        title: 'CREATIONDATE',\n        type: FormFieldType.datetime,\n        operators: Models.getFieldOperator({ type: FormFieldType.datetime })\n      });\n    }\n    if (missiondescription.scoring && missiondescription.scoring.length > 0) {\n      forEach(missiondescription.scoring, scoring => {\n        if (scoring.isActive !== true) {\n          mobileFields.unshift({\n            name: 'extraScores.' + scoring.title + '.value',\n            title: scoring.title,\n            type: FormFieldType.number\n          });\n        } else {\n          mobileFields.unshift({ name: 'score.value', title: scoring.title, type: FormFieldType.number });\n        }\n      });\n    }\n    return mobileFields;\n  }\n\n  static encodeScoringValue(v) {\n    if (v && v.toString) {\n      return v.toString().replace(/\\./, '_');\n    } else {\n      return v;\n    }\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Files } from '../files/files.service';\nimport { Config } from '../config/config.service';\nimport { Models } from '../models/models.service';\nimport { Authentication } from '../authentication/authentication.service';\n\nimport { IFormField, Query, SubQuery, FormFieldType, downloadFile, IColumnDefinition } from '@shared/stencil';\n\nimport { compact, sortBy, cloneDeep, uniq, get } from 'lodash-es';\nimport { timer, of } from 'rxjs';\nimport { concatMap, filter, take, catchError } from 'rxjs/operators';\n@Injectable()\nexport class Print {\n  protected excludedDashboardColumns: Array<string> = ['validated', 'validatedBy', 'owner.username', 'creator.username', 'user.username'];\n\n  constructor(protected rq: Requestor, protected config: Config, protected authentication: Authentication, protected files: Files) {}\n\n  printToMapping(collectionName: string, columns: Array<IFormField>, query: Query, subQuery: SubQuery, aggregateOptions: Array<any>, type: 'csv' | 'xlsx', campaignFields: Array<IFormField>, filename?: string, progress?: EventEmitter<number>) {\n    let publicCollectionName = Models.getPublicCollectionName(collectionName);\n    let url = this.config.publicApiUrl + publicCollectionName + '/export';\n    type = type === 'xlsx' ? 'xlsx' : 'csv';\n    //query.limit = 25500;\n    if (subQuery) {\n      query.subQuery = subQuery;\n    }\n\n    let model = Models.getModelByCollectionName(collectionName);\n    query.include = model.include;\n\n    let exportColumns = sortBy(cloneDeep(columns.filter(c => !c.suppressExport)), c => c.exportOrder || 100).map((c: any) => {\n      if (c.field) {\n        c.field = c.field.replace(/\\?/g, '');\n      }\n      return c;\n    });\n\n    if (this.authentication.isDashboard()) {\n      exportColumns = exportColumns.filter(c => this.excludedDashboardColumns.indexOf(c.field) < 0);\n    }\n    //let mime = type === 'csv' ? 'text/plain' : 'application/xlsx';\n    filename = this.files.cleanFileName(filename || publicCollectionName) + this.rq.getFilenameSuffix() + '.' + type;\n    let cacheQuery: any = {};\n    if (campaignFields && campaignFields.length > 0) {\n      let catalogs = uniq(campaignFields.filter(f => f.type === FormFieldType.catalog).map(f => f.catalog));\n      if (catalogs.length > 0) {\n        cacheQuery.products = { where: { catalogRef: { inq: catalogs } } };\n      }\n      let collectionNames = compact(uniq(campaignFields.filter(f => f.type === FormFieldType.autocomplete).map(f => f.collectionName)));\n      if (collectionNames.length > 0) {\n        cacheQuery.custommodels = { where: { name: { inq: collectionNames } }, cacheKey: 'name' };\n      }\n    }\n    query = cloneDeep(query);\n    delete query.fields;\n    return this.rq\n      .get(url, false, null, [{ name: 'filter', value: JSON.stringify(query) }, { name: 'type', value: type === 'xlsx' ? 'excel' : 'csv' }]) //r.token\n      .toPromise()\n      .then(ret => {\n        if (ret._id) {\n          return timer(1000, 500)\n            .pipe(\n              concatMap(() => {\n                return this.rq.get(this.config.publicApiUrl + 'jobs/' + ret._id, false, null).pipe(\n                  catchError(() => {\n                    return of({});\n                  })\n                );\n              })\n            )\n            .pipe(\n              filter(s => {\n                if (progress && s && s.progress) {\n                  progress.emit(s.progress * 100);\n                }\n                return s && s.progress === 1;\n              })\n            )\n            .pipe(take(1))\n            .toPromise()\n            .then(res => {\n              let fileUrl = get(res, 'data.output.data.download_url');\n              if (fileUrl) {\n                return downloadFile(fileUrl, filename);\n              }\n            });\n        }\n      });\n  }\n\n  printToSpreadsheet(collectionName: string, columns: Array<IColumnDefinition>, query: Query, subQuery: SubQuery, aggregateOptions: Array<any>, channel: string, type: string, campaignFields: Array<IFormField>, filename?: string) {\n    let url = this.config.apiUrl + 'print/write-spreadsheet';\n    let fixedCollectionName = Models.fixCollectionName(collectionName);\n    type = type === 'csv' ? 'csv' : 'xlsx';\n    //query.limit = 25500;\n    if (subQuery) {\n      query.subQuery = subQuery;\n    }\n\n    let model = Models.getModelByCollectionName(collectionName);\n    query.include = model.include;\n\n    let exportColumns = sortBy(cloneDeep(columns.filter(c => !c.suppressExport)), (c: any) => c.exportOrder || 100).map((c: any) => {\n      if (c.field) {\n        c.field = c.field.replace(/\\?/g, '');\n      }\n      return c;\n    });\n\n    if (this.authentication.isDashboard()) {\n      exportColumns = exportColumns.filter(c => this.excludedDashboardColumns.indexOf(c.field) < 0);\n    }\n    let mime = type === 'csv' ? 'text/plain' : 'application/xlsx';\n    filename = this.files.cleanFileName(filename || fixedCollectionName) + this.rq.getFilenameSuffix() + '.' + type;\n    let cacheQuery: any = {};\n    if (campaignFields && campaignFields.length > 0) {\n      let catalogs = uniq(campaignFields.filter(f => f.type === FormFieldType.catalog).map(f => f.catalog));\n      if (catalogs.length > 0) {\n        cacheQuery.products = { where: { catalogRef: { inq: catalogs } } };\n      }\n      let collectionNames = compact(uniq(campaignFields.filter(f => f.type === FormFieldType.autocomplete).map(f => f.collectionName)));\n      if (collectionNames.length > 0) {\n        cacheQuery.custommodels = { where: { name: { inq: collectionNames } }, cacheKey: 'name' };\n      }\n    }\n\n    let body = {\n      collectionName: fixedCollectionName,\n      columns: exportColumns,\n      query,\n      aggregateOptions,\n      channel,\n      type,\n      cacheQuery\n    };\n    return this.rq.downloadFile(filename, mime, url, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: body\n    });\n  }\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IGroup } from '@shared/stencil';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { ROLES_CONDITIONS } from '../condition/icondition.interface';\nimport { FORM_FILES_GROUP_FILTER } from '../constants/constants.interface';\n\nlet conditions = {\n  isUpdate: 'getAttributeValue(\"_ect\")',\n  isCreate: 'not getAttributeValue(\"_ect\")',\n  isNotRole: 'not (isRole == 1)'\n};\n\n@Model({\n  className: 'Group',\n  collectionName: 'groups',\n  fields: ['*'],\n  include: ['_tenant'],\n  icon: 'yo-group'\n})\nexport class Group extends IGroup {\n  @Editable('Group', {\n    required: true,\n    title: 'ID',\n    type: FormFieldType.text,\n    readonly: conditions.isUpdate,\n    forceExport: true,\n    exportOrder: 1\n  })\n  @Searchable('Group')\n  _id: string;\n\n  @Editable('Group', { required: false, type: FormFieldType.text })\n  @Searchable('Group')\n  title: string;\n\n  @Editable('Group', { required: false, type: FormFieldType.textarea })\n  @Searchable('Group')\n  description: string;\n\n  @Editable('Group', {\n    type: FormFieldType.autocomplete,\n    filters: FORM_FILES_GROUP_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    clearable: true,\n    fixedPosition: true,\n    maxWidth: 160,\n    maxHeight: 160,\n    crop: 'circle',\n    collectionName: 'files',\n    title: 'ICON',\n    columnDefinition: { name: '_downloadURL' },\n    filterable: false,\n    sortable: false\n  })\n  icon: any;\n\n  @Editable('Group', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    condition: [ROLES_CONDITIONS.isAdmin, conditions.isNotRole],\n    collectionName: 'tenants',\n    multiple: false,\n    columnDefinition: { name: 'name' }\n  })\n  _tenant: Tenant;\n\n  @Editable('Group', {\n    type: FormFieldType.toggle,\n    condition: [conditions.isCreate, ROLES_CONDITIONS.isAdmin]\n  })\n  team?: boolean;\n\n  @Editable('Group', {\n    title: 'ROLE',\n    type: FormFieldType.toggle,\n    condition: [ROLES_CONDITIONS.isAdmin]\n  })\n  isRole?: boolean;\n\n  @Editable('Group', {\n    type: FormFieldType.toggle,\n    condition: [conditions.isCreate, ROLES_CONDITIONS.isAdmin]\n  })\n  service?: boolean;\n\n  @Editable('Group', {\n    readonly: true,\n    visible: false,\n    forceExport: true,\n    filterable: false,\n    columnDefinition: { name: 'list.length' },\n    type: FormFieldType.number,\n    exportOrder: 2\n  })\n  users?: any;\n\n  @Editable('Group', {\n    readonly: true,\n    visible: false,\n    forceExport: true,\n    filterable: false,\n    columnDefinition: { name: 'length' },\n    type: FormFieldType.number,\n    exportOrder: 3\n  })\n  groups?: any;\n\n  @Editable('Group', {\n    name: '_ect',\n    title: 'CREATIONDATE',\n    type: FormFieldType.date,\n    readonly: true\n  })\n  _ect?: any;\n}\n","import { Injectable } from '@angular/core';\nimport { Broker } from '../broker/broker.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { User } from '../../interfaces/user/user.interface';\nimport { Group } from '../../interfaces/group/group.interface';\nexport * from '../../interfaces/group/group.interface';\nimport { ROLES as ROLES_LIST, ROLES_ASK } from '../../interfaces/condition/condition.interface';\nimport { Config } from '../config/config.service';\n\nimport { Observable } from 'rxjs';\nimport { flatMap, map as map$ } from 'rxjs/operators';\n\nimport { uniq, concat, map, difference } from 'lodash-es';\n\n@Injectable()\nexport class Security {\n  public static ROLES = ROLES_LIST;\n  public static ROLES_ASK = ROLES_ASK;\n\n  constructor(protected broker: Broker, protected rq: Requestor, protected config: Config) {}\n  /**\n    Return the list of groups and roles for a specific user\n    */\n  getUserSession(userId: string): Observable<any> {\n    return this.rq.post(this.broker.getApiUrl() + 'businesslogic/getUserSession', { userId });\n  }\n\n  /**\n    Add the specified users to the group\n    */\n  addGroupUsers(group: Group, users: User[]): Observable<any> {\n    this.initGroup(group);\n    if (group._id) {\n      return this.broker.patch('groups', {\n        _id: group._id,\n        $addToSet: { 'users.list': { $each: map(users, '_id') } }\n      });\n    } else {\n      //not used\n      group.users.list = uniq(concat(group.users.list, map(users, '_id')));\n      return this.broker.create('groups', group);\n    }\n  }\n\n  /**\n    Remove the specified users to the group\n    */\n  removeGroupUsers(group: Group, users: User[]): Observable<any> {\n    this.initGroup(group);\n    if (group._id) {\n      return this.broker.patch('groups', {\n        _id: group._id,\n        $pullAll: { 'users.list': map(users, '_id') }\n      });\n    } else {\n      //not used\n      group.users.list = uniq(difference(group.users.list, map(users, '_id')));\n      return this.broker.create('groups', group);\n    }\n  }\n\n  /**\n       Add the specified groups to the group\n       */\n  addGroupGroups(group: Group, groups: Group[]): Observable<any> {\n    this.initGroup(group);\n    if (group._id) {\n      return this.broker.patch('groups', {\n        _id: group._id,\n        $addToSet: { groups: { $each: map(groups, '_id') } }\n      });\n    } else {\n      group.groups = uniq(concat(group.groups, map(groups, '_id')));\n      return this.broker.create('groups', group);\n    }\n  }\n\n  /**\n   Remove the specified groups to the group\n   */\n  removeGroupGroups(group: Group, groups: Group[]): Observable<any> {\n    this.initGroup(group);\n    if (group._id) {\n      return this.broker.patch('groups', {\n        _id: group._id,\n        $pullAll: { groups: map(groups, '_id') }\n      });\n    } else {\n      group.groups = uniq(difference(group.groups, map(groups, '_id')));\n      return this.broker.create('groups', group);\n    }\n  }\n\n  updateGroup(id: string, addedUsers: Array<User>, removedUsers: Array<User> = [], addedGroups: Array<Group> = [], removedGroups: Array<Group> = []): Observable<any> {\n    return this.broker\n      .patch('groups', {\n        _id: id,\n        $pullAll: {\n          'users.list': map(removedUsers, '_id'),\n          groups: map(removedGroups, '_id')\n        }\n      })\n      .pipe(\n        flatMap(() => {\n          return this.broker.patch('groups', {\n            _id: id,\n            $addToSet: {\n              'users.list': { $each: map(addedUsers, '_id') },\n              groups: { $each: map(addedGroups, '_id') }\n            }\n          });\n        })\n      );\n  }\n\n  initGroup(group: Group) {\n    group.groups = group.groups || [];\n    group.users = group.users || {};\n    group.users.list = group.users.list || [];\n  }\n\n  /**\n        Returns the subquery used in the group's tab user grid\n        */\n  getGroupUserSubQuery(group: Group) {\n    return {\n      collectionName: 'group',\n      where: { _id: group._id },\n      field: '_id',\n      values: 'users.list'\n    };\n  }\n\n  /**\n    Returns the subquery used in the group's tab sub group grid\n    */\n  getGroupGroupSubQuery(group: Group) {\n    return {\n      collectionName: 'group',\n      where: { _id: group._id },\n      field: '_id',\n      values: 'groups'\n    };\n  }\n\n  getAncestry(groupIds: string[], mode: 'ancestors' | 'descendants' | 'both' = 'descendants') {\n    let url = this.config.apiUrl + 'groups/getAncestry';\n    return this.rq\n      .post(url, {\n        groupIds\n      })\n      .pipe(\n        map$(retVal => {\n          if (mode === 'descendants') {\n            return uniq([].concat(retVal.descendants || []).concat(groupIds || []));\n          } else if (mode === 'ancestors') {\n            return uniq([].concat(retVal.groups || []).concat(groupIds || []));\n          } else if (mode === 'both') {\n            return uniq(\n              []\n                .concat(retVal.descendants || [])\n                .concat(retVal.groups || [])\n                .concat(groupIds || [])\n            );\n          }\n        })\n      );\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Broker } from '../broker/broker.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { Config } from '../config/config.service';\n\nimport { ITenant } from '@shared/stencil';\nimport { timer, of } from 'rxjs';\nimport { concatMap, catchError, filter, take } from 'rxjs/operators';\nimport { get } from 'lodash-es';\n\n@Injectable()\nexport class Tenants {\n  constructor(protected rq: Requestor, protected broker: Broker, protected config: Config) {}\n\n  clone(from: ITenant, to: ITenant, progress?: EventEmitter<number>) {\n    return this.rq\n      .post(this.broker.getApiUrl() + 'demoManagement/CopyTenantToTenant', {\n        copyFromId: from._id,\n        copyToId: to._id\n      })\n      .toPromise()\n      .then(ret => {\n        if (ret._id) {\n          return timer(1000, 500)\n            .pipe(\n              concatMap(() => {\n                return this.rq.get(this.config.publicApiUrl + 'jobs/' + ret._id, false, null).pipe(\n                  catchError(() => {\n                    return of({});\n                  })\n                );\n              })\n            )\n            .pipe(\n              filter(s => {\n                if (progress && s && s.progress) {\n                  progress.emit(s.progress * 100);\n                }\n                return s && s.progress === 1;\n              })\n            )\n            .pipe(take(1))\n            .toPromise()\n            .then(res => {\n              let errors = get(res, 'data.output.errors');\n              let data = get(res, 'data.output.data');\n              return { data, errors };\n            });\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Broker } from '../broker/broker.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { User } from '../../interfaces/user/user.interface';\nimport { SubQuery, Query } from '@shared/stencil';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { uniq } from 'lodash-es';\n\n@Injectable()\nexport class Users {\n  public static adminIds: Array<any> = [{ _id: '53fb03c6546847ee0536386a' }];\n  public static simplifiedFields: Array<string> = ['_id', 'imageData', 'firstName', 'lastName', 'email', 'telephone', 'username'];\n\n  constructor(protected broker: Broker, protected rq: Requestor) {}\n\n  getSimplifiedProfile(\n    userId\n  ): Observable<{\n    _id?: string;\n    imageData?: string;\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    telephone?: string;\n    username?: string;\n  }> {\n    return this.broker.getById('user', userId, Users.simplifiedFields);\n  }\n\n  getFreshdeskUrl() {\n    let url = this.broker.getApiUrl() + 'endpoints/getFreshdeskUrl';\n    return this.rq.post(url, { host_url: 'support-mobile.operations.yoobic.com' }).pipe(\n      map(res => {\n        return res;\n      })\n    );\n  }\n\n  setAcl(user: User, groups: Array<string>) {\n    this.broker.setAcl(user, groups);\n  }\n\n  getCustomFilterNoAdmin(showMe: boolean = true) {\n    let ids = Users.adminIds.map(i => i._id);\n    if (!showMe) {\n      ids.push(this.rq.session.userId);\n    }\n    return { _id: { nin: ids } };\n  }\n\n  isUsernameTaken(username: string) {\n    return this.rq.post(this.broker.getApiUrl() + 'businesslogic/isUsernameTaken', { params: { username } }).pipe(map(res => res.data));\n  }\n\n  getUsersByLocation(locationId: string) {\n    return this.broker.getAll('user', Users.simplifiedFields, null, null, [[{ field: 'locationRef', operator: { _id: 'eq' }, value: locationId }]]).pipe(map(res => res.data));\n  }\n\n  getGeofilterUsers(locationId: string, userTags?: Array<string>) {\n    let where = { _id: { inq: [locationId] } };\n    let geofilterQuery: Query = {\n      limit: 0,\n      fields: ['userRef'],\n      subQuery: <SubQuery>{\n        collectionName: 'locations',\n        field: 'locationsRef',\n        values: '_id',\n        where: where\n      }\n    };\n    return this.broker.getAllQuery('geofilters', geofilterQuery).pipe(\n      mergeMap(geofilters => {\n        let userIds: Array<string> = geofilters.data.map(geofilter => geofilter.userRef);\n        userIds = uniq(userIds);\n        let userFilter = [[{ field: '_id', operator: { _id: 'inq' }, value: userIds }]];\n        if (userTags && userTags.length > 0) {\n          userFilter[0].push({ field: 'tags', operator: { _id: 'inq' }, value: userTags });\n        }\n        return this.broker.getAll('user', Users.simplifiedFields, null, null, userFilter).pipe(map(res => res.data));\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../config/config.service';\n\nimport { CoreConfig } from '@shared/common';\n\n@Injectable()\nexport class Version {\n  constructor(private config: Config, private coreConfig: CoreConfig) {}\n\n  public get(includeServerName: boolean) {\n    let retVal: string;\n    let serverName = this.config.serverName.toUpperCase();\n    if (includeServerName && serverName !== 'PRODUCTION') {\n      retVal = this.coreConfig.getAppVersion() + ' - ' + serverName;\n    } else {\n      retVal = this.coreConfig.getAppVersion();\n    }\n    // if (this.coreConfig.isWKWebView()) {\n    //   retVal += ' W';\n    // }\n    return retVal;\n  }\n\n  isCurrentVersionHigherThan(version: string): boolean {\n    let currentVersion = this.coreConfig.getAppVersion();\n    if (currentVersion === version) {\n      return true;\n    }\n\n    let current = currentVersion.split('.');\n    let required = version.split('.');\n    let len = Math.min(current.length, required.length);\n\n    // loop while the components are equal\n    for (let i = 0; i < len; i++) {\n      // A bigger than B\n      if (parseInt(current[i], null) > parseInt(required[i], null)) {\n        return true;\n      }\n      // B bigger than A\n      if (parseInt(current[i], null) < parseInt(required[i], null)) {\n        return false;\n      }\n    }\n    // If one's a prefix of the other, the longer one is greater.\n    if (current.length > required.length) {\n      return true;\n    }\n    if (current.length < required.length) {\n      return false;\n    }\n    // Otherwise they are the same.\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\n//import { WorkBook, read, readFile, utils, SSF, write } from 'xlsx';\nimport * as XLSX from 'xlsx';\n//const XLSX = require('xlsx');\nimport { toDate, getUTCOffset, dateAdd, dateFormat } from '@shared/stencil';\n\n//import * as FileSaver from 'file-saver';\nimport saveAs from 'file-saver';\nimport { parse } from 'papaparse';\n\nimport { forEach, get, isArray, isObject, isNumber, keys, find, isDate } from 'lodash-es';\n\n//declare const System: System;\n\n@Injectable()\nexport class Xlsx {\n  // private _xlsx: any;\n  // private _papaparse: any;\n\n  constructor() {}\n\n  // getXlsx() {\n  //     if (this._xlsx) {\n  //         return Promise.resolve(this._xlsx);\n  //     }\n  //     return System.import(/* webpackChunkName: \"xlsx\" */'xlsx').then((xlsx) => {\n  //         this._xlsx = xlsx;\n  //         return xlsx;\n  //     });\n  // }\n\n  // getPapaParse() {\n  //     if (this._papaparse) {\n  //         return Promise.resolve(this._papaparse);\n  //     }\n  //     return System.import(/* webpackChunkName: \"xlsx\" */'papaparse').then((papaparse) => {\n  //         this._papaparse = papaparse;\n  //         return papaparse;\n  //     });\n  // }\n\n  readFile(nativeFile: File | Blob, type = 'blob', encoding?: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let fileReader = new FileReader();\n      fileReader.onload = (e: any) => {\n        resolve(e.target.result);\n      };\n      fileReader.onerror = e => reject(e);\n      if (type === 'blob') {\n        fileReader.readAsDataURL(<any>nativeFile);\n      } else if (type === 'binary') {\n        fileReader.readAsBinaryString(<any>nativeFile);\n      } else {\n        fileReader.readAsText(<any>nativeFile, encoding);\n      }\n    });\n  }\n\n  read(file: File) {\n    //return this.getXlsx().then((xlsx: any) => {\n    //return this.getPapaParse().then((papaparse: any) => {\n    return this.readFile(file, 'binary').then(data => {\n      let csv = '';\n      if (file.name.endsWith('csv')) {\n        csv = data;\n      } else {\n        let workbook = XLSX.read(data, { type: 'binary' });\n        let worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        csv = XLSX.utils['sheet_to_csv'](worksheet, { FS: ';' });\n      }\n      let retVal = parse(csv, { skipEmptyLines: true });\n      return retVal.data;\n    });\n    //});\n    //});\n  }\n\n  exportToFile(content, type, encoding, filename) {\n    encoding = encoding || 'charset=ISO-8859-1';\n    filename = filename || 'data.csv';\n    type = type || 'data:application/csv;charset=ISO-8859-1;';\n\n    if (encoding === 'base64') {\n      content = this.b64toBlob(content, type);\n    }\n    let blob = new Blob([content], {\n      type: type\n    });\n    return this.saveBlob(blob, filename);\n  }\n\n  saveBlob(blob: Blob, filename: string) {\n    (<any>saveAs)(blob, filename);\n  }\n\n  getBase64MimeType(base64) {\n    return base64.split(';')[0].replace('data:', '');\n  }\n\n  b64toBlob(b64Data, contentType = null, sliceSize = 512) {\n    if (!contentType) {\n      contentType = this.getBase64MimeType(b64Data);\n    }\n    b64Data = b64Data.replace('data:' + contentType + ';base64,', '').replace(/\\s/g, '');\n    const byteCharacters = atob(b64Data);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    const blob = new Blob(byteArrays, { type: contentType });\n    return blob;\n  }\n\n  readSheets(file: File) {\n    //return this.getXlsx().then((xlsx: any) => {\n    //return this.getPapaParse().then((papaparse: any) => {\n    return this.readFile(file, 'binary').then(data => {\n      let retVal = [];\n      if (file.name.endsWith('csv')) {\n        retVal.push(parse(data, { skipEmptyLines: true }).data);\n      } else {\n        let workbook = XLSX.read(data, { type: 'binary' });\n        workbook.SheetNames.forEach(sheet => {\n          let v = XLSX.utils['sheet_to_csv'](workbook.Sheets[sheet], { FS: ';' });\n          retVal.push(parse(v, { skipEmptyLines: true }).data);\n        });\n      }\n      return retVal;\n    });\n    //});\n    //});\n  }\n\n  write(title: string, sheets: Array<{ columns: Array<any>; data: Array<any>; title: string }>) {\n    //return this.getXlsx().then((xlsx: any) => {\n    let tables = new Array<any>();\n    let headers = new Array<any>();\n    forEach(sheets, s => {\n      let hasHeader = false;\n      let table = [];\n      let header = [];\n      forEach(s.data, function(d) {\n        let row = [];\n        forEach(s.columns, function(c) {\n          if (!((c.visible === false || c.suppressExport === true || c.action) && c.forceExport !== true)) {\n            let value: any = get(d, c.name);\n            if (c.type === 'address') {\n              value = value && value.address ? value.address : value;\n              if (typeof value === 'object') {\n                value = null;\n              }\n            }\n            if (c.type === 'catalog') {\n              delete value.valid;\n              let retVal = '';\n              keys(value).forEach(function(pid) {\n                let product = find(c.products, (p: any) => {\n                  return p._id === pid;\n                });\n                if (product) {\n                  retVal += product.reference + ' * ' + value[pid] + ',';\n                }\n              });\n              value = retVal; //JSON.stringify(value).replace('{', '').replace('}', '');\n            }\n            if (c.type === 'date' && value) {\n              let m = toDate(value);\n              m = dateAdd(m, 'minutes', getUTCOffset(m));\n              value = m;\n            }\n            if (c.type === 'time' && value) {\n              let t = toDate(value);\n              //t = t.add(t.utcOffset(), 'minutes');\n              value = dateFormat(t, 'HH:mm:ss');\n            }\n            if (c.type === 'datetime' && value) {\n              let dt = toDate(value);\n              //t = t.add(t.utcOffset(), 'minutes');\n              value = dateFormat(dt, 'L LT');\n            }\n            if (c.name === '_acl') {\n              value = value.groups.r; //_difference(value.groups.r, roles);\n            }\n            if (value && value._downloadURL) {\n              value = value._downloadURL;\n            }\n            if (isObject(value) && !isDate(value) && !isArray(value)) {\n              //&& _isEmpty(value)\n              value = null;\n            }\n\n            row.push(value);\n            if (!hasHeader) {\n              header.push(c.displayName || c.name);\n            }\n          }\n        });\n        hasHeader = true;\n        table.push(row);\n      });\n      tables.push(table);\n      headers.push(header);\n    });\n    let wb = { SheetNames: [], Sheets: {}, Props: null };\n    for (let i = 0; i < tables.length; i++) {\n      tables[i].unshift(headers[i]);\n      let wsName = sheets[i].title || 'SheetJs_' + i;\n      let ws = this.sheetFromArrayOfArrays(tables[i]);\n      wb.SheetNames.push(wsName);\n      wb.Sheets[wsName] = ws;\n    }\n    let wbout = XLSX.write(wb, <any>{ bookType: 'xlsx', bookSST: true, type: 'binary' });\n    let filename = title + '-' + dateFormat(new Date(), 'YYYY-MM-DDTHH:MM') + '.xlsx';\n    this.exportToFile(this.s2ab(wbout), 'application/octet-stream', '', filename);\n    //});\n  }\n\n  private datenum(v: any, date1904?: boolean) {\n    if (date1904) {\n      v += 1462;\n    }\n    let epoch: any = Date.parse(v);\n    return (epoch - <any>new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n  }\n\n  private sheetFromArrayOfArrays(data, opts?) {\n    let ws = {};\n    let range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };\n    for (let R = 0; R !== data.length; ++R) {\n      for (let C = 0; C !== data[R].length; ++C) {\n        if (range.s.r > R) {\n          range.s.r = R;\n        }\n        if (range.s.c > C) {\n          range.s.c = C;\n        }\n        if (range.e.r < R) {\n          range.e.r = R;\n        }\n        if (range.e.c < C) {\n          range.e.c = C;\n        }\n        let cell: any = {\n          v: data[R][C]\n        };\n        if (cell.v === null) {\n          continue;\n        }\n\n        let cellRef = XLSX.utils.encode_cell({ c: C, r: R });\n\n        if (typeof cell.v === 'number') {\n          cell.t = 'n';\n        } else if (typeof cell.v === 'boolean') {\n          cell.t = 'b';\n        } else if (cell.v instanceof Date) {\n          cell.t = 'n';\n          cell.z = (<any>XLSX.SSF)._table[14];\n          cell.v = this.datenum(cell.v);\n        } else if (isArray(cell.v) && cell.v.length > 0 && isNumber(cell.v[0])) {\n          cell.t = 's';\n          cell.v = '[' + cell.v.join(',') + ']';\n        } else if (isArray(cell.v) && cell.v.length > 0 && !isNumber(cell.v[0])) {\n          cell.t = 's';\n          cell.v = cell.v.join(',');\n        } else if (isArray(cell.v) && cell.v.length === 0) {\n          cell.t = 's';\n          cell.v = '';\n        } else {\n          cell.t = 's';\n        }\n\n        ws[cellRef] = cell;\n      }\n    }\n    if (range.s.c < 10000000) {\n      ws['!ref'] = XLSX.utils.encode_range(range.s, range.e);\n    }\n    return ws;\n  }\n\n  private s2ab(s) {\n    let buf = new ArrayBuffer(s.length);\n    let view = new Uint8Array(buf);\n    for (let i = 0; i !== s.length; ++i) {\n      view[i] = s.charCodeAt(i) & 0xff;\n    }\n    return buf;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Translate } from '@shared/translate';\nimport { isBlank } from '@shared/stencil';\nimport { keys as _keys } from 'lodash-es';\n\n@Pipe({ name: 'filter' })\nexport class FilterPipe implements PipeTransform {\n  private translate: Translate;\n\n  constructor(translate: Translate) {\n    this.translate = translate;\n  }\n\n  transform(value: Array<any>, ...args: any[]): any {\n    //value: array of values to filter\n    //args[0]: string to match\n    //args[1]: list of fields to use to compare\n    //args[2]: not sure? seems to exlude if false\n    //args[3]: use translation\n\n    if (!args || !args[0]) {\n      //&& !args[1]\n      return value;\n    } else if (value) {\n      let translate = args[3];\n      return value.filter(item => {\n        if (typeof item === 'string') {\n          return (\n            item &&\n            this.getStringToTest(item, translate)\n              .toLowerCase()\n              .indexOf(args[0].toLowerCase()) >= 0\n          );\n        }\n        let keys = args[1] || _keys(item);\n        keys = [].concat(keys);\n\n        let retVal = false;\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          if (args[0] && args[0].toLowerCase) {\n            if (typeof item[key] === 'string' || item[key] instanceof String) {\n              let index = this.getStringToTest(item[key], translate)\n                .toLowerCase()\n                .indexOf(args[0].toLowerCase());\n              retVal = retVal || (args[2] === false ? index < 0 : index >= 0);\n            }\n          } else if (!args[0] && args[1]) {\n            let bool = item.hasOwnProperty(key) && !isBlank(item[key]); //item.hasOwnProperty(key) && item[key];\n            retVal = retVal || (args[2] === false ? !bool : bool);\n          }\n        }\n        return retVal;\n      });\n    }\n  }\n\n  getStringToTest(s: string, translate: boolean): string {\n    if (translate && this.translate) {\n      return this.translate.get(s.toString().toUpperCase());\n    } else {\n      return s;\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'; //, HTTP_INTERCEPTORS\n\nimport { CommonModule, Network, Log } from '@shared/common';\nimport { TranslateModule } from '@shared/translate';\n\n//import { DATA_PROVIDERS } from './services'; //HttpCustomInterceptor, Config\nimport { Algorithms } from './services/algorithms/algorithms.service';\nimport { Authentication } from './services/authentication/authentication.service';\nimport { AuthenticationGuard, CanDeactivateGuard } from './services/authentication/authentication.guard';\nimport { BackupService } from './services/backup/backup.service';\nimport { Box } from './services/box/box.service';\nimport { Blog } from './services/blog/blog.service';\nimport { Broker } from './services/broker/broker.service';\nimport { Cache } from './services/cache/cache.service';\nimport { Config } from './services/config/config.service';\nimport { CurrentSessionResolver } from './services/authentication/current-session.resolver';\nimport { Dashboard } from './services/dashboard/dashboard.service';\nimport { Files } from './services/files/files.service';\nimport { FilesBroker } from './services/files/files-broker.service';\nimport { Googlemaps } from './services/googlemaps/googlemaps.service';\nimport { Googletranslate } from './services/googletranslate/googletranslate.service';\nimport { HttpCustomInterceptor } from './services/http-interceptor/http-interceptor.service';\nimport { PlatformService } from './services/platform/platform.service';\nimport { LoadingBar } from './services/loading-bar/loading-bar.service';\nimport { Locations } from './services/locations/locations.service';\nimport { Loopback } from './services/loopback/loopback.service';\nimport { Missiondescriptions } from './services/missiondescriptions/missiondescriptions.service';\nimport { Models } from './services/models/models.service';\nimport { Print } from './services/print/print.service';\nimport { Push } from './services/push/push.service';\nimport { Requestor } from './services/requestor/requestor.service';\nimport { Security } from './services/security/security.service';\nimport { Session } from './services/session/session.service';\nimport { Smartloc } from './services/smartloc/smartloc.service';\nimport { Tenants } from './services/tenants/tenants.service';\nimport { Unsplash } from './services/unsplash/unsplash.service';\nimport { Users } from './services/users/users.service';\nimport { Version } from './services/version/version.service';\nimport { Workplace } from './services/workplace/workplace.service';\nimport { Xlsx } from './services/xlsx/xlsx.service';\nlet SERVICES = [\n  Algorithms, //\n  Authentication,\n  AuthenticationGuard,\n  BackupService,\n  Box,\n  Blog,\n  Broker,\n  CanDeactivateGuard,\n  Cache,\n  Config,\n  CurrentSessionResolver,\n  Dashboard,\n  Files,\n  FilesBroker,\n  Googlemaps,\n  Googletranslate,\n  HttpCustomInterceptor,\n  PlatformService,\n  LoadingBar,\n  Locations,\n  Loopback,\n  Missiondescriptions,\n  Models,\n  Print,\n  Push,\n  Requestor,\n  Security,\n  Session,\n  Smartloc,\n  Tenants,\n  Unsplash,\n  Users,\n  Version,\n  Workplace,\n  Xlsx\n];\n\nimport { FilterPipe } from './pipes/filter/filter.pipe';\n\nlet PIPES = [FilterPipe];\n\nimport { FileTransfer } from '@ionic-native/file-transfer/ngx';\nimport { DocumentViewer } from '@ionic-native/document-viewer/ngx';\nimport { Device } from '@ionic-native/device/ngx';\nimport { File as FileNative } from '@ionic-native/file/ngx';\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\nimport { OneSignal } from '@ionic-native/onesignal/ngx';\nimport { Push as PushNative } from '@ionic-native/push/ngx';\n\n@NgModule({\n  declarations: [...PIPES],\n  imports: [CommonModule, TranslateModule, HttpClientModule],\n  exports: [CommonModule, TranslateModule, HttpClientModule, ...PIPES]\n})\nexport class DataCoreModule {\n  static forRoot(configuredProviders: Array<Provider> = []): ModuleWithProviders {\n    return {\n      ngModule: DataCoreModule,\n      providers: [\n        ...SERVICES,\n        ...configuredProviders,\n        FileTransfer,\n        DocumentViewer,\n        Device,\n        FileOpener,\n        OneSignal,\n        PushNative,\n        FileNative,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: HttpCustomInterceptor,\n          deps: [Config, Network, Log],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { IAggregateLog } from '@shared/stencil';\n\n@Model({\n  className: 'AggregateLog',\n  collectionName: 'aggregateLogs',\n  fields: ['*'],\n  include: []\n})\nexport class AggregateLog extends IAggregateLog {}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IAlgorithm } from '@shared/stencil';\n\n@Model({\n  className: 'Algorithm',\n  collectionName: 'algorithm',\n  fields: ['name', '_id', 'stitch'],\n  include: []\n})\nexport class Algorithm extends IAlgorithm {\n  @Editable('Algorithm', { required: true, type: FormFieldType.text })\n  @Searchable('Algorithm')\n  name: string;\n\n  stitch?: boolean;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { FormFieldType, IAutorenewConfig } from '@shared/stencil';\nimport { MissionDescription } from '../mission-description/mission-description.interface';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\n\nimport { range } from 'lodash-es';\n\n@Model({\n  className: 'AutorenewConfig',\n  collectionName: 'autorenewConfig',\n  fields: ['*'],\n  include: ['descriptionSource', 'descriptionTarget']\n})\nexport class AutorenewConfig extends IAutorenewConfig {\n  @Editable('AutorenewConfig', { required: true, type: FormFieldType.text })\n  @Searchable('AutorenewConfig')\n  title: string;\n\n  @Editable('AutorenewConfig', {\n    required: true,\n    title: 'PREFIX',\n    type: FormFieldType.text,\n    flex: 50\n  })\n  @Searchable('AutorenewConfig')\n  prefix_title: string;\n\n  @Editable('AutorenewConfig', {\n    type: FormFieldType.autocomplete,\n    translate: true,\n    values: range(1, 5),\n    flex: 50,\n    clearable: true,\n    icon: 'yo-flag'\n  })\n  priority?: number;\n\n  @Editable('AutorenewConfig', {\n    type: FormFieldType.autocomplete,\n    title: 'SOURCE',\n    collectionName: 'missiondescriptions',\n    required: false,\n    columnDefinition: { name: 'title' },\n    icon: 'yo-list2',\n    filterable: false,\n    sortable: false,\n    filters: [[{ field: 'archived', operator: { _id: 'neq' }, value: true }]],\n    hiddenFields: ['archived']\n  })\n  descriptionSource: MissionDescription;\n\n  @Editable('AutorenewConfig', {\n    type: FormFieldType.autocomplete,\n    title: 'TARGET',\n    collectionName: 'missiondescriptions',\n    required: false,\n    columnDefinition: { name: 'title' },\n    icon: 'yo-list2',\n    filterable: false,\n    sortable: false,\n    filters: [[{ field: 'archived', operator: { _id: 'neq' }, value: true }]],\n    hiddenFields: ['archived']\n  })\n  descriptionTarget: MissionDescription;\n\n  @Editable('AutorenewConfig', { type: FormFieldType.toggle })\n  @Searchable('AutorenewConfig')\n  active: boolean;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IBackup } from '@shared/stencil';\n\n@Model({\n  className: 'Backup',\n  fields: ['*'],\n  include: []\n})\nexport class Backup extends IBackup {\n  @Editable('Backup', { required: false, type: FormFieldType.date })\n  date: Date;\n\n  @Editable('Backup', { required: true, type: FormFieldType.autocomplete, clearable: true })\n  backup: { _id: string; name: string; description: string; badge: string };\n\n  @Editable('Backup', {\n    required: false,\n    type: FormFieldType.autocomplete,\n    clearable: true,\n    multiple: true,\n    values: ['missions', 'missiondescription', 'missiondatas', 'user', 'locations', 'locationtypes', 'missiondatas', 'photos']\n  })\n  collections: Array<string>;\n}\n","import { FormFieldType, ICatalog } from '@shared/stencil';\n\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FORM_FILES_IMAGE_FILTER } from '../constants/constants.interface';\nimport { getGroupsTransform } from '../condition/condition.interface';\n\n@Model({\n  className: 'Catalog',\n  collectionName: 'catalogs',\n  fields: ['*'],\n  include: [],\n  icon: 'yo-catalogue'\n})\nexport class Catalog extends ICatalog {\n  @Editable('Catalog', { required: true, type: FormFieldType.text })\n  @Searchable('Catalog')\n  title: string;\n\n  @Editable('Catalog', {\n    type: FormFieldType.autocomplete,\n    maxWidth: 600,\n    filters: FORM_FILES_IMAGE_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    fixedPosition: true,\n    maxHeight: 300,\n    crop: 'square',\n    collectionName: 'files',\n    title: 'PHOTO',\n    required: true,\n    columnDefinition: { name: '_downloadURL' }\n  })\n  image: any;\n\n  @Editable('Catalog', { type: FormFieldType.textarea })\n  description: string;\n\n  @Editable('Catalog', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false,\n    required: true\n  })\n  group: string;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { FormFieldType, IFormField, Filters, IChartDefinition } from '@shared/stencil';\n\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { MissionDescription } from '../mission-description/mission-description.interface';\n\nexport const CHART_TYPES = ['line', 'spline', 'area', 'areaspline', 'column', 'bar', 'radar', 'pie', 'doughnut', 'treemap'];\nexport const CHART_DATEGROUPINGBY = ['year', 'month', 'week', 'day', 'calendar'];\nexport const CHART_SHOW_AS = ['chart', 'grid', 'map', 'micro'];\nexport const CHART_DATETIMEFORMAT = ['d', 'dd', 'DD', 'w', 'MMM'];\nexport const CHART_TIMESCALE = ['last7days', 'lastweek', 'last30days', 'lastmonth', 'last90days', 'lastquarter', 'last365days', 'lastyear'];\n\nlet conditions = {\n  showAsChart: 'showAs==\"chart\"',\n  isMissionOrMissionData: 'collectionName==\"missions\" or collectionName==\"missiondatas\"',\n  isMissionData: 'collectionName==\"missiondatas\"',\n  isMission: 'collectionName==\"missions\"',\n  groupByDate: 'groupByDate == 1'\n};\n\nexport interface IMissionField {\n  selectedDescription: MissionDescription;\n  fields?: Array<IFormField> | IFormField;\n}\n\nexport interface IMissionFields {\n  selectedDescription: MissionDescription;\n  fields?: Array<IFormField>;\n}\n\nexport function onChartMissionFieldsChange(missionfields, data) {\n  if (missionfields && missionfields.selectedDescription) {\n    if (!data.title) {\n      data.title = missionfields.selectedDescription.title;\n    }\n  }\n}\n\n@Model({\n  className: 'ChartDefinition',\n  collectionName: 'chartdefinitions',\n  fields: ['*'],\n  include: []\n})\nexport class ChartDefinition extends IChartDefinition {\n  @Editable('ChartDefinition', {\n    title: 'QUERYON',\n    type: FormFieldType.autocomplete,\n    translate: true,\n    values: ['missions', 'missiondatas', 'custom'],\n    clearable: false,\n    required: true,\n    autoselect: true\n  })\n  collectionName?: string;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.missionfield,\n    condition: conditions.isMissionData,\n    title: 'CAMPAIGN',\n    required: true,\n    onChange: onChartMissionFieldsChange\n  })\n  missionfields?: IMissionField;\n\n  @Editable('ChartDefinition', { required: true, type: FormFieldType.text })\n  @Searchable('ChartDefinition')\n  title: string;\n\n  @Editable('ChartDefinition', { required: false, type: FormFieldType.textarea })\n  @Searchable('ChartDefinition')\n  description?: string;\n\n  @Editable('ChartDefinition', {\n    title: 'SHOWAS',\n    type: FormFieldType.autocomplete,\n    flex: 33,\n    values: CHART_SHOW_AS\n  })\n  showAs?: string;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.autocomplete,\n    values: CHART_TYPES,\n    flex: 33,\n    condition: conditions.showAsChart,\n    translate: true,\n    clearable: false\n  })\n  type?: string;\n\n  @Editable('ChartDefinition', {\n    title: 'PALETTE',\n    type: FormFieldType.autocomplete,\n    flex: 34,\n    condition: conditions.showAsChart,\n    translate: true,\n    values: ['palette0', 'palette1', 'palette2', 'palette3'],\n    clearable: false,\n    autoselect: true\n  })\n  palette?: string;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.checkbox,\n    flex: 34,\n    condition: conditions.isMissionOrMissionData\n  })\n  groupByDate?: boolean;\n\n  @Editable('ChartDefinition', {\n    title: 'DATETIMEFORMAT',\n    type: FormFieldType.autocomplete,\n    flex: 33,\n    tag: true,\n    condition: conditions.groupByDate,\n    values: CHART_DATETIMEFORMAT,\n    clearable: true\n  })\n  datetimeFormat?: string;\n\n  @Editable('ChartDefinition', {\n    title: 'TIMESCALE',\n    type: FormFieldType.autocomplete,\n    flex: 33,\n    condition: conditions.groupByDate,\n    values: CHART_TIMESCALE\n  })\n  timescale?: string;\n\n  @Editable('ChartDefinition', {\n    title: 'GROUPBY',\n    type: FormFieldType.autocomplete,\n    translate: true,\n    flex: 34,\n    values: CHART_DATEGROUPINGBY,\n    condition: conditions.groupByDate,\n    clearable: false\n  })\n  dateGrouping?: string;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.checkbox,\n    flex: 33,\n    condition: conditions.isMission\n  })\n  groupByTag?: boolean;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.checkbox,\n    flex: 33,\n    condition: conditions.isMission\n  })\n  groupByCampaign?: boolean;\n\n  @Editable('ChartDefinition', { flex: 33, type: FormFieldType.checkbox })\n  showLegend?: boolean;\n\n  @Editable('ChartDefinition', { flex: 33, type: FormFieldType.checkbox })\n  showValues?: boolean;\n\n  @Editable('ChartDefinition', { flex: 33, type: FormFieldType.checkbox })\n  colorByPoint?: boolean;\n\n  @Editable('ChartDefinition', {\n    type: FormFieldType.autocomplete,\n    flex: 34,\n    values: ['normal', 'percent'],\n    clearable: true\n  })\n  stacked?: string;\n\n  @Editable('ChartDefinition', { required: false, type: FormFieldType.textarea })\n  @Searchable('ChartDefinition')\n  custom?: string;\n\n  mapTransform?: (retVal: Array<{ _id: string; serie?: string; value: number; color?: string }>, cd?: ChartDefinition, broker?: any, component?: any) => {};\n  filters?: Filters;\n\n  showPreviousYear?: boolean;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, ICurrency } from '@shared/stencil';\nimport { Translate } from '@shared/translate';\nimport { IAcl } from '../entity/entity.interface';\n\n@Model({\n  className: 'Currency',\n  collectionName: 'currencies',\n  fields: ['*'],\n  include: []\n})\nexport class Currency implements ICurrency {\n  _id?: string;\n  _acl?: IAcl;\n  _lmt?: string;\n  _ect?: string;\n\n  @Editable('Currency', {\n    required: true,\n    type: FormFieldType.autocomplete,\n    title: 'LANGUAGE',\n    translate: true,\n    values: Translate.availablesLanguage,\n    clearable: false\n  })\n  @Searchable('Currency')\n  currency: string;\n\n  @Editable('Currency', { required: true, type: FormFieldType.text })\n  @Searchable('Currency')\n  symbol: string;\n\n  @Editable('Currency', { required: true, type: FormFieldType.number, title: 'RATE1' })\n  @Searchable('Currency')\n  rate: number;\n}\n","import { ChartDefinition } from '../chart-definition/chart-definition.interface';\n\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IDashboard } from '@shared/stencil';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { ROLES_CONDITIONS } from '../condition/condition.interface';\n\n@Model({\n  className: 'Dashboard',\n  collectionName: 'dashboards',\n  fields: ['*'],\n  include: []\n})\nexport class Dashboard extends IDashboard {\n  @Editable('Dashboard', { required: true, type: FormFieldType.text, sortable: true })\n  @Searchable('Dashboard')\n  title: string;\n\n  @Editable('Dashboard', { required: false, type: FormFieldType.textarea })\n  @Searchable('Dashboard')\n  description: string;\n\n  @Editable('Dashboard', {\n    name: '_lmt',\n    title: 'DATE',\n    type: FormFieldType.datetime,\n    readonly: true,\n    sortable: true,\n    filterableAdvanced: true,\n    advanced: true\n  })\n  _lmt: any;\n\n  tabs: Array<{\n    title: string;\n    items: Array<{\n      col: number;\n      row: number;\n      sizex: number;\n      sizey: number;\n      definition: ChartDefinition;\n    }>;\n  }>;\n\n  @Editable('Dashboard', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    collectionName: 'tenants',\n    columnDefinition: { name: 'name' },\n    multiple: false,\n    filterable: true,\n    condition: [ROLES_CONDITIONS.isAdmin]\n  })\n  _tenant: Tenant;\n  _tenantRef?: string;\n}\n","export interface IAcl {\n  creator: string;\n  groups: { r: Array<string>; w: Array<string> };\n  //users: { r: Array<string>; w: Array<string> };\n}\n\nexport interface IEntity {\n  _id?: string | number | boolean;\n  _acl?: IAcl;\n  _lmt?: string;\n  _ect?: string;\n}\n\nexport interface IProperty {\n  title?: string;\n  type?: string;\n  values: Array<any>;\n}\n\nexport class Entity implements IEntity {\n  public _id?: string | number | boolean;\n  public _acl?: IAcl;\n  public _lmt?: string;\n  public _ect?: string;\n\n  public properties?: IProperty[];\n\n  constructor(source?: any) {\n    if (typeof source === 'string' || typeof source === 'number' || typeof source === 'boolean' || typeof source === 'undefined') {\n      this._id = source;\n    }\n  }\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { getGroupsTransform, ROLES_CONDITIONS } from '../condition/condition.interface';\n\nimport { FormFieldType, IFile } from '@shared/stencil';\nimport { Tenant } from '../tenant/tenant.interface';\n\nexport function onUrlChange(doc, data) {\n  if (doc && doc.name) {\n    data._filename = doc.name;\n  }\n  if (doc && doc.size) {\n    data.size = doc.size;\n  }\n  if (doc && doc.type) {\n    data.mimeType = doc.type;\n  }\n}\n\n@Model({\n  className: 'File',\n  collectionName: 'files',\n  fields: ['*'],\n  include: ['container'],\n  icon: 'yo-file'\n})\nexport class File extends IFile {\n  @Editable('File', {\n    name: '_ect',\n    title: 'CREATIONDATE',\n    type: FormFieldType.date,\n    readonly: true,\n    sortable: true,\n    exportOrder: 21,\n    filterableAdvanced: true\n  })\n  _ect?: any;\n\n  @Editable('File', {\n    type: FormFieldType.documentuploader,\n    filterable: false,\n    required: true,\n    title: 'DOCUMENT',\n    columnDefinition: { width: 52 },\n    onChange: onUrlChange\n  })\n  _downloadURL: string;\n\n  @Editable('File', { title: 'TITLE', required: true, type: FormFieldType.text, sortable: true })\n  @Searchable('File')\n  _filename: string;\n\n  @Editable('File', { visible: false, type: FormFieldType.number, sortable: true })\n  size: number;\n\n  @Editable('File', { visible: false, type: FormFieldType.autocomplete, filterable: true })\n  @Searchable('File')\n  mimeType: string;\n\n  @Editable('File', { type: FormFieldType.toggle, columnDefinition: { width: 80 } })\n  hideMobile: boolean;\n\n  @Editable('File', {\n    required: true,\n    name: 'group',\n    columnDefinition: { name: 'group', forceName: true },\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false\n  })\n  group: any;\n\n  @Editable('File', {\n    type: FormFieldType.autocomplete,\n    tag: true,\n    allowCustomTag: true,\n    collectionName: 'files',\n    multiple: true,\n    icon: 'yo-flag',\n    subQuery: { field: 'fileRef', values: '_id' }\n  })\n  @Searchable('File')\n  tags?: Array<string>;\n\n  @Editable('File', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    collectionName: 'tenants',\n    columnDefinition: { name: 'name' },\n    multiple: false,\n    filterable: true,\n    condition: [ROLES_CONDITIONS.isAdmin]\n  })\n  _tenant: Tenant;\n  _tenantRef?: string;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { getGroupsTransform } from '../condition/condition.interface';\n\nimport { FormFieldType, IFolder, IFileOrFolder } from '@shared/stencil';\n\n@Model({\n  className: 'Folder',\n  collectionName: 'folders',\n  fields: ['*'],\n  include: ['container'],\n  icon: 'yo-folder'\n})\nexport class Folder extends IFolder {\n  @Editable('Folder', { title: 'TITLE', required: true, type: FormFieldType.text })\n  @Searchable('Folder')\n  name: string;\n\n  @Editable('Folder', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false,\n    required: true\n  })\n  group: string;\n}\n\n@Model({\n  className: 'FileOrFolder',\n  collectionName: 'filesFolders',\n  fields: ['*'],\n  include: ['container']\n})\nexport class FileOrFolder extends IFileOrFolder {\n  @Searchable('FileOrFolder') name?: string;\n  @Searchable('FileOrFolder') _filename?: string;\n\n  @Searchable('FileOrFolder') mimeType?: string;\n}\n","import { toDate, utc, dateAdd, startOf } from '@shared/stencil';\n\nexport function getStartAndEndDates(timescale, endDate?: Date | string, amount?: number, notsliding?: boolean) {\n  let lastDate = endDate ? toDate(endDate) : new Date();\n  amount = amount || 7;\n  let period = 'days';\n  let startof = 'day';\n  switch (timescale) {\n    case 'last30days':\n      amount = 30;\n      period = 'days';\n      break;\n    case 'last90days':\n      amount = 90;\n      period = 'days';\n      break;\n    case 'last365days':\n      amount = 365;\n      period = 'days';\n      break;\n    case 'lastweek':\n      amount = 0;\n      period = 'weeks';\n      break;\n    case 'lastmonth':\n      amount = 0;\n      period = 'months';\n      startof = 'month';\n      break;\n    case 'lastquarter':\n      amount = 2;\n      period = 'months';\n      startof = 'month';\n      break;\n    case 'lastyear':\n      amount = 0;\n      period = 'years';\n      startof = 'year';\n      break;\n    case 'last7days':\n      amount = 7;\n      period = 'days';\n      startof = 'day';\n      break;\n\n    default:\n      if (notsliding) {\n        amount = amount ? amount - 1 : 0;\n        period = timescale;\n        startof = timescale;\n      } else {\n        amount = amount || 1;\n        period = timescale;\n        startof = 'day';\n      }\n\n      break;\n  }\n  //use .utc() to get the startOf with no offset issues\n  return [startOf(dateAdd(utc(lastDate), period, -amount), startof).toISOString(), lastDate.toISOString()];\n}\n","import { Editable } from '../../decorators/editable/editable.decorator';\nimport { dateAdd, FormFieldType, IKpi, Filters, IDatesRange } from '@shared/stencil';\nimport { getStartAndEndDates as getStartAndEndDatesCore } from '../dates/dates.interface';\nimport { MissionDescription } from '../mission-description/mission-description.interface';\nimport { ChartDefinition } from '../chart-definition/chart-definition.interface';\nimport { Model } from '../../decorators/model/model.decorator';\n\nimport { Colors } from '@shared/common';\nimport { Translate } from '@shared/translate';\n\nimport { merge, isNaN, cloneDeep } from 'lodash-es';\n\n@Model({\n  className: 'BaseKpi'\n})\nexport class BaseKpi extends IKpi {\n  @Editable('BaseKpi', { tabIndex: 2, tab: 'ADVANCED', type: FormFieldType.number, advanced: true })\n  pointPadding: boolean;\n\n  @Editable('BaseKpi', {\n    tabIndex: 2,\n    tab: 'ADVANCED',\n    type: FormFieldType.number,\n    advanced: true,\n    min: 1\n  })\n  numberPrecision: number;\n\n  dates: IDatesRange;\n\n  @Editable('BaseKpi', {\n    tabIndex: 2,\n    tab: 'ADVANCED',\n    type: FormFieldType.autocomplete,\n    translate: true,\n    values: ['sum', 'avg', 'min', 'max']\n  })\n  accumulator: string;\n\n  public static getChartDefinition(kpi: any, cd: ChartDefinition, translate: Translate) {\n    merge(cd, {\n      description: kpi.description,\n      title: kpi.title,\n      showAs: kpi.showAs || cd.showAs || 'chart',\n      showValues: kpi.showValues,\n      showLegend: kpi.showLegend === false ? false : true,\n      legendValue: kpi.accumulator\n    });\n\n    if (kpi && kpi.groupBySlider) {\n      switch (kpi.groupBySlider.toString()) {\n        case 'day':\n          cd.dateGrouping = 'hour';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 1,\n            timescale: 'day'\n          };\n          break;\n\n        case 'week':\n          cd.dateGrouping = 'day';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 1,\n            timescale: 'week'\n          };\n          break;\n\n        case 'month':\n          cd.dateGrouping = 'week';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 4,\n            timescale: 'week'\n          };\n          //cd.type = kpi.chartType || 'column';\n          break;\n\n        case '3months':\n          cd.dateGrouping = 'week';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 3,\n            timescale: 'month'\n          };\n          //cd.type = kpi.chartType || 'column';\n          break;\n\n        case '6months':\n          cd.dateGrouping = 'month';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 6,\n            timescale: 'month'\n          };\n          //cd.type = kpi.chartType || 'column';\n          break;\n\n        case 'year':\n          cd.dateGrouping = 'month';\n          kpi.dates = {\n            mode: 'dynamic',\n            amount: 1,\n            timescale: 'year'\n          };\n          //cd.type = kpi.chartType || 'column';\n          break;\n      }\n    }\n  }\n\n  public static getDateFormat(groupBy) {\n    let format = '%Y-%m-%d';\n    if (groupBy && groupBy.toString) {\n      switch (groupBy.toString()) {\n        case 'day':\n          format = '%Y-%m-%d %H:00';\n          break;\n\n        case 'week':\n          format = '%Y-%m-%d';\n          break;\n\n        case 'month':\n          format = '%G-%V';\n          break;\n\n        case '3months':\n          format = '%G-%V';\n          break;\n\n        case '6months':\n          format = '%Y-%m';\n          break;\n\n        case 'year':\n        case '2':\n          format = '%Y-%m';\n          break;\n      }\n    }\n    return format;\n  }\n\n  public static getDates(kpi: BaseKpi, showPreviousYear?: boolean): { startDate?: string; endDate?: string } {\n    let retVal: any = {};\n    if (kpi.dates) {\n      if (kpi.dates.mode === 'calendar') {\n        if (kpi.dates.startDate) {\n          retVal.startDate = kpi.dates.startDate;\n        }\n        if (kpi.dates.endDate) {\n          retVal.endDate = kpi.dates.endDate;\n        }\n      }\n      if (kpi.dates.mode === 'dynamic') {\n        let dates = this.getStartAndEndDates(kpi.dates.timescale, null, kpi.dates.amount, kpi.dates.notsliding);\n        retVal.startDate = dates[0];\n        retVal.endDate = dates[1];\n      }\n    }\n    if (showPreviousYear) {\n      if (retVal.startDate) {\n        retVal.startDate = dateAdd(retVal.startDate, 'years', -1).toISOString();\n      }\n      if (retVal.endDate) {\n        retVal.endDate = dateAdd(retVal.endDate, 'years', -1).toISOString();\n      }\n    }\n\n    return retVal;\n  }\n\n  public static getStartAndEndDates(timescale, endDate?: Date | string, amount?: number, notsliding?: boolean) {\n    return getStartAndEndDatesCore(timescale, endDate, amount, notsliding);\n  }\n\n  public static fixDates(cd: ChartDefinition, date: string) {\n    let retVal;\n    if (!date) {\n      return new Date().getTime();\n    }\n    if (cd.dateGrouping === 'week' || (cd.kpiFormValues && cd.kpiFormValues.groupBySlider === 'week' && cd.kpiFormValues.category !== 'healthscore')) {\n      let y = <any>date.split('-')[0];\n      let w = <any>date.split('-')[1];\n      // // MongoDB week begins on Sundays and days preceding the first Sudnay of the year are in Week 0;\n      // // So,  weekStartDay = days in Week 0 + first day of the week number\n      // let yearStartDay = new Date(y, 0, 0).getDay();\n      // let daysInWeek0 = yearStartDay === 0 ? 0 : 7 - yearStartDay;\n      // let d = w === '00' ? 0 : daysInWeek0 + (w - 1) * 7;\n      // let weekStart = new Date(y, 0, d);\n\n      // retVal = weekStart.getTime();\n      // //retVal = moment('2011-01-01').year(y).isoWeek(w).toDate().getTime(); //.startOf('day')\n\n      let simple = new Date(y, 0, 1 + (w - 1) * 7);\n      let dow = simple.getDay();\n      let isoWeekStart = simple;\n      if (dow <= 4) {\n        isoWeekStart.setDate(simple.getDate() - simple.getDay() + 1);\n      } else {\n        isoWeekStart.setDate(simple.getDate() + 8 - simple.getDay());\n      }\n      return isoWeekStart.getTime();\n    } else {\n      retVal = new Date(date).getTime();\n    }\n    return retVal;\n  }\n\n  public static getColor(value) {\n    let color = Colors.black;\n    if (!isNaN(value)) {\n      if (value < 33) {\n        color = Colors.danger;\n      } else if (value < 75) {\n        color = Colors.warning;\n      } else if (value >= 75) {\n        color = Colors.success;\n      }\n    }\n    return color;\n  }\n\n  public static setDateFilters(filters: Filters, dates: { startDate?: string; endDate?: string }, field = 'finishedDate', allowNotExits = true) {\n    if (dates.startDate || dates.endDate) {\n      let filter: any;\n      if (allowNotExits) {\n        filters.push(cloneDeep(filters[0]));\n        filter = <any>{ operator: { _id: 'exists' }, value: false };\n        filter.field = field;\n        filters[1].push(filter);\n      }\n      if (dates.startDate) {\n        filter = <any>{ operator: { _id: 'gte' }, value: dates.startDate };\n        filter.field = field;\n        filters[0].push(filter);\n      }\n      if (dates.endDate) {\n        filter = <any>{ operator: { _id: 'lt' }, value: dates.endDate };\n        filter.field = field;\n        filters[0].push(filter);\n      }\n    }\n  }\n\n  public static setLocationTagsFilters(filters: Filters, locationTags: Array<string>) {\n    if (locationTags && locationTags.length) {\n      filters[0].push({\n        field: 'tags',\n        collectionName: 'locations',\n        operator: { _id: 'inq' },\n        value: locationTags,\n        type: FormFieldType.autocomplete,\n        subQuery: { field: 'locationRef', values: '_id' }\n      });\n    }\n  }\n\n  public static setUserTagsFilters(filters: Filters, userTags: Array<string>) {\n    if (userTags && userTags.length) {\n      filters[0].push({\n        field: 'tags',\n        collectionName: 'user',\n        operator: { _id: 'inq' },\n        value: userTags,\n        type: FormFieldType.autocomplete,\n        subQuery: { field: 'ownerRef', values: '_id', leftJoin: true }\n      });\n    }\n  }\n\n  public static setCampaignFilters(campaigns: Array<MissionDescription>, campaignTags: Array<string>, filters: Filters, missionType: string) {\n    if (campaigns && campaigns.length > 0) {\n      filters[0].unshift({\n        field: 'descriptionRef',\n        operator: { _id: 'inq' },\n        value: campaigns.map(c => c._id)\n      });\n    } else if (campaignTags && campaignTags.length > 0) {\n      filters[0].push({\n        field: 'tags',\n        collectionName: 'missiondescriptions',\n        operator: { _id: 'inq' },\n        value: campaignTags,\n        type: FormFieldType.autocomplete,\n        subQuery: { field: 'descriptionRef', values: '_id' }\n      });\n    }\n    if (missionType) {\n      filters[0].push({ field: 'type', operator: { _id: 'inq' }, value: [missionType] });\n    }\n  }\n\n  public static getDateFormatMoment(groupBy) {\n    let format = '';\n    if (groupBy && groupBy.toString) {\n      switch (groupBy.toString()) {\n        case 'week':\n          format = 'YYYY-WW';\n          break;\n\n        case 'month':\n          format = 'YYYY-MM';\n          break;\n\n        case 'quarter':\n        case 'year':\n          format = 'YYYY';\n          break;\n      }\n    }\n    return format;\n  }\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { IIMapping, FormFieldType } from '@shared/stencil';\n// import { ADMIN_FILES_TYPE, FORMCREATOR_FILES_TYPE } from '../constants/constants.interface';\n\n// let conditions = {\n//   isAdmin: 'context == \"admin\"',\n//   isFormCreator: 'context == \"formCreator\"',\n//   isNotTranslation: 'context!=\"translation\"'\n// };\n\n@Model({ className: 'IMapping' })\nexport class IMapping extends IIMapping {\n  // @Editable('IMapping', {\n  //   required: true,\n  //   autoselect: true,\n  //   type: FormFieldType.autocomplete,\n  //   conditionalValues: [{ condition: conditions.isAdmin, ADMIN_FILES_TYPE }, { condition: conditions.isFormCreator, values: FORMCREATOR_FILES_TYPE }],\n  //   condition: conditions.isNotTranslation,\n  //   defaultValues: ADMIN_FILES_TYPE,\n  //   translate: true\n  // })\n  type: string;\n\n  @Editable('IMapping', {\n    required: true,\n    type: FormFieldType.documentuploader,\n    filterable: false,\n    title: 'DOCUMENT',\n    extensions: ['csv', 'application', 'xls', 'xlsx']\n  }) //'xls', 'xlsx', //'xls', 'xlsx', , 'application'\n  document: any;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { IOperation, FormFieldType } from '@shared/stencil';\n\n@Model({\n  className: 'Operation',\n  collectionName: 'operation',\n  fields: ['*'],\n  include: []\n})\nexport class Operation extends IOperation {\n  @Searchable('Operation') operationId: string;\n  @Searchable('Operation') operationName: string;\n  @Searchable('Operation') methodName: string;\n  @Searchable('Operation') modelName: string;\n\n  @Editable('Operation', { type: FormFieldType.datetime, readonly: true })\n  @Searchable('Operation')\n  _createdAt: Date;\n\n  @Editable('Operation', { type: FormFieldType.number, readonly: true })\n  @Searchable('Operation')\n  count: number;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { IProduct, FormFieldType } from '@shared/stencil';\nimport { FORM_FILES_IMAGE_FILTER } from '../constants/constants.interface';\n\n@Model({\n  className: 'Product',\n  collectionName: 'products',\n  fields: ['*'],\n  include: ['catalog'],\n  icon: 'yo-product'\n})\nexport class Product extends IProduct {\n  @Editable('Product', {\n    type: FormFieldType.text,\n    visible: false,\n    forceExport: true,\n    exportOrder: 1\n  })\n  _id: string;\n\n  @Editable('Product', {\n    type: FormFieldType.autocomplete,\n    collectionName: 'catalogs',\n    forceExport: true,\n    exportOrder: 2,\n    required: true,\n    columnDefinition: { name: 'title' },\n    filterable: true\n  })\n  catalog: any;\n  catalogRef: string;\n\n  @Editable('Product', { required: true, type: FormFieldType.text, exportOrder: 3, filterable: true, sortable: true })\n  @Searchable('Product')\n  title: string;\n\n  @Editable('Product', { type: FormFieldType.text, exportOrder: 4, filterable: true, sortable: true })\n  @Searchable('Product')\n  reference: string;\n\n  @Editable('Product', { flex: 50, type: FormFieldType.text, exportOrder: 10, filterable: true, sortable: true })\n  color: string;\n\n  @Editable('Product', { required: false, flex: 50, type: FormFieldType.number, exportOrder: 9 })\n  price: number;\n\n  @Editable('Product', { flex: 50, type: FormFieldType.number, min: 0, exportOrder: 8 })\n  step: number;\n\n  @Editable('Product', {\n    type: FormFieldType.checkbox,\n    flex: 50,\n    columnDefinition: { width: 40 },\n    exportOrder: 11,\n    filterable: true\n  })\n  outofstock: boolean;\n\n  @Editable('Product', {\n    type: FormFieldType.autocomplete,\n    isImage: true,\n    filters: FORM_FILES_IMAGE_FILTER,\n    forceModal: true,\n    hiddenFields: ['mimeType'],\n    mode: 'tile',\n    pageSize: 20,\n    fixedPosition: true,\n    maxWidth: 600,\n    maxHeight: 300,\n    crop: 'square',\n    collectionName: 'files',\n    title: 'PHOTO',\n    //required: true,\n    columnDefinition: { name: '_downloadURL' },\n    filterable: false,\n    exportOrder: 7\n  })\n  image: any;\n\n  @Editable('Product', { type: FormFieldType.textarea, exportOrder: 5 })\n  description: string;\n\n  @Editable('Product', { type: FormFieldType.textarea, exportOrder: 6 })\n  shortdescription: string;\n\n  @Editable('Product', {\n    type: FormFieldType.autocomplete,\n    tag: true,\n    allowCustomTag: true,\n    collectionName: 'products',\n    multiple: true,\n    icon: 'yo-flag',\n    subQuery: { field: 'fileRef', values: '_id' },\n    exportOrder: 12,\n    filterable: true\n  })\n  @Searchable('Product')\n  tags?: Array<string>;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IPublicApiToken } from '@shared/stencil';\nimport { User } from '../user/user.interface';\n\n@Model({\n  className: 'PublicApiToken',\n  collectionName: 'publicAPITokens',\n  fields: ['*'],\n  include: ['user'],\n  icon: 'yo-badge'\n})\nexport class PublicApiToken extends IPublicApiToken {\n  @Editable('PublicApiToken', { type: FormFieldType.textarea, readonly: true, name: 'accessToken.id' })\n  accessToken: { id: string };\n\n  user: User;\n  userRef: string;\n  _tenant: Tenant;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { ROLES_CONDITIONS } from '../condition/condition.interface';\n\nimport { ISlide, IFormField, FormFieldType, ICondition } from '@shared/stencil';\n\n@Model({ className: 'Slide' })\nexport class Slide extends ISlide {\n  @Editable('Slide', { required: true, type: FormFieldType.text })\n  title: string;\n\n  @Editable('Slide', { type: FormFieldType.textarea })\n  description?: string;\n\n  @Editable('Slide', { type: FormFieldType.checkbox, flex: 100, advanced: true })\n  hideheader?: boolean;\n\n  @Editable('Slide', {\n    type: FormFieldType.checkbox,\n    flex: 100,\n    condition: [ROLES_CONDITIONS.hasService],\n    advanced: true\n  })\n  service?: boolean;\n\n  @Editable('Slide', {\n    type: FormFieldType.autocomplete,\n    multiple: true,\n    clearable: true,\n    advanced: true\n  })\n  condition?: Array<ICondition | string | any> | string | ICondition;\n\n  items: Array<IFormField>;\n}\n","import { Editable } from '../../decorators/editable/editable.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { FormFieldType, ITableau } from '@shared/stencil';\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Tenant } from '../tenant/tenant.interface';\nimport { ROLES_CONDITIONS } from '../condition/condition.interface';\n\n@Model({\n  className: 'Tableau',\n  collectionName: 'tableau',\n  fields: ['*'],\n  include: ['_tenant'],\n  icon: 'yo-tableau'\n})\nexport class Tableau extends ITableau {\n  @Editable('Tableau', { type: FormFieldType.text, required: true, title: 'DASHBOARDID' })\n  @Searchable('Tableau')\n  path: string;\n\n  @Editable('Tableau', {\n    required: true,\n    title: 'TENANT',\n    type: FormFieldType.autocomplete,\n    collectionName: 'tenants',\n    columnDefinition: { name: 'name' },\n    multiple: false,\n    condition: [ROLES_CONDITIONS.isAdmin]\n  })\n  _tenant: Tenant;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { FormFieldType, ITagGroup } from '@shared/stencil';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { getGroupsTransform } from '../condition/condition.interface';\n\n@Model({\n  className: 'TagGroup',\n  collectionName: 'tagGroups',\n  fields: ['*'],\n  include: []\n})\nexport class TagGroup extends ITagGroup {\n  @Editable('TagGroup', { required: true, type: FormFieldType.text })\n  @Searchable('TagGroup')\n  title: string;\n\n  @Editable('TagGroup', {\n    title: 'LOCATIONTAGS',\n    required: true,\n    type: FormFieldType.autocomplete,\n    tag: true,\n    collectionName: 'locations',\n    multiple: true,\n    subQuery: { field: 'locationRef', values: '_id' },\n    fixedPosition: true\n  })\n  tags: Array<string>;\n\n  @Editable('TagGroup', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false,\n    required: true,\n    fixedPosition: true\n  })\n  group: string | Array<string>;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\n\nimport { ITag } from '@shared/stencil';\n\n@Model({\n  className: 'Tag',\n  collectionName: 'tags',\n  fields: ['*'],\n  include: []\n})\nexport class Tag extends ITag {\n  @Searchable('Tag') tag: string;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { IFormField, FormFieldType, ITodo, ITodoTask, ITodoTaskSimple } from '@shared/stencil';\nimport { User } from '../user/user.interface';\n\nexport function onUserMeActionHandler() {\n  this.selectMatch(this.session.user);\n}\n\n@Model({ className: 'Todo' })\nexport class Todo extends ITodo {\n  @Editable('Todo', { type: FormFieldType.text, name: 'title', required: true })\n  title: string;\n\n  @Editable('Todo', {\n    title: 'ASSIGNTO',\n    name: 'user',\n    type: FormFieldType.autocomplete,\n    collectionName: 'user',\n    queryFields: User.getSimpleFields(),\n    multiple: false,\n    required: true,\n    extraButton: { title: 'ASSIGNTO', buttons: [{ text: 'ME', handler: onUserMeActionHandler }] }\n  })\n  user: any;\n\n  @Editable('Todo', {\n    title: 'DUEDATE',\n    type: FormFieldType.datetime,\n    required: false,\n    clearable: true,\n    minDate: new Date(),\n    secondary: true,\n    icon: 'yo-calendar'\n  })\n  duedate: Date;\n\n  @Editable('Todo', {\n    title: 'NOTIFICATIONEMAILS',\n    type: FormFieldType.emailreport,\n    showUsers: true,\n    secondary: true,\n    icon: 'yo-email'\n  })\n  notificationemail?: Array<string>;\n\n  @Editable('Todo', {\n    title: 'REMINDER',\n    type: FormFieldType.datetime,\n    required: false,\n    clearable: true,\n    secondary: true,\n    icon: 'yo-activity'\n  })\n  reminderdate?: Date;\n\n  @Editable('Todo', { type: FormFieldType.starrating, secondary: true, icon: 'yo-priority' })\n  priority?: number;\n\n  field?: IFormField;\n}\n\n@Model({ className: 'TodoTask' })\nexport class TodoTask extends ITodoTask {\n  @Editable('TodoTask', { type: FormFieldType.text, title: 'TITLE', required: true })\n  text: { value: string };\n\n  @Editable('TodoTask', { type: FormFieldType.textarea, required: false })\n  comments?: { value: string };\n\n  @Editable('TodoTask', {\n    type: FormFieldType.datetime,\n    required: false,\n    clearable: true,\n    minDate: new Date()\n  })\n  duedate?: { value: Date };\n\n  @Editable('TodoTask', { type: FormFieldType.toggle, required: false, title: 'PHOTO', flex: 50 })\n  hasphoto?: { value: boolean };\n\n  @Editable('TodoTask', {\n    type: FormFieldType.toggle,\n    required: false,\n    title: 'MANDATORYPHOTO',\n    flex: 50,\n    condition: 'hasphoto.value==1'\n  })\n  isphotorequired?: { value: boolean };\n\n  @Editable('TodoTask', {\n    type: FormFieldType.toggle,\n    required: false,\n    title: 'ALLOWLIBRARY',\n    flex: 50,\n    condition: 'hasphoto.value==1'\n  })\n  allowLibrary?: { value: boolean };\n\n  field?: IFormField;\n}\n\n@Model({ className: 'TodoTaskSimple' })\nexport class TodoTaskSimple extends ITodoTaskSimple {\n  @Editable('TodoTaskSimple', {\n    type: FormFieldType.textarea,\n    title: 'DESCRIPTION',\n    required: true\n  })\n  text: { value: string };\n\n  @Editable('TodoTaskSimple', {\n    title: 'ASSIGNTO',\n    name: 'user',\n    type: FormFieldType.autocomplete,\n    queryFields: User.getSimpleFields(),\n    collectionName: 'user',\n    multiple: false,\n    required: true,\n    extraButton: { title: 'ASSIGNTO', buttons: [{ text: 'ME', handler: onUserMeActionHandler }] }\n  })\n  user: any;\n\n  @Editable('TodoTaskSimple', {\n    type: FormFieldType.datetime,\n    required: false,\n    clearable: true,\n    minDate: new Date()\n  })\n  duedate?: { value: Date };\n\n  @Editable('TodoTaskSimple', {\n    type: FormFieldType.toggle,\n    required: false,\n    title: 'ASKFORPHOTO',\n    flex: 50\n  })\n  hasphoto?: { value: boolean };\n\n  @Editable('TodoTaskSimple', {\n    type: FormFieldType.toggle,\n    required: false,\n    title: 'MANDATORYPHOTO',\n    flex: 50,\n    condition: 'hasphoto.value==1'\n  })\n  isphotorequired?: { value: boolean };\n\n  @Editable('TodoTaskSimple', {\n    type: FormFieldType.toggle,\n    required: false,\n    title: 'ALLOWLIBRARY',\n    flex: 50,\n    condition: 'hasphoto.value==1'\n  })\n  allowLibrary?: { value: boolean };\n  field?: IFormField;\n}\n","import { Injector } from '@angular/core';\nimport { FormFieldType, ITranslation } from '@shared/stencil';\n\nimport { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { Searchable } from '../../decorators/searchable/searchable.decorator';\nimport { getGroupsTransform } from '../condition/condition.interface';\n\nimport { Translate } from '@shared/translate';\nimport { Googletranslate } from '../../services/googletranslate/googletranslate.service';\nimport { Requestor } from '../../services/requestor/requestor.service';\n\nimport { capitalize } from 'lodash-es';\n\nexport function translateButtonHandler(data, field, injector: Injector) {\n  const rq: Requestor = injector.get<Requestor>(Requestor);\n  let language = data.language;\n  let value = data.value;\n  if (value && language) {\n    data[language] = value;\n    return Googletranslate.getAll(value, language, rq)\n      .toPromise()\n      .then((values: Array<{ language: string; value: string }>) => {\n        let isCapitalized = capitalize(value) === value;\n        values.forEach(v => {\n          data[v.language] = isCapitalized ? capitalize(v.value) : v.value;\n        });\n      });\n  }\n}\n\nexport function resetButtonHandler(data, field) {\n  Translate.availablesLanguage\n    .filter(l => l !== 'key')\n    .forEach(l => {\n      data[l] = null;\n    });\n  data = { ...data };\n}\n\n@Model({\n  className: 'Translation',\n  collectionName: 'translations',\n  fields: ['*'],\n  include: ['_tenant'],\n  icon: 'yo-translate'\n})\nexport class Translation extends ITranslation {\n  @Editable('Translation', { title: 'ID', visible: false, forceExport: true })\n  _id?: string;\n\n  @Editable('Translation', {\n    type: FormFieldType.autocomplete,\n    title: 'LANGUAGE',\n    translate: true,\n    values: Translate.availablesLanguage,\n    clearable: false,\n    required: true,\n    autoselect: true,\n    columnDefinition: { width: 40 }\n  })\n  language: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text })\n  @Searchable('Translation')\n  key: string;\n\n  @Editable('Translation', {\n    required: true,\n    type: FormFieldType.text\n  })\n  value: string;\n\n  @Editable('Translation', {\n    type: FormFieldType.button,\n    title: 'TRANSLATE',\n    color: 'success',\n    suppressExport: true,\n    handler: translateButtonHandler\n  })\n  translateButton?: any;\n\n  @Editable('Translation', {\n    type: FormFieldType.button,\n    title: 'RESET',\n    suppressExport: true,\n    color: 'danger',\n    handler: resetButtonHandler\n  })\n  resetButton?: any;\n\n  @Editable('Translation', { type: FormFieldType.toggle, title: 'UNVALIDATEREASON' })\n  isReject: boolean;\n\n  @Editable('Translation', { type: FormFieldType.toggle, title: 'ANNOTATE' })\n  isPhotoAnnotation: boolean;\n\n  @Editable('Translation', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'groups',\n    filters: [[{ field: 'isRole', operator: { _id: 'neq' }, value: true }, { field: 'type', operator: { _id: 'nin' }, value: ['plan'] }]],\n    hiddenFields: ['isRole', 'type'],\n    idOnly: true,\n    mapTransform: getGroupsTransform,\n    multiple: true,\n    clearable: false,\n    required: true\n  })\n  group: string | Array<string>;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) en: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) us: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) fr: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) es: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) pl: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) nl: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) de: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) it: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) ru: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) zhs: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) zht: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) pt: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) kr: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) ja: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) ua: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) he: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) ar: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) cz: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) th: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) tr: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) bg: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) el: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) sl: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) sk: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) ro: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) hu: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) et: string;\n\n  @Editable('Translation', { required: true, type: FormFieldType.text }) br: string;\n}\n","import { Model } from '../../decorators/model/model.decorator';\nimport { Editable } from '../../decorators/editable/editable.decorator';\nimport { FormFieldType, IWorkplaceGroups, IWorkplacePost } from '@shared/stencil';\n\n@Model({\n  className: 'WorkplaceGroups',\n  collectionName: 'workplace_groups',\n  fields: ['*'],\n  include: []\n})\nexport class WorkplaceGroups extends IWorkplaceGroups {\n  @Editable('WorkplaceGroups', { readonly: true, type: FormFieldType.text })\n  name: string;\n\n  @Editable('WorkplaceGroups', { readonly: true, type: FormFieldType.text })\n  icon: string;\n\n  @Editable('WorkplaceGroups', { readonly: true, type: FormFieldType.text })\n  cover: string;\n\n  @Editable('WorkplaceGroups', { readonly: true, type: FormFieldType.text })\n  description: string;\n}\n\n@Model({ className: 'WorkplacePost' })\nexport class WorkplacePost extends IWorkplacePost {\n  @Editable('WorkplacePost', { type: FormFieldType.textarea, required: true })\n  comments: string;\n\n  @Editable('WorkplacePost', {\n    title: 'GROUPS',\n    type: FormFieldType.autocomplete,\n    collectionName: 'workplace_groups',\n    multiple: true,\n    required: true\n  })\n  workplaceGroups: any;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Entity } from '../../interfaces/entity/entity.interface';\nimport { Broker } from '../broker/broker.service';\nimport { Requestor } from '../requestor/requestor.service';\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\n\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class Activity {\n  constructor(protected broker: Broker, protected rq: Requestor) {}\n\n  protected _viewOrLike(entity: Entity, entityName: string, action: string): Observable<any> {\n    let url = this.broker.getApiUrl() + 'activity/' + action;\n    return this.rq.post(url, { entityRef: entity._id, entityName });\n  }\n\n  getActionFilter(entityId: string, action: string = 'view') {\n    return [[{ field: 'action', operator: { _id: 'eq' }, value: action }, { field: 'entityRef', operator: { _id: 'inq' }, value: [entityId] }]];\n  }\n\n  getUserTransform() {\n    return (res: ResponseObject) => {\n      if (res.data) {\n        res.data = res.data.map(r => r.user);\n      }\n      return res;\n    };\n  }\n\n  getActionAggregateOptions() {\n    return (start, limit) => [{ $lookup: { from: 'user', localField: 'userRef', foreignField: '_id', as: 'user' } }, { $unwind: '$user' }, ...(start > 0 ? [{ $skip: start }] : []), ...(limit > 0 ? [{ $limit: limit }] : [])];\n  }\n}\n","import { Translate } from '@shared/translate';\nimport { Broker } from '../broker/broker.service';\nimport { Models } from '../models/models.service';\n\nimport { ResponseObject } from '../../interfaces/response-object/response-object.interface';\nimport { Entity } from '../../interfaces/entity/entity.interface';\nimport { FilterPipe } from '../../pipes/filter/filter.pipe';\nimport { Query } from '@shared/stencil';\n\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, switchMap, mergeMap } from 'rxjs/operators';\n\nimport { orderBy, isArray, isObject, keys, isEqual, isFunction, isEmpty, isNumber } from 'lodash-es';\n\nexport class DataLoader {\n  public get pageSize() {\n    return this._pageSize;\n  }\n\n  public set pageSize(val) {\n    this._pageSize = val;\n  }\n\n  public get currentPage() {\n    return this._currentPage;\n  }\n\n  public get total() {\n    return this._total;\n  }\n\n  public set total(value) {\n    this._total = value;\n  }\n\n  public get totalPage() {\n    return Math.ceil(this._total / this.pageSize);\n  }\n\n  public get loading() {\n    return this._loading;\n  }\n\n  public get loadingPageCount() {\n    return this._loadingPageCount;\n  }\n\n  public set loadingPageCount(value) {\n    this._loadingPageCount = value;\n  }\n\n  private _currentPage = 0;\n  private _total = 0;\n  private _collectionName = '';\n  private _loading = false;\n  private _pageSize: number; //CoreConfig.isWeb() ? 30 :\n  private _items: Array<any>;\n  private _translate: boolean;\n  private filterPipe: FilterPipe;\n  private _looseCount: boolean;\n  private _loadingPageCount: boolean;\n\n  constructor(private broker: Broker, collectionName: string, items: Array<any> = null, pageSize: number = null, translate: boolean = null, translateService: Translate = null, looseCount: boolean = null) {\n    this._collectionName = Models.fixCollectionName(collectionName);\n    this._items = items;\n    this._translate = translate;\n    this._looseCount = looseCount;\n    if (pageSize && isNumber(pageSize) && pageSize > 0) {\n      this._pageSize = pageSize;\n    } else {\n      this._pageSize = 21;\n    }\n    this.filterPipe = new FilterPipe(translateService);\n  }\n\n  loadWithSearch(currentPage: number = 0, search: string = null, filters = [], sortModel = null, mapTransform = null, mapTransformAsync = false, tag = false, subQuery = null, fields: string[] = null, include: string[] = null, aggregateOptions: (skip, limit, sorts, search, filters) => Array<any> = null, aggregateOptionsOffline: (skip, limit, sorts, search, filters) => Array<any> = null, cacheId: string = null, customFilter: any = null, includeCount = false) {\n    return this.load(currentPage, search, filters, sortModel, mapTransform, mapTransformAsync, tag, subQuery, fields, include, aggregateOptions, aggregateOptionsOffline, cacheId, customFilter, includeCount);\n  }\n\n  loadWithSearchDebounce(start = 0, search: Observable<string> = null, filters = [], sortModel = null, mapTransform = null, mapTransformAsync = false, tag = false, subQuery = null, fields: string[] = null, include: string[] = null, aggregateOptions: (skip, limit, sorts, search, filters) => Array<any> = null, aggregateOptionsOffline: (skip, limit, sorts, search, filters) => Array<any> = null, cacheId: string = null, customFilter: any = null, includeCount = false) {\n    if (search) {\n      return search.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap(term => this.load(start, term.toString(), filters, sortModel, mapTransform, mapTransformAsync, tag, subQuery, fields, include, aggregateOptions, aggregateOptionsOffline, cacheId, customFilter, includeCount))\n      );\n    } else {\n      return this.load(start, null, filters, sortModel, mapTransform, mapTransformAsync, tag, subQuery, fields, include, aggregateOptions, aggregateOptionsOffline, cacheId, customFilter, includeCount);\n    }\n  }\n\n  load(currentPage: number = 0, search: string = null, filters = [], sortModel = null, mapTransform = null, mapTransformAsync = false, tag = false, subQuery = null, fields: string[] = null, include: string[] = null, aggregateOptions: (skip, limit, sorts, search, filters) => Array<any> = null, aggregateOptionsOffline: (skip, limit, sorts, search, filters) => Array<any> = null, cacheId: string = null, customFilter: any = null, includeCount = false) {\n    this._loading = true;\n    if (search) {\n      search = search.trim();\n    }\n    if ((this._items && this._items.length > 0) || !this._collectionName || isEmpty(this._collectionName)) {\n      let obs = new Observable(observer => {\n        let data = this._items || [];\n        if (search) {\n          data = this.filterPipe.transform(data, search, null, null, this._translate);\n        }\n        if (sortModel) {\n          data = orderBy(data, sortModel.map(s => s.colId), sortModel.map(s => s.sort.toLowerCase()));\n        }\n        this._total = data.length;\n        this._currentPage = currentPage;\n\n        if (data.slice) {\n          data = data.slice(currentPage * this.pageSize, (currentPage + 1) * this.pageSize);\n        }\n\n        let res: ResponseObject = {\n          count: this._total,\n          data: data.map ? data.map(value => this.convertItem(value)) : []\n        };\n        observer.next(res);\n        observer.complete();\n      });\n      if (mapTransformAsync && mapTransform) {\n        return obs.pipe(mergeMap(res => mapTransform(res, search, filters, currentPage, this.pageSize)));\n      } else if (mapTransform) {\n        return obs.pipe(map(res => mapTransform(res, search, filters, currentPage, this.pageSize)));\n      } else {\n        return obs;\n      }\n    } else if (aggregateOptions && isFunction(aggregateOptions)) {\n      if (!mapTransform) {\n        mapTransform = x => x;\n      }\n      return this.broker\n        .aggregateQuery(this._collectionName, filters, aggregateOptions(currentPage * this.pageSize, this.pageSize, sortModel, search, filters), search, null, includeCount, cacheId, customFilter, subQuery, aggregateOptionsOffline && isFunction(aggregateOptionsOffline) ? aggregateOptionsOffline(currentPage * this.pageSize, this.pageSize, sortModel, search, filters) : null)\n        .pipe(mapTransformAsync ? mergeMap(res => mapTransform(res, search, filters, currentPage, this.pageSize)) : map(res => mapTransform(res, search, filters, currentPage, this.pageSize)))\n        .pipe(\n          map(retVal => {\n            this._currentPage = currentPage;\n            if (includeCount) {\n              this._total = retVal.count;\n            } else if (isObject(retVal) && isArray(retVal.data)) {\n              //nothing to do. used in photo duplicate\n            } else {\n              retVal = { data: retVal };\n            }\n            this._loading = false;\n            return retVal;\n          })\n        );\n    } else {\n      let retVal = this.broker.getAll(this._collectionName, fields, include, search, filters, sortModel, currentPage * this.pageSize, this.pageSize, tag, subQuery, customFilter, cacheId, this._looseCount, !includeCount).pipe(\n        map((res: any) => {\n          this._currentPage = currentPage;\n          this._loading = false;\n          if (!includeCount) {\n            this._total = Math.max(-1, this._total);\n            return { count: this._total, data: res };\n          } else {\n            this._total = res.count;\n            return res;\n          }\n        })\n      );\n      if (mapTransformAsync && mapTransform) {\n        return retVal.pipe(mergeMap(res => mapTransform(res, search, filters, currentPage, this.pageSize)));\n      } else if (mapTransform) {\n        return retVal.pipe(map(res => mapTransform(res, search, filters, currentPage, this.pageSize)));\n      } else {\n        return retVal;\n      }\n    }\n  }\n\n  getQuery(currentPage: number = 0, search: string, filters = [], sortModel = null, subQuery = null, fields: string[] = null, include: string[] = null, customFilter: any = null, includeCount = false): Query {\n    return this.broker.getQuery(this._collectionName, fields, include, search, filters, sortModel, currentPage * this.pageSize, this.pageSize, subQuery, customFilter);\n  }\n\n  getCount(search?: string, filters?, subQuery = null, customFilter = null) {\n    return this.broker.getCount(this._collectionName, search, filters, subQuery, customFilter).pipe(\n      map(ret => {\n        this._total = ret.count;\n        return ret;\n      })\n    );\n  }\n\n  convertItem(value) {\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n      return new Entity(value);\n    } else if (isEqual(keys(value), ['_id'])) {\n      return new Entity(value._id);\n    } else if (typeof value === 'undefined') {\n      return new Entity('undefined');\n    } else {\n      return value;\n    }\n  }\n}\n"]}