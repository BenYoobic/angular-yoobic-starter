import { EventEmitter, Injector } from '@angular/core';
import { Cache } from '../cache/cache.service';
import { Requestor } from '../requestor/requestor.service';
import { Googlemaps } from '../googlemaps/googlemaps.service';
import { Workplace } from '../workplace/workplace.service';
import { Session } from '../session/session.service';
import { Files } from '../files/files.service';
import { Box } from '../box/box.service';
import { Config } from '../config/config.service';
import { Smartloc } from '../smartloc/smartloc.service';
import { Unsplash } from '../unsplash/unsplash.service';
import { ResponseObject } from '../../interfaces/response-object/response-object.interface';
import { Location } from '../../interfaces/location/location.interface';
export * from '../../interfaces/response-object/response-object.interface';
import { Filters, Query, SubQuery, IEntity, ISort } from '@shared/stencil';
import { CoreConfig, PromiseService, Log, LocalForageService, Network } from '@shared/common';
import { Translate } from '@shared/translate';
import { FileUploader } from 'ng2-file-upload';
import { FileTransfer } from '@ionic-native/file-transfer/ngx';
import { Observable } from 'rxjs';
export declare class Broker {
    private rq;
    private box;
    private googlemaps;
    private workplace;
    private session;
    private files;
    private promise;
    private coreConfig;
    private log;
    private network;
    private transfer;
    private localForage;
    config: Config;
    protected injector: Injector;
    protected cache: Cache;
    protected geoloc: Smartloc;
    protected translate: Translate;
    protected unsplash: Unsplash;
    private isUploadingDatabase;
    constructor(rq: Requestor, box: Box, googlemaps: Googlemaps, workplace: Workplace, session: Session, files: Files, promise: PromiseService, coreConfig: CoreConfig, log: Log, network: Network, transfer: FileTransfer, localForage: LocalForageService, config: Config, injector: Injector, cache: Cache, geoloc: Smartloc, translate: Translate, unsplash: Unsplash);
    init(): void;
    getApiUrl(): string;
    getServerUrl(): string;
    getCollectionName(collectionName: string): string;
    getById(collectionName: string, id: string, fields?: Array<string>, include?: Array<string>, idAttributeName?: string): Observable<any>;
    create(collectionName: string, entity: any): Observable<any>;
    update(collectionName: string, entity: any): Observable<any>;
    save(collectionName: string, entity: any, fields?: Array<string>): Observable<any>;
    patch(collectionName: string, entity: any): Observable<any>;
    upsert(collectionName: string, entity: Object, previousEntity?: Object, skipAcl?: boolean): Observable<any>;
    upsertAll(collectionName: string, entities: Array<Object>): Observable<any>;
    uploadEntityFiles(entity: any, suffixs?: Array<string>, progressEmitter?: EventEmitter<any>, tags?: Array<string>, promisesOnly?: boolean, totalOffset?: number): Promise<any>;
    uploadEntitiesFiles(entities: Array<any>, suffixs?: Array<string>, progressEmitter?: EventEmitter<any>, tags?: Array<string>): Promise<any>;
    prepareUpload(file: any): Promise<any>;
    updateAll(collectionName: string, query: Query, entity: any): Observable<any>;
    setAcl(entity: any, group?: string | Array<string>, addWrite?: boolean, collectionName?: string, users?: Array<string>): void;
    getCurrentGroups(): string[];
    updateCustomModel(collectionName: string, entity: any): void;
    upload(file: any, progressEmitter?: EventEmitter<any>, offsetIndex?: number, total?: number, tags?: Array<string>, totalOffset?: number): Promise<string>;
    uploadData(data: any, progressEmitter?: EventEmitter<any>, offsetIndex?: number, total?: number): Promise<string>;
    incrementTags(collectionName: string, entity: any): Observable<any>;
    updateTags(collectionName: string): Observable<any>;
    createAllTags(): Observable<any>;
    delete(collectionName: string, id: string): Observable<any>;
    deleteAll(collectionName: string, query: Query): Observable<any>;
    getQuery(collectionName: string, fields?: Array<string>, include?: Array<string>, search?: string, filters?: Filters | Object, sorts?: Array<ISort>, skip?: number, limit?: number, subQuery?: SubQuery, customFilter?: any): Query;
    getCount(collectionName: string, search?: string, filters?: Filters, subQuery?: SubQuery, customFilter?: any, noOffline?: boolean): Observable<ResponseObject>;
    getAll(collectionName: string, fields?: Array<string>, include?: Array<string>, search?: string, filters?: Filters, sorts?: Array<ISort>, skip?: number, limit?: number, tag?: boolean, subQuery?: SubQuery, customFilter?: any, cacheId?: string, looseCount?: boolean, noCount?: boolean, noOffline?: boolean): Observable<ResponseObject>;
    getAllTags(collectionName: string, search?: string, filters?: Filters, skip?: number, limit?: number, useTagsCollection?: boolean): Observable<{
        data: any;
        count: any;
    }>;
    getAllTagsOffline(config: {
        collectionName: string;
        search?: string;
        filters?: Filters;
    }): Observable<{
        data: any[];
        count: number;
        config: {
            collectionName: string;
            search?: string;
            filters?: Filters;
        };
    }>;
    getMultipleAllTags(config: {
        collectionName: string;
        search?: string;
        filters?: Filters;
        subQuery?: SubQuery;
    }[], skip?: number, limit?: number): Observable<{
        data: any[];
        count: number;
        config: {
            collectionName: string;
            search?: string;
            filters?: Filters;
        };
    }[]> | Observable<{
        data: any;
        count: any;
        config: {
            collectionName: string;
            search?: string;
            filters?: Filters;
            subQuery?: SubQuery;
        };
    }[]>;
    getAllQuery(collectionName: any, query: Query, looseCount?: boolean, noCount?: boolean): Observable<any>;
    getAllGoogleMaps(search?: string): Observable<{
        count: any;
        data: any;
    }>;
    getAllUnsplash(search?: string, skip?: number, limit?: number): Observable<any>;
    getAllWorkplace(collectionName: string, search?: string): Observable<ResponseObject>;
    getAllOperation(collectionName: string, query: Query): Observable<any>;
    syncDatabase(lastSync?: Date, progressEvent?: EventEmitter<number>): Promise<any>;
    clearDatabase(): Promise<any>;
    getDeletedEntities(collectionName: string, data: IEntity[]): Observable<any>;
    getOfflineEntitiesCount(): Promise<number>;
    uploadDatabase(progressEmitter?: EventEmitter<number>): Promise<number>;
    uploadDatabaseOrGetCount(returnCount: boolean, progressEmitter?: EventEmitter<number>): Promise<number>;
    isOfflineEntity(entity: IEntity): boolean;
    isOfflineId(id: string): boolean;
    getAllOffline(collectionName: string, offlineOnly: boolean, search?: string, filters?: Filters, sorts?: Array<ISort>, skip?: number, limit?: number, customFilter?: any, noCount?: boolean): Observable<any>;
    aggregateQuery(collectionName: string, filters?: Filters, aggregateOptions?: Array<any>, search?: string, excludedFields?: Array<any>, includeCount?: boolean, cacheId?: string, customFilter?: any, subQuery?: SubQuery, aggregateOptionsOffline?: any): Observable<any>;
    aggregateQueries(queries: Array<Query>, includeCount?: boolean, cacheId?: string): Observable<any[]>;
    getAggregateQuery(collectionName: string, filters?: Filters, aggregateOptions?: Array<any>, search?: string, excludedFields?: Array<any>, includeCount?: boolean, customFilter?: any, subQuery?: SubQuery): Query;
    aggregateLogs(stages?: Array<any>, groups?: Array<string>, userIds?: Array<string>): Observable<any>;
    textSearch(query: string, collectionName: string): Observable<any>;
    createFile(file: File, group: string | Array<string>, hideMobile?: boolean, fileName?: string, tenantRef?: string): Observable<any>;
    getFileUploader(fileTypes?: any, maxFileSize?: any): FileUploader;
    execute(params: any): Observable<any>;
    undoOperation(operationId: string): Observable<any>;
    getMarkers(locations: Array<Location>): {
        _id: string;
        address: string;
        latitude: number;
        longitude: number;
        title: string;
        color: string;
    }[];
    getUserOrLocationStat(id: string | Array<string>, mode: string, customFilter?: any): Observable<Array<{
        _id: string;
        booked: number;
        count: number;
        finished: number;
        archived: number;
        validated: number;
        rejected: number;
        tobevalidated: number;
        available: number;
    }>>;
    setTimescale(filters: Filters, timescale: string, dateField?: string, endDate?: Date | string, previous?: boolean): void;
    private _hasFiles;
    private _getFileProperties;
}
export declare function getStartAndEndDates(timescale: any, endDate?: Date | string, amount?: number, notsliding?: boolean, previous?: boolean): string[];
