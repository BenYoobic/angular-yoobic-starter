import { EventEmitter } from '@angular/core';
import { Broker } from '../broker/broker.service';
import { Requestor } from '../requestor/requestor.service';
import { Session } from '../session/session.service';
import { Push } from '../push/push.service';
import { Config } from '../config/config.service';
import { User } from '../../interfaces/user/user.interface';
import { Observable, Subject } from 'rxjs';
import { Network, LocalStorage, LocalForageService, CoreConfig } from '@shared/common';
import { ITenant, IPublicApiToken } from '@shared/stencil';
export declare class Authentication {
    protected rq: Requestor;
    protected push: Push;
    protected config: Config;
    protected broker: Broker;
    protected network: Network;
    protected localStorage: LocalStorage;
    protected localForage: LocalForageService;
    protected session: Session;
    protected coreConfig: CoreConfig;
    protected static roleAdmin: string;
    protected static roleTeam: string;
    protected static roleTrial: string;
    protected static roleDashboard: string;
    protected static roleManager: string;
    protected static roleMissionViewer: string;
    login$: Subject<string>;
    logout$: Subject<string>;
    profileUpdated$: EventEmitter<any>;
    constructor(rq: Requestor, push: Push, config: Config, broker: Broker, network: Network, localStorage: LocalStorage, localForage: LocalForageService, session: Session, coreConfig: CoreConfig);
    login(username: string, password: string, roles?: Array<string>): Observable<any>;
    loginSocial(accessToken: string, provider?: string): Observable<any>;
    getLoginAdvancedUrl(tenant: string, method: string, host: string): string;
    getTenantAdvancedLoginMethods(tenant: string): Observable<any>;
    getTenantFromToken(token: any): {
        _tenantRef?: string;
        _tenantName?: string;
        sub?: string;
    };
    afterLogin(res: any): any;
    cleanUpLocalStorage(): void;
    getCurrentSession(): Observable<Session>;
    doLogout(): Observable<any>;
    logout(): Promise<void>;
    afterLogout(): Promise<void>;
    signup(email: string, imageData: any, password: string): Observable<any>;
    inviteUsers(users: Array<{
        email: string;
        roles: Array<string>;
        locationRef?: string;
    }>, groups: Array<string>, password?: string, sendPassword?: boolean, appName?: string, appleStoreUrl?: string, playStoreUrl?: string, _tenantRef?: string): Observable<any>;
    isLoggedIn(): boolean;
    hasRole(role: string): boolean;
    hasRoles(roles: Array<string>): boolean;
    hasAllRoles(roles: Array<string>): boolean;
    hasGroup(group: string): boolean;
    hasGroups(groups: Array<string>): boolean;
    hasAllGroups(groups: Array<string>): boolean;
    isAdmin(checkSmartin?: boolean): boolean;
    isTrial(): boolean;
    isDashboard(): boolean;
    isTeam(): boolean;
    isCrowd(): boolean;
    isStore(): boolean;
    isStoreManager(): string;
    isRoleAdmin(): boolean;
    isRoleEditor(): boolean;
    isRoleViewer(): boolean;
    isRoleManager(): boolean;
    isRoleField(): boolean;
    isRoleStoreManager(): boolean;
    isRoleStore(): boolean;
    hasAccessToOperations(): boolean;
    hasAccessToBoost(): boolean;
    getCurrentUser(): User;
    passwordChange(oldPassword: string, newPassword: string): Observable<any>;
    passwordReset(email: any, isMagicLink?: boolean, urlPrefix?: string): Observable<any>;
    passwordResetConfirm(token: string, password: string, host?: string): Observable<any>;
    passwordResetAdmin(user: any, password: string, dontSendMail?: boolean): Observable<any>;
    impersonate(username: string): Observable<any>;
    forceLogout(username: string): Observable<any>;
    generatePassword(): string;
    updateProfile(user?: any, skipAcl?: boolean, fields?: Array<string>): Observable<any>;
    isTokenExpired(token: string): boolean;
    setToken(token: string, userId: string): Observable<any>;
    createPublicApiToken(tenant: ITenant): Observable<any>;
    invalidatePublicApiToken(token: IPublicApiToken): Observable<any>;
}
