import { CoreConfig, Log } from '@shared/common';
import { File } from '../../interfaces/file/file.interface';
import { Requestor } from '../requestor/requestor.service';
import { Config } from '../config/config.service';
import { Observable } from 'rxjs';
import { IFilesService } from '@shared/stencil';
export declare class Files implements IFilesService {
    private rq;
    private coreConfig;
    private log;
    protected config: Config;
    constructor(rq: Requestor, coreConfig: CoreConfig, log: Log, config: Config);
    isFile(file: any): boolean;
    isBase64(file: any): boolean;
    isFileUri(file: any): any;
    isImageFile(file: any): any;
    read(nativeFile: File | Blob, type?: string, encoding?: string): Promise<string>;
    getExtension(file: File | any): any;
    changeExtension(filename: string, extension: string): string;
    getMaxSize(extension: any): number;
    toPng(value: string): string;
    isValid(file: File): boolean;
    isImage(file: File | any): boolean;
    isVideo(file: File | any): boolean;
    isAudio(file: File | any): boolean;
    isDocument(file: File | any): boolean;
    getType(file: File | any): "audio" | "video" | "image" | "unknown" | "document";
    getMimeType(file: File | any): "application/pdf" | "image/jpeg" | "image/png" | "application/vnd.ms-excel" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "text/csv" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "image/gif" | "image/bmp" | "video/mp4" | "video/3gpp" | "video/mpg" | "video/avi" | "audio/mpeg" | "audio/wav";
    getIcon(file: File): "yo-svg-play" | "yo-play" | "yo-file-pdf danger" | "yo-file-excel success" | "yo-file-powerpoint warning" | "yo-file-word accent" | "yo-image royal" | "yo-attach-file";
    getVideoPoster(value: string): string;
    b64toBlob(b64Data: any, contentType?: any, sliceSize?: number): Blob;
    blobToFile(blob: any): any;
    b64ToFile(data: string, file: File): any;
    saveBase64AsImageFile(data: string): Promise<any>;
    resizeBase64Image(base64: any, maxWidth: any, maxHeight: any): Promise<{}>;
    getBase64MimeType(base64: string): string;
    getBase64Extension(base64: string): string;
    resizeImage(file: File, maxWidth: Number, maxHeight: Number): Promise<any>;
    getNativeDirectory(subfolder: any): Promise<import("@ionic-native/file").DirectoryEntry>;
    resolveFilePath(filePath: string): Promise<any>;
    fixImageOrientation(path: any, fileName: any): Promise<any>;
    moveToImageDirectory(originalFilePath: string, disableOrientationFix?: boolean): Promise<string>;
    moveToImageDirectoryBase(fileDirPath: string, fileEntry: any, newName: string, originalFilePath: string): Promise<string>;
    fileNativeWriteFile(path: any, fileName: any, text: any, options: any): Promise<any>;
    fileNativeCheckFile(path: any, fileName: any): Promise<boolean>;
    fixAbsolutePath(data: string): Promise<string>;
    getCloudinaryUrl(retVal: any): any;
    downloadFile(filename: any, mediaType: any, url: any, options: any): Promise<any>;
    getLocalFilePath(): string;
    getLocalFileName(fileName: string): string;
    saveToLocalFile(blob: any, fileName: any): Promise<any>;
    getUrlWithAnnotations(src: string, photo?: any): string;
    cleanFileName(fileName: string): string;
    downloadFileToDevice(source: any, target: any): Promise<any>;
    showPdfOnDevice(filePath: string, fileName?: string): Promise<any>;
    uploadProxy(photoUrl: string): Observable<any>;
    exportToFile(content: any, type: any, encoding: any, filename: any): void;
    openBlob(blob: any, fileName: string, mimeType: string): Promise<void>;
    afterOpenBlob(filePath: any, mimeType: any): Promise<void>;
    _requestExternalStoragePermission(): Promise<{}>;
}
