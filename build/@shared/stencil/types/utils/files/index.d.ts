export * from './document';
import { IFile } from '../../interfaces';
import { DirectoryEntry } from '@ionic-native/file';
export declare function getUUID(): any;
export declare function isBase64(file: any): boolean;
export declare function isFileUri(file: any): any;
export declare function isImageFile(file: any): any;
export declare function read(nativeFile: File | Blob, type?: string, encoding?: string): Promise<string>;
export declare function changeExtension(filename: string, extension: string): string;
export declare function toPng(value: string): string;
export declare function getMaxSize(extension: any): number;
export declare function isValid(file: File): boolean;
export declare function getMimeType(file: File | any): "application/pdf" | "image/jpeg" | "image/png" | "application/vnd.ms-excel" | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | "text/csv" | "application/vnd.ms-powerpoint" | "application/vnd.openxmlformats-officedocument.presentationml.presentation" | "application/msword" | "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | "image/gif" | "image/bmp" | "video/mp4" | "video/3gpp" | "video/mpg" | "video/avi" | "audio/mpeg" | "audio/wav";
export declare function fileHasIcon(file: File | IFile): boolean;
export declare function getIcon(file: File | IFile): "yo-svg-play" | "yo-play" | "yo-file-pdf danger" | "yo-file-excel success" | "yo-file-powerpoint warning" | "yo-file-word accent" | "yo-image royal" | "yo-attach-file";
export declare function getVideoPoster(value: string): string;
export declare function b64toBlob(b64Data: any, contentType?: any, sliceSize?: number): Blob;
export declare function blobToFile(blob: any): File;
export declare function b64ToFile(data: string, file: File): File;
export declare function saveBase64AsImageFile(data: string): Promise<any>;
export declare function resizeBase64Image(base64: any, maxWidth: any, maxHeight: any): Promise<{}>;
export declare function rotateBase64Image(base64data: any, degrees: any, enableURI: any, useFile?: boolean): Promise<string>;
export declare function getBase64MimeType(base64: string): string;
export declare function getBase64Extension(base64: string): string;
export declare function resizeImage(file: File, maxWidth: Number, maxHeight: Number): Promise<File>;
export declare function getNativeDirectory(subfolder: any): Promise<DirectoryEntry>;
export declare function updatePathSessionId(oldPath: any): Promise<string>;
export declare function urlToFileBlob(filePath: string): Promise<Blob>;
export declare function resolveFilePath(filePath: string): Promise<any>;
export declare function fixImageOrientation(path: any, fileName: any): Promise<any>;
export declare function moveToImageDirectory(originalFilePath: string, disableOrientationFix?: boolean, fileName?: string): Promise<string>;
export declare function moveToImageDirectoryBase(fileDirPath: string, fileEntry: any, newName: string, originalFilePath: string): Promise<string>;
export declare function fileNativeWriteFile(path: any, fileName: any, text: any, options: any): Promise<any>;
export declare function fileNativeCheckFile(path: any, fileName: any): Promise<boolean>;
export declare function fixAbsolutePath(data: string): Promise<string>;
export declare function getCloudinaryUrl(retVal: any): any;
export declare function getLocalFilePath(): string;
export declare function getLocalFileName(fileName: string): string;
export declare function saveToLocalFile(blob: any, fileName: any): Promise<any>;
export declare function downloadPdfToStorage(document: any): Promise<any>;
export declare function getUrlWithAnnotations(src: string, photo?: any): string;
export declare function cleanFileName(fileName: string): string;
export declare function showPdfOnDevice(filePath: string, fileName?: string): Promise<any>;
export declare function downloadFileToDevice(source: any, target: any): Promise<any>;
export declare function openBlob(blob: any, fileName: string, mimeType: string): Promise<void>;
export declare function afterOpenBlob(filePath: any, mimeType: any): Promise<void>;
