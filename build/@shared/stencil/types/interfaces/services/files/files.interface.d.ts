import { IFile } from '../../entities/file/file.interface';
export interface IFilesService {
    isFile(file: any): boolean;
    isBase64(file: any): boolean;
    isFileUri(file: any): boolean;
    isImageFile(file: any): boolean;
    read(nativeFile: IFile | Blob, type: string, encoding?: string): Promise<string>;
    getExtension(file: IFile | any): string;
    changeExtension(filename: string, extension: string): string;
    getMaxSize(extension: any): number;
    toPng(value: string): string;
    isValid(file: IFile): boolean;
    isImage(file: IFile | any): boolean;
    isVideo(file: IFile | any): boolean;
    isAudio(file: IFile | any): boolean;
    isDocument(file: IFile | any): boolean;
    getType(file: IFile | any): string;
    getMimeType(file: IFile | any): string;
    getIcon(file: IFile): string;
    getVideoPoster(value: string): string;
    b64toBlob(b64Data: string, contentType: string, sliceSize: number): Blob;
    blobToFile(blob: any): IFile;
    b64ToFile(data: string, file: IFile): IFile;
    saveBase64AsImageFile(data: string): Promise<any>;
    resizeBase64Image(base64: string, maxWidth: number, maxHeight: number): Promise<any>;
    getBase64MimeType(base64: string): string;
    getBase64Extension(base64: string): string;
    resizeImage(file: IFile, maxWidth: Number, maxHeight: Number): Promise<IFile>;
    getNativeDirectory(subfolder: any): Promise<any>;
    resolveFilePath(filePath: string): Promise<any>;
    fixImageOrientation(path: any, fileName: any): Promise<any>;
    moveToImageDirectory(originalFilePath: string, disableOrientationFix: boolean): Promise<string>;
    moveToImageDirectoryBase(fileDirPath: string, fileEntry: any, newName: string, originalFilePath: string): Promise<string>;
    fileNativeWriteFile(path: any, fileName: any, text: any, options: any): Promise<string>;
    fileNativeCheckFile(path: any, fileName: any): Promise<boolean>;
    fixAbsolutePath(data: string): Promise<string>;
    getCloudinaryUrl(retVal: string): string;
    downloadFile(filename: any, mediaType: any, url: any, options: any): any;
    downloadFileToDevice(source: any, target: any): any;
    showPdfOnDevice(filePath: string, fileName: string): any;
    uploadProxy(photoUrl: string): any;
    exportToFile(content: any, type: any, encoding: any, filename: any): any;
    getLocalFilePath(): string;
    getLocalFileName(fileName: string): string;
    saveToLocalFile(blob: any, fileName: any): any;
    openBlob(blob: any, fileName: string, mimeType: string): Promise<any>;
    afterOpenBlob(filePath: any, mimeType: any): Promise<any>;
    getUrlWithAnnotations(src: string, photo?: any): string;
    cleanFileName(fileName: string): string;
    _requestExternalStoragePermission(): Promise<any>;
}
