import { ICondition } from '../condition/condition.interface';
import { SubQuery, Filters } from '../filters/filters.interface';
import { IColumnDefinition } from '../column-definition/column-definition.interface';
import { IAlgorithm } from '../algorithm/algorithm.interface';
import { FormFieldType, FormFieldCategory } from './form-field-type';
import { ExternalValidator } from '../../services/validators/validators.interface';
import { IFile } from '../file/file.interface';
import { IPhotoAnnotation } from '../../ui/photo-editor/photo-editor-data.interface';
export interface IFormField {
    title?: string;
    icon?: string;
    description?: string;
    caption?: string;
    header?: string;
    name?: string;
    extraClass?: string;
    tooltip?: string;
    filterName?: string;
    type?: string;
    mode?: string;
    dynamicType?: string;
    defaultType?: string;
    handleUndefined?: boolean;
    placeholder?: string;
    visible?: boolean;
    condition?: Array<ICondition | string | any> | string | ICondition;
    multiple?: boolean;
    idOnly?: boolean;
    idAttributeName?: string;
    autoselect?: boolean;
    tag?: boolean;
    allowCustomTag?: boolean;
    collectionName?: string;
    catalog?: string;
    required?: boolean | string | ICondition | Array<ICondition>;
    readonly?: boolean | string | ICondition | Array<ICondition>;
    clearable?: boolean;
    values?: Array<any>;
    value?: any;
    tmpValues?: Array<any>;
    dynamicValues?: string;
    defaultValues?: Array<any>;
    conditionalValues?: Array<any>;
    field?: IFormField;
    sessionValues?: string;
    filterable?: boolean;
    filterableAdvanced?: boolean;
    sortable?: boolean;
    columnDefinition?: IColumnDefinition;
    operators?: Array<any>;
    hint?: string;
    onChange?: (value: any, data: any, field?: IFormField) => any;
    onBlur?: (value: any, data: any) => void;
    handler?: (data: any, field: any, injector: any) => void | Promise<void>;
    subQuery?: SubQuery;
    subQueryOverride?: SubQuery;
    isSubQuery?: boolean;
    displayType?: string;
    entityType?: string;
    mapTransform?: Function;
    queryFields?: Array<string>;
    defaultFields?: Array<string>;
    flex?: number;
    translate?: boolean;
    showUsers?: boolean;
    stateful?: boolean;
    showMap?: boolean;
    allowComments?: boolean;
    autoreload?: boolean;
    allowTime?: boolean;
    allowAnnotate?: boolean;
    tab?: string;
    tabIndex?: number;
    tabCondition?: Array<ICondition> | string | ICondition;
    extensions?: Array<string>;
    validators?: Array<(injector: any) => any>;
    asyncValidators?: Array<(injector: any) => any>;
    externalValidators?: Array<ExternalValidator>;
    min?: number;
    max?: number;
    step?: number;
    minDate?: Date;
    maxDate?: Date;
    maxWidth?: number;
    maxHeight?: number;
    minPhotos?: number;
    maxPhotos?: number;
    crop?: string;
    allowLibrary?: boolean;
    allowHistory?: boolean;
    multiIndex?: number;
    debounce?: number;
    gridOptions?: any;
    hideLabel?: boolean;
    noPadding?: boolean;
    fixedPosition?: boolean;
    fieldFilter?: Function;
    forceExport?: boolean;
    suppressExport?: boolean;
    filters?: Filters;
    getFilters?: (session: any) => Filters;
    hiddenFields?: Array<string>;
    exportOrder?: number;
    inventory?: boolean;
    presence?: boolean;
    check?: boolean;
    answer?: Array<any>;
    explanation?: string;
    explanationDocument?: any;
    instructionsDocument?: any;
    linked?: boolean;
    slideIndex?: number;
    slideTitle?: string;
    deleteOnHidden?: boolean;
    isImage?: boolean;
    hideMobile?: boolean;
    isImageRecognition?: boolean;
    imageRecognitionAlgorithm?: IAlgorithm;
    imageRecognitionDisplay?: any;
    isBackgroundProcess?: boolean;
    dontSaveIfHidden?: boolean;
    color?: string;
    size?: number;
    roles?: Array<string>;
    disabledInvalid?: boolean;
    fixAutofill?: boolean;
    document?: IFile;
    image?: IFile;
    images?: any;
    allowOpenDetails?: boolean;
    advanced?: boolean;
    saveGeoloc?: boolean;
    allPhotosRequired?: boolean;
    allowOther?: boolean;
    showSubQueryFilters?: boolean;
    valuesColor?: Array<{
        key: string;
        value: string;
    }>;
    valuesType?: Array<{
        key: string;
        value: string;
    }>;
    language?: string;
    extraButton?: {
        title: string;
        buttons: Array<{
            text: string;
            handler?: Function;
        }>;
    };
    sentence?: string;
    annotations?: Array<IPhotoAnnotation>;
    categories?: Array<string>;
    leftValues?: Array<string>;
    rightValues?: Array<string>;
    correctValues?: Array<string>;
    wrongValues?: Array<string>;
    searchable?: boolean;
    filterByLocation?: boolean;
    url?: string;
    userTags?: Array<string>;
    imageLayout?: string;
    reportOrder?: number;
    allowTask?: boolean;
    disableAutocomplete?: boolean;
    formula?: string;
    forceModal?: boolean;
    pageSize?: number;
    shareToFeed?: boolean;
    duration?: number;
    secondary?: boolean;
    hideInReadOnly?: boolean;
    useButtons?: boolean;
    products?: Array<any>;
    tags?: Array<any>;
    extraDataFieldName?: string;
    allowOcr?: boolean;
    isLocal?: boolean;
    autofocus?: boolean;
    customModel?: any;
    invertedSort?: boolean;
}
export interface IFormFieldDescription {
    title: string;
    type: FormFieldType;
    icon: string;
    category?: FormFieldCategory;
}
export declare const MOBILE_FORM_FIELDS: Array<IFormFieldDescription>;
export declare const MOBILE_FORM_FIELDS_ADVANCED: Array<IFormFieldDescription>;
export declare const MOBILE_FORM_FIELDS_YOOASK: {
    title: string;
    type: FormFieldType;
    icon: string;
}[];
export declare const MOBILE_FORM_FIELDS_YOOASKPLUS: {
    title: string;
    type: FormFieldType;
    icon: string;
}[];
export declare const MOBILE_FORM_FIELDS_YOOGENERATOR: {
    title: string;
    type: FormFieldType;
    icon: string;
}[];
export declare const MOBILE_FORM_FIELDS_ALL: IFormFieldDescription[];
export declare const ICON_LIST: string[];
