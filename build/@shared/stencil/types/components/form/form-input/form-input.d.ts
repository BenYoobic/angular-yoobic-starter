import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { ValidatorEntry, AsyncValidator, Validator, IFormInputBase, IFormUIValidation, ExternalValidator } from '../../../interfaces';
export declare class YooFormInputComponent implements IFormInputBase<string | number> {
    validators: Array<Validator<string> | ValidatorEntry>;
    asyncValidators: Array<AsyncValidator<string>>;
    externalValidators: Array<ExternalValidator>;
    placeholder: string;
    placeholdertolabel: boolean;
    required: boolean;
    readonly: boolean;
    name: string;
    uiValidation: IFormUIValidation;
    validity: boolean;
    disabled: boolean;
    step: number;
    iconPrefix: string;
    iconSuffix: string;
    tooltip: string;
    type: string;
    showPasswordToggle: boolean;
    clearable: boolean;
    debounce: number;
    forceValueUpdate: boolean;
    autocapitalize: string;
    autocorrect: string;
    min: string;
    max: string;
    value: string | number;
    validityChanged: EventEmitter<boolean>;
    inputBlurred: EventEmitter<any>;
    inputFocused: EventEmitter<any>;
    inputChanged: EventEmitter<any>;
    iconClicked: EventEmitter<string>;
    enterPressed: EventEmitter<boolean>;
    tabPressed: EventEmitter<boolean>;
    inputType: string;
    host: HTMLStencilElement;
    protected emitValueAndSetValidity: (any: any) => void;
    protected isNumberAndSamsung: boolean;
    protected finalIconPrefix: string;
    private inputElement;
    private localValue;
    onValueChange(): void;
    getElement(): Promise<this>;
    isValidityNotEmpty(): Promise<boolean>;
    clear(): void;
    setFocus(): void;
    componentWillLoad(): void;
    onInputChanged(ev: any): void;
    onKeyPress(ev: KeyboardEvent): boolean;
    onShowPassword(): void;
    clearInput(ev: any): void;
    getPattern(): string;
    isTextInput(inputType: string): boolean;
    isTelInput(inputType: string): boolean;
    isPasswordInput(inputType: string): boolean;
    isNumberInput(inputType: string): boolean;
    renderReadonly(): JSX.Element;
    renderEditable(): JSX.Element[];
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
