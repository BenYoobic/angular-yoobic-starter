import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IProgressIndicator } from '../../../interfaces';
export declare class YooFormProgressIndicatorComponent {
    steps: Array<IProgressIndicator>;
    currentStep: number;
    isCompleted: boolean;
    lockIndex: Array<boolean>;
    displayMode: 'number' | 'icon';
    stepSelected: EventEmitter<number>;
    titleLinesChanged: EventEmitter<number>;
    shownSteps: number;
    contextStep: number;
    host: HTMLStencilElement;
    MAX_STEPS: number;
    STEP_SIZE: number;
    private collapsedSteps;
    private visibleSteps;
    private scroll;
    private textTruncate;
    private scrollContainer;
    private currentCircle;
    private lastContainer;
    private resizeListener;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidUnload(): void;
    selectStep(event: UIEvent, index: number): void;
    setStepNumber(): void;
    centerCurrentProgress(): Promise<void>;
    setProgressStyles(): void;
    isCollapsed(): boolean;
    isValidStep(index: number): boolean;
    isInvalidStep(index: number): boolean;
    isContextStep(index: number): boolean;
    isContextMenuCompleted(): boolean;
    isCurrentStep(index: number): boolean;
    isLastStep(index: number): boolean;
    onTextTruncateStatusChange(ev: CustomEvent): void;
    renderCompletedIndicator(): JSX.Element;
    renderContextMenu(): JSX.Element;
    renderStepContainer(step: string, index: number, lastIndex: number): JSX.Element;
    renderNumber(index: number): JSX.Element;
    renderIcon(index: number): JSX.Element;
    isProgressCompleted(index: number, lastIndex: number): boolean;
    renderProgresLine(index: number, lastIndex: number): JSX.Element;
    render(): JSX.Element;
}
