import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IFormDatetime, ValidatorEntry, Validator, IDateChange, ExternalValidator } from '../../../interfaces';
export declare class YooFormDateTimeComponent implements IFormDatetime {
    value: any;
    type: string;
    validators: Array<Validator<string> | ValidatorEntry>;
    externalValidators: Array<ExternalValidator>;
    placeholder: string;
    placeholdertolabel: boolean;
    required: boolean;
    readonly: boolean;
    iconSuffix: string;
    clearable: boolean;
    minDate: Date;
    maxDate: Date;
    name: string;
    nativePickerLabelColor: string;
    isSchedule: boolean;
    isRange: boolean;
    allowOcr: boolean;
    extraClass: string;
    autofocus: boolean;
    validity: boolean;
    validityChanged: EventEmitter<boolean>;
    inputBlurred: EventEmitter<any>;
    inputFocused: EventEmitter<any>;
    inputChanged: EventEmitter<any>;
    iconClicked: EventEmitter<string>;
    isCordovaDatePicker: boolean;
    isNativeDatePickerOpen: boolean;
    isCustomDatePickerOpen: boolean;
    host: HTMLStencilElement;
    protected dateDisplayFormat: string;
    protected datetimeDisplayFormat: string;
    protected timeDisplayFormat: string;
    protected iconPrefix: string;
    private is24Hour;
    private currentTime;
    private contentParent;
    private ionScroll;
    private inputContainer;
    private needsScrolling;
    private inputField;
    private preventDateChange;
    private isShowingOcr;
    isClickBlur(event: any): void;
    getElement(): Promise<this>;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    animateCalendar(open: boolean, timeout?: number): void;
    isTimeInput(inputType: string): boolean;
    isDateTimeInput(inputType: string): boolean;
    isDateInput(inputType: string): boolean;
    onInputChanged(ev: any): void;
    getDisplayValue(): any;
    onInputClick(ev: any): void;
    onDateInputFocused(ev: any): void;
    onClearClicked(event: any): void;
    getReadOnlyValue(): any;
    updateTimeValue(originalDate: Date, newTime: Date): Date;
    onToggle(event: any, htmlElement: IFormDatetime): void;
    onDateChanged(event: CustomEvent<IDateChange>): void;
    onDateRangeChanged(event: CustomEvent<IDateChange[]>): void;
    onTimeInputChanged(event: CustomEvent<Date>): void;
    onCalendarDayClicked(): void;
    onAmPmToggled(event: any): void;
    onTriggerOCR(): void;
    renderInputField(): JSX.Element;
    renderNativeInput(): JSX.Element;
    renderTimeInput(): JSX.Element;
    renderEditable(): JSX.Element;
    renderReadonly(): JSX.Element;
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
