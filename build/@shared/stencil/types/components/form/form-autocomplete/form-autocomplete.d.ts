import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IFormAutocomplete, IGridSearch, CardType, EntityType, Validator, AsyncValidator, ValidatorEntry, IEntity, IEntitySearchTags, IColumnDefinition, ICustomModel } from '../../../interfaces';
export declare class YooFormAutocompleteComponent implements IFormAutocomplete<any> {
    multiple: boolean;
    required: boolean;
    useTranslate: boolean;
    readonly: boolean;
    allowCustomTag: boolean;
    idOnly: boolean;
    idAttributeName: string;
    tag: boolean;
    hideSelectionFromInput: boolean;
    max: number;
    clearable: boolean;
    hideTags: boolean;
    isHistory: boolean;
    inline: boolean;
    displayType: CardType;
    placeholder: string;
    iconPrefix: string;
    name: string;
    emptyState: string;
    tagType: string;
    entityType: EntityType;
    tags: Array<IEntitySearchTags>;
    validators: Array<Validator<any> | ValidatorEntry>;
    asyncValidators: Array<AsyncValidator<any>>;
    extraButtons: Array<{
        icon: string;
        handler: Function;
    }>;
    columnDefinition: IColumnDefinition;
    customModel: ICustomModel;
    isLocal: boolean;
    validity: boolean;
    values: any[];
    pageSize: number;
    value: Array<any> | any;
    validityChanged: EventEmitter<boolean>;
    inputBlurred: EventEmitter<any>;
    inputFocused: EventEmitter<any>;
    inputChanged: EventEmitter<any>;
    fetchData: EventEmitter<IGridSearch>;
    selection: Array<IEntity>;
    showFormInput: boolean;
    showEmptyItemsAddNewTag: boolean;
    host: HTMLStencilElement;
    emitFetchData: (...args: any[]) => void;
    private formDynamicBottom;
    private formDynamic;
    private dialog;
    private currentGridSearch;
    private currentSelectedTags;
    private localValues;
    private itemsContainer;
    private searchInput;
    private searchText;
    private webGrid;
    private inputContainer;
    private hostClick;
    private hostClickListener;
    private hideContainerListener;
    onValueChange(): void;
    updateValues(values: any, forceOpen?: boolean): void;
    setValue(value: any): void;
    hideContainer(): void;
    clear(emitEvent?: boolean): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidUnload(): void;
    readonly dropdownOpenUp: boolean;
    readonly scrollDistance: number;
    isMultiple(): boolean;
    onInputClear(ev: Event): void;
    updateSelection(): void;
    onFetchData(ev: CustomEvent<IGridSearch>): void;
    refresh(): void;
    onInputFocused(): void;
    onSearchInputChanged(ev: any, clear?: boolean): void;
    showContainer(): void;
    showContainerDialog(): void;
    onItemSelect(ev: CustomEvent<any>): void;
    onCustomTagCreated(ev: CustomEvent<string>): void;
    onSelectionRemoved(selection: IEntity): void;
    onTagsSelect(ev: CustomEvent<IEntitySearchTags[]>): void;
    onSearchInputBlurred(ev: CustomEvent<string>): void;
    onEnterOrTabPresed(ev: CustomEvent<boolean>): void;
    removeAddItemContainerClasses(remove: boolean): void;
    addNewTag(): void;
    renderSelectedContent(): JSX.Element;
    renderFormInput(): JSX.Element;
    renderEntities(): JSX.Element;
    renderIconSuffixes(hasValue: boolean): JSX.Element;
    renderClickableSelectedContent(iconPrefix: string, hasValue: boolean, active?: boolean): JSX.Element;
    renderAddNewTag(): JSX.Element;
    renderEditable(): JSX.Element;
    renderReadonly(): JSX.Element;
    renderHistory(): JSX.Element;
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
