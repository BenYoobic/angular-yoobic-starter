import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IFormSelect, ValidatorEntry, AsyncValidator, Validator, IEntity } from '../../../interfaces';
export declare class YooFormChoiceComponent implements IFormSelect {
    multiple: boolean;
    values: any[];
    value: Array<any> | any;
    sentence: string;
    description: string;
    slideIndex: number;
    inputIndex: number;
    required: boolean;
    validators: Array<Validator<any[]> | ValidatorEntry>;
    asyncValidators: Array<AsyncValidator<any[]>>;
    readonly: boolean;
    isHistory: boolean;
    useTranslate: boolean;
    images: Array<any>;
    type: 'button' | 'radio' | 'ranking' | 'image' | 'chat' | 'card';
    name: string;
    allowOther: boolean;
    valuesColor: Array<{
        key: string;
        value: string;
    }>;
    validity: boolean;
    validityChanged: EventEmitter<boolean>;
    inputBlurred: EventEmitter<any>;
    inputFocused: EventEmitter<any>;
    inputChanged: EventEmitter<any>;
    showOther: boolean;
    selection: Array<any>;
    host: HTMLStencilElement;
    private sizeColumn;
    private sizeButton;
    private widthButton;
    private outerContainerElement;
    private textareaValue;
    private textareaRef;
    componentWillLoad(): void;
    componentDidLoad(): void;
    validate(): boolean;
    initInteract(): void;
    clearInteractEvents(): void;
    initInteractDraggable(): void;
    initInteractDroppable(): void;
    onDropWord(event: any): void;
    dragMoveListener(event: any): void;
    dragEndListener(event: any): void;
    updateRank(valuesIndex: number, move: number, currItem: string): void;
    updateValue(oldRank: number, newRank: number, isRanked: boolean, valueIndex: number): void;
    calculateColumn(size: number): void;
    calculateButton(size: number): void;
    convertToEntities(values: string[]): IEntity[];
    convertToChoiceFormat(valuesEntity: IEntity[]): any[];
    getValuesWithOther(): string[];
    private setShowOther;
    updateShowOther(): void;
    onInput(ev: Event): void;
    onOpenImage(text?: string, index?: number): void;
    onItemSelect(item: string): void;
    onItemSelectRadio(item: any): void;
    isSelected(item: any): boolean;
    onItemClick(index: any): void;
    updateRanking(word: string, steps: number): void;
    onRankedItemClick(index: any): void;
    onTextAreaFocused(): void;
    renderButton(): JSX.Element;
    renderRadio(): JSX.Element;
    getColor(value: any): string;
    getBackgroundClass(value: any): "" | "gradient-success";
    renderItem(item: string): JSX.Element;
    renderRanking(): JSX.Element;
    renderChat(): JSX.Element;
    renderCard(): JSX.Element;
    renderImage(): JSX.Element;
    renderReadonlyRanking(): JSX.Element;
    renderReadonlyChat(): JSX.Element;
    renderReadOnlyImage(value: string): JSX.Element;
    renderReadonly(): JSX.Element;
    renderEditable(): JSX.Element;
    renderTextHistory(): JSX.Element;
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
