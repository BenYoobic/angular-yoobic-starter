import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IGridSearch, CardType, IFormField, EntityType, IEntityAction, IEntity, IColumnDefinition, ICustomModel, IEntitySearchTags, IAppSearchTab, IEntitySearchFilters, ISort, IFormSearch, IMarker, IPosition } from '../../../interfaces';
import { ScrollDetail } from '../../../utils';
import { GridOptions } from 'ag-grid-community';
export declare class YooGridComponent {
    direction: 'vertical' | 'horizontal';
    items: Array<IEntity>;
    initialSelection: Array<IEntity>;
    isLocal: boolean;
    columnDefs: Array<IColumnDefinition>;
    gridConfig: GridOptions;
    total: number;
    displayModes: Array<CardType>;
    displayType: CardType;
    entityType: EntityType;
    hideHeader: boolean;
    hideFooter: boolean;
    showFilters: boolean;
    showSearch: boolean;
    hideTags: boolean;
    showCreate: boolean;
    pageSize: number;
    headerFn?: (item: any, index: any, records: any) => string;
    isLoading: boolean;
    keepSelection: boolean;
    multiple: boolean;
    useTranslate: boolean;
    search: string;
    searchBarPlaceholder: string;
    allowCustomTag: boolean;
    animated: boolean;
    idOnly: boolean;
    idAttributeName: string;
    isFramed: boolean;
    isCompact: boolean;
    showActionsAsMore: boolean;
    isReadonly: boolean;
    extraClass: string;
    valuesColor: Array<any>;
    heading: string;
    subheading: string;
    progress?: number;
    progressCss?: string;
    hideEmptyState: boolean;
    emptyState: string;
    emptyStateHandler: () => void;
    emptyStateButtonText: string;
    emptyStateDescription: string;
    icons: Array<IEntityAction>;
    topActions: Array<IEntityAction>;
    bottomActions: Array<IEntityAction>;
    globalActions: Array<IEntityAction>;
    secondaryActions: Array<IEntityAction>;
    customModel: ICustomModel;
    tags: Array<IEntitySearchTags>;
    selectedTags: Array<IEntitySearchTags>;
    model: IAppSearchTab;
    hideAdvancedFilters: boolean;
    currentPosition: IPosition;
    isGeoLocEntity: boolean;
    isCollapsible: boolean;
    progressbarAlignMode: string;
    infiniteScrollDisabled: boolean;
    clearTags: boolean;
    hasVerticalLine: boolean;
    scrollable: boolean;
    showGlobalActions: boolean;
    loadMoreButton: boolean;
    forceHeading: boolean;
    hideRefreshButton: boolean;
    forceAddNewTag: boolean;
    hideTotal: boolean;
    secondaryActionsDropdown: boolean;
    searchFieldOutsideComponent: boolean;
    isSelectionMode: boolean;
    sortsAndFilters: {
        filters: Array<IEntitySearchFilters>;
        sorts: Array<ISort>;
    };
    selection: Array<any>;
    iconDisplayNext: string;
    slidesOptions: any;
    isSelectAll: boolean;
    isFrameExpanded: boolean;
    markers: IMarker[];
    headerDivs: Array<HTMLDivElement>;
    fetchData: EventEmitter<IGridSearch>;
    fieldFetchData: EventEmitter<IFormSearch>;
    select: EventEmitter<Array<IEntity> | IEntity>;
    searchInputFocused: EventEmitter<boolean>;
    searchInputBlurred: EventEmitter<boolean>;
    searchInputEnterPressed: EventEmitter<string>;
    headingClicked: EventEmitter<boolean>;
    displayTypeChange: EventEmitter<CardType>;
    addNewTagPressed: EventEmitter<string>;
    tagsSelect: EventEmitter<Array<IEntitySearchTags>>;
    sortsAndFiltersChange: EventEmitter<{
        filters: Array<IEntitySearchFilters>;
        sorts: Array<ISort>;
    }>;
    sortsAndFiltersShowed: EventEmitter<boolean>;
    emptyResults: EventEmitter<boolean>;
    frameExpanded: EventEmitter<boolean>;
    swipeEnd: EventEmitter<IEntity>;
    viewMoreToggled: EventEmitter<IEntity>;
    entityCollapsed: EventEmitter<{
        collapsed: boolean;
        item: IEntity;
    }>;
    itemOptionSelected: EventEmitter<{
        item: IEntity;
        action: IEntityAction;
    }>;
    protected host: HTMLStencilElement;
    protected dialogSortsAndFilters: HTMLYooEntitySearchDialogElement;
    protected currentPage: number;
    protected searchText: string;
    private mapScroll;
    private gridMap;
    private addressAutocomplete;
    private itemsSliding;
    private joinedItems;
    private hasItemsRendered;
    private dotDiv;
    private tapped;
    private horizontalSlidesAnim;
    private gridApi;
    private columnApi;
    private finalGridConfig;
    private resizeListener;
    private slides;
    constructor();
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidUnload(): void;
    onInitialSelectionChanged(): void;
    onDataChanged(newItems: Array<IEntity>, oldItems: Array<IEntity>): void;
    onGridConfigUpdate(): void;
    scrollItem(index: number): void;
    pullToRefresh(refresher?: any): void;
    closeItemsSliding(): void;
    resetSearchText(): void;
    clearSelection(keepSelectionMode?: boolean, noEmit?: boolean): void;
    updateGridConfig(): void;
    updateSlides(): void;
    onIonSlideDidChange(): void;
    updateItemSliding(): void;
    updateMarkers(): void;
    setScrollAnimation(): void;
    getCustomPosition(): Promise<IPosition>;
    onFetchData(): void;
    onInfiniteScroll(ev?: CustomEvent<void>): void;
    findIndex(item: IEntity): number;
    isCardListNonSelectable(item: IEntity): boolean;
    onItemSelect(ev: MouseEvent, item: IEntity): void;
    isSelected(item: IEntity): boolean;
    onToggleSelectionMode(): void;
    onToggleSelectAll(): void;
    onSearchInputChange(ev: CustomEvent<string>): void;
    onSearchInputFocused(): void;
    onSearchInputBlurred(): void;
    onPageChanged(ev: CustomEvent<number>): void;
    onItemsPerPageChanged(ev: CustomEvent<number>): void;
    onChangeDisplay(): void;
    onFrameIconClicked(): void;
    onEntityCollapsed(event: CustomEvent<any>): void;
    setDisplayIcon(): void;
    getItems(): Array<IEntity>;
    isNewTag(): boolean;
    onSearchInputEnterPressed(ev: CustomEvent<boolean>): void;
    onAddNewTag(): void;
    onShowFilterAdvanced(): void;
    hasFilters(): boolean;
    onTagSelect(ev?: CustomEvent<Array<IEntitySearchTags>>): void;
    onHeadingClick(): void;
    isMap(): boolean;
    isAgGrid(): boolean;
    toggleMarkerSelection(index: number): void;
    onStoreEntityClicked(index: number): void;
    onMarkerSelected(event: CustomEvent<IMarker[]>): void;
    onAddressFetchData(ev: CustomEvent<IGridSearch>): void;
    onAddressChanged(ev: CustomEvent<any>): void;
    onItemSlidingDrag(item: IEntity, index: number): void;
    onHorizontalSlidingEnd(ev: any): void;
    forceFieldUpdate(field: IFormField, fieldData?: any, formSearch?: IFormSearch): void;
    onMapScroll(ev: CustomEvent<ScrollDetail>): void;
    onFetchMapData(event: CustomEvent<boolean>): void;
    onHeaderContainerTouchStart(): void;
    isWebTab(): boolean;
    isPhotosTab(): boolean;
    getIconColor(item: IEntity): any;
    getClassList(): string;
    renderSearch(): JSX.Element;
    renderChangeDisplayButton(): JSX.Element;
    renderDisplayMode(): JSX.Element;
    renderAddressAutocomplete(): JSX.Element;
    renderEntitySearchTags(): JSX.Element;
    renderHeader(): JSX.Element[];
    isToggleModeVisible(): boolean;
    isTagsVisible(): boolean;
    isCollapsibleCheck(): boolean;
    hasNoKpi(item: IEntity): boolean;
    renderFooter(): JSX.Element;
    renderAgGrid(): JSX.Element;
    renderMapGrid(): JSX.Element;
    renderEntityItems(header: any, headerIndex: number, lastItemIndex: number, hasVerticalLine: boolean, alreadyRendered: boolean): JSX.Element;
    renderBody(): JSX.Element;
    renderAddNewTag(): JSX.Element;
    presentActionSheet(actions: Array<IEntityAction>, item: IEntity): void;
    renderItemWithMore(item: IEntity): JSX.Element;
    renderItemSliding(item: IEntity, isLast: boolean, index: number): JSX.Element;
    private enableWebOptionsContainers;
    renderWebItemOptionButtons(action: IEntityAction, item: IEntity): JSX.Element;
    renderMobileItemOptionButtons(action: IEntityAction, item: IEntity): JSX.Element;
    onItemOptionSelect(action: IEntityAction, item: IEntity): void;
    renderJoinLine(headerIndex: number, itemIndex: number): JSX.Element;
    renderEntity(item: IEntity, isLast?: boolean): JSX.Element;
    renderInfiniteScroll(): JSX.Element;
    renderPlaceholders(): JSX.Element;
    renderPlaceholderContent(useSlide?: boolean): JSX.Element[];
    renderGlobalActions(): JSX.Element;
    renderScrollSpacer(): JSX.Element;
    renderContent(): Array<JSX.Element>;
    renderBase(): Array<JSX.Element>;
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
