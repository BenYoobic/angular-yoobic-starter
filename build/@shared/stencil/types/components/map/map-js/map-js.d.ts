import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IMapEntry, IMarker, IFilterGroup } from '../../../interfaces';
export declare class YooMapJsComponent {
    mapEntry: IMapEntry;
    filterGroups: IFilterGroup[];
    markers: IMarker[];
    filterGroupsChanged: EventEmitter<IFilterGroup[]>;
    select: EventEmitter<IMarker[]>;
    isLoading: boolean;
    host: HTMLStencilElement;
    protected map: any;
    protected popup: any;
    private layers;
    private clusterRadius;
    private isDestroyed;
    private isLoaded;
    private colorLegends;
    onMarkersChanged(): void;
    flyTo(longitude: number, latitude: number, zoom?: number): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    onToggleFilterGroup(event: CustomEvent): void;
    getMapbox(): Promise<any>;
    initMap(): void;
    addControls(L: any): void;
    initLanguage(): void;
    initMarkers(): void;
    fitToMarkers(L: any): void;
    createClusterGroup(clusters?: string[]): void;
    createCluster(L: any, status: string, color: string): any;
    addUnclusteredMarkers(L: any): void;
    handleUnclusteredMarkerClick(event: any, L: any, marker: IMarker): void;
    addClusteredMarkers(L: any, status: string, color: string, cluster: any): void;
    handleClusterMarkerClick(ev: any, L: any): void;
    getColor(cluster: string): string;
    addDirections(profile: string): void;
    removeFeatureGroupLayers(): void;
    onFilterGroupsChange(): void;
    render(): JSX.Element;
}
