import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IMapEntry, IFilterGroup, IPosition, IMarker, IMarkerColor } from '../../../interfaces';
export declare class YooMapComponent {
    markers: IMarker[];
    useCluster: boolean;
    currentLanguage: string;
    position: IPosition;
    minZoom: number;
    maxZoom: number;
    groupBy: string;
    showFullscreenControl: boolean;
    showLegend: boolean;
    filterGroups: IFilterGroup[];
    legendColors: IMarkerColor[];
    fitToMarkers: boolean;
    showControls: boolean;
    showDirections: boolean;
    disableZoom: boolean;
    icon: string;
    mapEntry: IMapEntry;
    isModal: boolean;
    showGetDirectionsButton: boolean;
    isGridMap: boolean;
    gridMapCardCollapsed: boolean;
    zoom: number;
    select: EventEmitter<IMarker[]>;
    filterGroupsChanged: EventEmitter<IFilterGroup[]>;
    fetchMapData: EventEmitter<boolean>;
    useAppleMaps: EventEmitter<string>;
    useGoogleMaps: EventEmitter<string>;
    useCityMapper: EventEmitter<string>;
    useCopyAddress: EventEmitter<string>;
    forceReRender: boolean;
    isChinese: boolean;
    host: HTMLStencilElement;
    private mapGL;
    private mapJS;
    private previousCollapseState;
    onCardListCollapsed(event: CustomEvent<boolean>): void;
    setProps(mapEntry: IMapEntry): void;
    flyTo(longitude: number, latitude: number, zoom?: number): void;
    getCenter(): Promise<{
        lat: number;
        lng: number;
    }>;
    componentWillLoad(): void;
    onSelected(event: CustomEvent<IMarker[]>): void;
    onFilterGroupsChanged(event: CustomEvent<IFilterGroup[]>): void;
    onFetchData(event: CustomEvent<boolean>): void;
    isEmpty(object: any): boolean;
    populateMapEntry(): void;
    showGetDirectionsActionSheet(): void;
    renderHeader(): JSX.Element;
    renderMapGL(): JSX.Element;
    renderMapJS(): JSX.Element;
    renderAMap(): JSX.Element;
    renderContent(): JSX.Element;
    render(): JSX.Element;
}
