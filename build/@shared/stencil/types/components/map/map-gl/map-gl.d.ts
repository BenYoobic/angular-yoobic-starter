import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { IMapEntry, IMarker, IFilterGroup } from '../../../interfaces';
export declare class YooMapGLComponent {
    filterGroups: IFilterGroup[];
    mapEntry: IMapEntry;
    markers: IMarker[];
    filterGroupsChanged: EventEmitter<IFilterGroup[]>;
    select: EventEmitter<IMarker[]>;
    fetchData: EventEmitter<boolean>;
    sizeToggled: EventEmitter<boolean>;
    isLoading: boolean;
    isMaximized: boolean;
    host: HTMLStencilElement;
    private map;
    private popup;
    private mapContainer;
    private layers;
    private clusterRadius;
    private clusterCircleSize;
    private isDestroyed;
    private isLoaded;
    private iconColors;
    private clusterColors;
    private mapCenter;
    private currentBounds;
    onMarkersChanged(): void;
    flyTo(longitude: number, latitude: number, zoom?: number): void;
    getCenter(): Promise<any>;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    onToggleFilterGroup(event: CustomEvent<IFilterGroup>): void;
    initMap(): void;
    handleMapMove(event: any): void;
    isFeatureMarker(featureMarker: IMarker, markerToCompare: IMarker): boolean;
    handleMapClick(event: any): void;
    handleMarkerClick(renderedFeatures: any, singleMarker: IMarker[]): IMarker[];
    handleClusterClick(event: any, markerClusterPoints: IMarker[]): IMarker[];
    handleMouseMove(event: any): void;
    addControls(): void;
    initMarkers(): void;
    removeLayers(): void;
    addGeoJSONSources(): void;
    addUnClusteredLayers(): void;
    fitToMarkers(): void;
    removeSinglePointSrc(): void;
    removePointLayer(): void;
    addClusteredLayers(): void;
    setOriginalFilterGroups(originalFilterGroups: IFilterGroup[]): void;
    getColor(layerId: string): string;
    getIcon(layerId: string): string;
    getPopupTemplate(properties: Array<any>, collectionName?: string): string;
    onFilterGroupsChange(visible: boolean, layer: IFilterGroup): void;
    onResize(): void;
    onToggleSize(): void;
    renderLegend(): JSX.Element;
    shouldShowLegend(): boolean;
    render(): JSX.Element;
}
