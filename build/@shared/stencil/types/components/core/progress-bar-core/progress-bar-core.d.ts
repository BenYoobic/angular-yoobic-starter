import '../../../stencil.core';
export declare class YooProgressBarCoreComponent {
    shape: 'line' | 'circle' | 'semi-circle';
    progressUnitLabel: 'percentage' | 'points' | 'step' | 'none';
    progressLabelFontSize: 'small' | 'medium' | 'large' | 'extra-large';
    progressLabelColor: 'success' | 'danger' | 'dark' | 'danger-light';
    horizontalAlign: 'left' | 'middle' | 'right';
    verticalAlign: 'top' | 'middle' | 'bottom';
    percentColorScheme: boolean;
    allowNonAvailableValue: boolean;
    progressAnimationDuration: number;
    maxValue: number;
    maxStep: number;
    progressValue: number;
    currentStep: number;
    progressParameters: any;
    loadedProgressContainer: any;
    updatedStep: number;
    updatedProgress: number;
    properColorProgress: string;
    host: HTMLStencilElement;
    private progressContainer;
    private baseClass;
    onProgressValueChanged(newProgress: number): void;
    onCurrentStepChanged(updatedStep: number): void;
    onprogressParametersChange(newParams: any): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    /**
     * @description display the proper progress color based on the current progress value
     * @returns the proper class color for the progress bar
     */
    getProperColorProgressClass(progressElement: any, progress: number, percentColorScheme: boolean, isPointUnit: boolean): void;
    /**
     *
     * @param progressValue
     * @param progressStepValues
     * @description display the proper label for the progress based on the unit and the progress value
     * @return a span containing the formatted text to display
     */
    getFormatedLabelToDisplay(progressValue?: number, progressValueFontSize?: string, progressStepValues?: Array<number>): string;
    /**
     * @description handle the calcul of the progress percentage for step mode
     * @returns a number value between 0 and 1.0 to set for the progress bar
     */
    private getFormattedProgressValue;
    /**
     * @description handle the calculation of the progress in case of having a maxValue (export mode)
     * @returns a number value between 0 and 1.0 to set for the progress bar
     */
    private getPercentProgress;
    /**
     * @description get the proper css class for positioning the progress label based on its parameters
     * @returns a css class
     */
    private getProperLabelPositionClass;
    /**
     * @description display the proper network score label based on its parameters (only for semi-circle and circle)
     * @returns a span containing the formatted network score display
     */
    private getFormattedScoreToDisplay;
    private getProperProgressUnitDisplay;
    /**
     * @description programatically add the 'sc-yoo-progress-bar-{shape}' class for every element generated by the progressbar.js library (svg, path0, path1, divs etc..)
     * without adding those classes, the respective class from the child component scss file wont be recognize in scoped mode
     */
    private addBaseClass;
    /**
     * @description concat all the class needed for correctly displaying the label based on the position, font-size etc..
     * @returns concatenation of css class
     */
    private getProgressLabelClassAttribute;
    hostData(): {
        class: any;
    };
    render(): JSX.Element;
}
