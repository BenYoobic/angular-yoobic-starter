import '../../../stencil.core';
import { EventEmitter } from '../../../stencil.core';
import { ITextTruncate } from '../../../interfaces';
export declare class YooTextTruncateComponent {
    hideMoreButton: boolean;
    animationLoadTime: number;
    showBreakLine: boolean;
    maxLine: number;
    content: string;
    statusChanges: EventEmitter<ITextTruncate>;
    textTruncateLoaded: EventEmitter<any>;
    toggled: EventEmitter<boolean>;
    expanded: boolean;
    showEllipsis: boolean;
    forceRefresh: boolean;
    host: HTMLStencilElement;
    contentWrapperDiv: HTMLDivElement;
    hiddenDiv: HTMLElement;
    actualSingleHeight: number;
    maxHeightAllowed: number;
    untruncatedNumberOfLines: number;
    lineClampSupport: boolean;
    textOverflown: boolean;
    singleLine: boolean;
    textTruncateDirty: boolean;
    private singleLineTextElement;
    private singleLineButtonElement;
    onContentUpdate(): void;
    getSingleLineTextElement(): Promise<HTMLElement>;
    getSingleLineButttonElement(): Promise<HTMLElement>;
    updateTruncate(): void;
    showText(): void;
    hideText(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentWillUpdate(): void;
    componentDidUpdate(): void;
    checkOverflow(): void;
    shoudUseOverflow(): boolean;
    isTextOverflow(): boolean;
    toggleText(ev: MouseEvent): void;
    isLineClampSupported(): boolean;
    isSingleLineTruncate(): boolean;
    renderUsingLineClamp(): JSX.Element;
    renderNormalText(): JSX.Element;
    renderWithPureCss(): JSX.Element;
    renderSingleLineWithCss(): JSX.Element;
    renderBasedOnSupport(): JSX.Element;
    render(): JSX.Element[];
}
