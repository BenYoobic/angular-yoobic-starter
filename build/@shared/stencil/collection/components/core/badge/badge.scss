@mixin color-class($class, $color, $text-color: light_const) {
    :host(.#{$class}) {
        .outer-container {
            background: cssvar($color);
            .inner-container {
                color: cssvar(light);
                .inner-text {
                    color: cssvar($text-color);
                }
            }
        }
    }
}
@mixin outline-color-class($class, $color, $gradient: none) {
    @if($gradient==none) {
        :host(.#{$class}.outline) {
            .outer-container {
                border-color: cssvar($color);
                .inner-container {
                    color: cssvar($color);
                    .inner-text {
                        color: cssvar($color);
                    }
                }
            }
        }
    }
    @else {
        :host(.#{$class}.outline) {
            .outer-container {
                border-image: cssvar($gradient);
                border-image-slice: 1;
                .inner-container {
                    color: cssvar($color);
                }
                .inner-text {
                    color: cssvar($color) !important;
                }
            }
        }
    }
}

:host {
    --background: unset;
    --color-inner-text: #{cssvar(stable)};
    --font-size-inner-container: #{cssvar(font-s)};
    --inner-container-padding: 0.5rem;
    --inner-container-default-padding: 0.25rem 0.53rem;
    --outer-container-border: none;
    --shadow: unset;
}

:host {
    display: inline-block;
    font-weight: 400;
    .outer-container {
        display: inline-block;
        transition: all 0.3s;
        border: cssvar(outer-container-border);
        border-radius: cssvar(border-radius-input);
        background: cssvar(background);
        box-shadow: cssvar(shadow);
        opacity: 1;
        .inner-container {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            padding: cssvar(inner-container-default-padding);
            font-size: cssvar(font-size-inner-container);
            line-height: normal;
            .inner-text {
                color: cssvar(color-inner-text);
                word-break: break-word;
            }
            .icon-close {
                padding-left: 0.375rem;
                color: cssvar(stable);
                cursor: pointer;
            }
            .icon-left {
                padding-right: 0.375rem;
            }
            .icon-right {
                padding-left: 0.375rem;
            }
        }
        &.closed {
            opacity: 0; //display: none;
        }
    }
}

:host(.gradient-success) {
    .icon-close {
        color: cssvar(light_const) !important;
    }
}

:host(.gradient-danger-light) {
    .icon-close {
        color: cssvar(light_const) !important;
    }
}

:host(.light-border) {
    .outer-container {
        border: solid 1px cssvar(stable-light);
    }
}

:host(.single) {
    width: 100%;
    .outer-container {
        width: 100%;
        .inner-container {
            display: flex;
            justify-content: space-between;
            padding-right: 0;
            padding-left: 0;
            color: cssvar(dark); //padding-top: 9px;
            .inner-text {
                padding-left: 0;
                color: cssvar(dark);
            }
            .icon-close {
                padding-right: 0.375rem;
                color: cssvar(stable);
                font-size: cssvar(font-m);
            }
        }
    }
}

:host(.round) {
    .outer-container {
        border-radius: 2rem;
    }
}

:host(.circle) {
    display: block;
    height: 10px;
    line-height: 0;
    .outer-container {
        width: 8px;
        border-radius: 50%;
    }
}

:host(.multiple-line) {
    .outer-container {
        .inner-container {
            .inner-text {
                padding: 0.325rem;
            }
        }
    }
}

:host(.multiple-line.missing-word) {
    .outer-container {
        border-radius: 1.25rem;
        text-align: left;
    } 
}

:host(.icon-only) {
    .outer-container {
        .inner-container {
            .icon-left {
                padding-right: 0;
            }
        }
    }
}

:host(.icon-only.small) {
    .outer-container {
        width: 18px;
    }
}

:host(.uppercase) {
    text-transform: uppercase;
}

:host(.small) {
    .outer-container {
        .inner-container {
            font-size: cssvar(font-xs);
        }
    }
}

:host(.large) {
    .outer-container {
        // min-width: 140px;
        min-height: 30px;
        .inner-container {
            font-size: cssvar(font-m); // padding: 5px 8px;
            .icon-close {
                padding-left: 0.75rem;
                color: cssvar(stable);
            }
            .icon-left {
                padding-right: 0.75rem;
            }
            .icon-right {
                padding-left: 0.75rem;
            }
        }
    }
}

:host(.link) {
    cursor: pointer;
    .inner-container:hover {
        text-decoration: underline;
    }
}

:host(.outline) {
    &.large {
        .outer-container {
            .inner-container {
                // Override standard padding
                padding: 0.25rem 0.5rem;
            }
        }
    }
    .outer-container {
        border: solid 1px rgba(40, 47, 54, 0.15);
        border-radius: 5px;
        background: cssvar(light) !important;
        .inner-container {
            // Override standard padding
            padding: 0.25rem 0.25rem;
        }
    }
}

:host(.transparent) {
    .outer-container {
        background: rgba(255, 255, 255, 0.4);
        color: cssvar(light);
    }
}

:host(.notification) {
    .outer-container {
        border-radius: 2rem;
        .inner-container {
            padding: 0.21875rem 0.34375rem;
            font-size: cssvar(font-xs);
        }
    }
}

:host(.notification-medium) {
    .outer-container {
        border-radius: 2rem;
        .inner-container {
            padding: 0.15625rem 0.34375rem;
            transform: translateY(-0.0625rem);
            font-size: cssvar(font-xs);
        }
    }
}

:host(.notification-mini) {
    .outer-container {
        width: 5px;
        height: 5px;
        border-radius: 50%;
    }
}

:host(.web-menu-position) {
    .outer-container {
        @include abs-pos(-0.1875rem, -0.25rem, auto, auto);
    }
}

:host(.stable-light) {
    .outer-container {
        .inner-container {
            .inner-text {
                color: cssvar(text-color) !important;
            }
        }
    }
}

:host(.readonly) {
    .outer-container {
        .inner-container {
            padding: 0; // cssvar(inner-container-padding);
            padding-left: 0;
            .inner-text {
                padding: 0;
                color: cssvar(black);
            }
        }
    }
}

:host(.history) {
    .outer-container {
        .inner-container {
            padding: 0 !important;
        }
    }
}

:host(.web.autocomplete) {
    .outer-container {
        .inner-container {
            .inner-text {
                word-break: normal;
            }
        }
    }
}

:host(.button-like) {
    .outer-container {
        width: 150px;
        height: 50px;
        border-radius: 8px;
        .inner-container {
            height: 100%;
            padding: unset;
        }
    }
}
@include color-class(accent, accent);
@include color-class(light, light, black);
@include color-class(dark, dark);
@include color-class(always-black, always-black);
@include color-class(black, black);
@include color-class(success, success);
@include color-class(light-orange, light-orange);
@include color-class(danger, danger);
@include color-class(danger-light, danger-light);
@include color-class(info, info);
@include color-class(info-120, info-120);
@include color-class(warning, warning);
@include color-class(stable, stable);
@include color-class(royal, royal);
@include color-class(energized, energized);
@include color-class(gradient-success, gradient-success);
@include color-class(gradient-danger, gradient-danger);
@include color-class(gradient-danger-light, gradient-danger-light);
@include color-class(gradient-energized, gradient-energized);
@include color-class(stable-light, stable-light);
@include outline-color-class(accent, accent);
@include outline-color-class(danger, danger);
@include outline-color-class(warning, warning);
@include outline-color-class(success, success);
@include outline-color-class(light-orange, light-orange);
@include outline-color-class(info, info);
@include outline-color-class(dark, dark);
@include outline-color-class(black, black);
@include outline-color-class(gradient-success, success, gradient-success);
@include outline-color-class(gradient-danger, danger, gradient-danger);
@include outline-color-class(gradient-danger-light, danger-light, gradient-danger-light);
:host(.gradient-energized) {
    .outer-container {
        .inner-container {
            color: cssvar(always-light);
        }
    }
}